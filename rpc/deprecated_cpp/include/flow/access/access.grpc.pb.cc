// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flow/access/access.proto

#include "flow/access/access.pb.h"
#include "flow/access/access.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flow {
namespace access {

static const char* AccessAPI_method_names[] = {
  "/flow.access.AccessAPI/Ping",
  "/flow.access.AccessAPI/GetLatestBlockHeader",
  "/flow.access.AccessAPI/GetBlockHeaderByID",
  "/flow.access.AccessAPI/GetBlockHeaderByHeight",
  "/flow.access.AccessAPI/GetLatestBlock",
  "/flow.access.AccessAPI/GetBlockByID",
  "/flow.access.AccessAPI/GetBlockByHeight",
  "/flow.access.AccessAPI/GetCollectionByID",
  "/flow.access.AccessAPI/SendTransaction",
  "/flow.access.AccessAPI/GetTransaction",
  "/flow.access.AccessAPI/GetTransactionResult",
  "/flow.access.AccessAPI/GetAccount",
  "/flow.access.AccessAPI/GetAccountAtLatestBlock",
  "/flow.access.AccessAPI/GetAccountAtBlockHeight",
  "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock",
  "/flow.access.AccessAPI/ExecuteScriptAtBlockID",
  "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight",
  "/flow.access.AccessAPI/GetEventsForHeightRange",
  "/flow.access.AccessAPI/GetEventsForBlockIDs",
  "/flow.access.AccessAPI/GetNetworkParameters",
  "/flow.access.AccessAPI/GetLatestProtocolStateSnapshot",
  "/flow.access.AccessAPI/GetExecutionResultForBlockID",
};

std::unique_ptr< AccessAPI::Stub> AccessAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AccessAPI::Stub> stub(new AccessAPI::Stub(channel, options));
  return stub;
}

AccessAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(AccessAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestBlockHeader_(AccessAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeaderByID_(AccessAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeaderByHeight_(AccessAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestBlock_(AccessAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByID_(AccessAPI_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByHeight_(AccessAPI_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollectionByID_(AccessAPI_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTransaction_(AccessAPI_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransaction_(AccessAPI_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionResult_(AccessAPI_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccount_(AccessAPI_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountAtLatestBlock_(AccessAPI_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountAtBlockHeight_(AccessAPI_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteScriptAtLatestBlock_(AccessAPI_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteScriptAtBlockID_(AccessAPI_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteScriptAtBlockHeight_(AccessAPI_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsForHeightRange_(AccessAPI_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsForBlockIDs_(AccessAPI_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetworkParameters_(AccessAPI_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestProtocolStateSnapshot_(AccessAPI_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionResultForBlockID_(AccessAPI_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AccessAPI::Stub::Ping(::grpc::ClientContext* context, const ::flow::access::PingRequest& request, ::flow::access::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::PingRequest, ::flow::access::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void AccessAPI::Stub::async::Ping(::grpc::ClientContext* context, const ::flow::access::PingRequest* request, ::flow::access::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::PingRequest, ::flow::access::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::Ping(::grpc::ClientContext* context, const ::flow::access::PingRequest* request, ::flow::access::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::PingResponse>* AccessAPI::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::flow::access::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::PingResponse, ::flow::access::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::PingResponse>* AccessAPI::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::flow::access::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockHeaderRequest& request, ::flow::access::BlockHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetLatestBlockHeaderRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestBlockHeader_, context, request, response);
}

void AccessAPI::Stub::async::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockHeaderRequest* request, ::flow::access::BlockHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetLatestBlockHeaderRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockHeader_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockHeaderRequest* request, ::flow::access::BlockHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockHeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::PrepareAsyncGetLatestBlockHeaderRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockHeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockHeaderResponse, ::flow::access::GetLatestBlockHeaderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestBlockHeader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::AsyncGetLatestBlockHeaderRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockHeaderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestBlockHeaderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByIDRequest& request, ::flow::access::BlockHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetBlockHeaderByIDRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockHeaderByID_, context, request, response);
}

void AccessAPI::Stub::async::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByIDRequest* request, ::flow::access::BlockHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetBlockHeaderByIDRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByID_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByIDRequest* request, ::flow::access::BlockHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::PrepareAsyncGetBlockHeaderByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockHeaderResponse, ::flow::access::GetBlockHeaderByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockHeaderByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::AsyncGetBlockHeaderByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockHeaderByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetBlockHeaderByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByHeightRequest& request, ::flow::access::BlockHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetBlockHeaderByHeightRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockHeaderByHeight_, context, request, response);
}

void AccessAPI::Stub::async::GetBlockHeaderByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByHeightRequest* request, ::flow::access::BlockHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetBlockHeaderByHeightRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByHeight_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetBlockHeaderByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByHeightRequest* request, ::flow::access::BlockHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::PrepareAsyncGetBlockHeaderByHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockHeaderResponse, ::flow::access::GetBlockHeaderByHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockHeaderByHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockHeaderResponse>* AccessAPI::Stub::AsyncGetBlockHeaderByHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockHeaderByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockHeaderByHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockRequest& request, ::flow::access::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetLatestBlockRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestBlock_, context, request, response);
}

void AccessAPI::Stub::async::GetLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockRequest* request, ::flow::access::BlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetLatestBlockRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlock_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockRequest* request, ::flow::access::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::PrepareAsyncGetLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockResponse, ::flow::access::GetLatestBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::AsyncGetLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetBlockByID(::grpc::ClientContext* context, const ::flow::access::GetBlockByIDRequest& request, ::flow::access::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetBlockByIDRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByID_, context, request, response);
}

void AccessAPI::Stub::async::GetBlockByID(::grpc::ClientContext* context, const ::flow::access::GetBlockByIDRequest* request, ::flow::access::BlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetBlockByIDRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByID_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetBlockByID(::grpc::ClientContext* context, const ::flow::access::GetBlockByIDRequest* request, ::flow::access::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::PrepareAsyncGetBlockByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockResponse, ::flow::access::GetBlockByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::AsyncGetBlockByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetBlockByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockByHeightRequest& request, ::flow::access::BlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetBlockByHeightRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByHeight_, context, request, response);
}

void AccessAPI::Stub::async::GetBlockByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockByHeightRequest* request, ::flow::access::BlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetBlockByHeightRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByHeight_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetBlockByHeight(::grpc::ClientContext* context, const ::flow::access::GetBlockByHeightRequest* request, ::flow::access::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::PrepareAsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::BlockResponse, ::flow::access::GetBlockByHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::BlockResponse>* AccessAPI::Stub::AsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetCollectionByID(::grpc::ClientContext* context, const ::flow::access::GetCollectionByIDRequest& request, ::flow::access::CollectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetCollectionByIDRequest, ::flow::access::CollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCollectionByID_, context, request, response);
}

void AccessAPI::Stub::async::GetCollectionByID(::grpc::ClientContext* context, const ::flow::access::GetCollectionByIDRequest* request, ::flow::access::CollectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetCollectionByIDRequest, ::flow::access::CollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollectionByID_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetCollectionByID(::grpc::ClientContext* context, const ::flow::access::GetCollectionByIDRequest* request, ::flow::access::CollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollectionByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::CollectionResponse>* AccessAPI::Stub::PrepareAsyncGetCollectionByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetCollectionByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::CollectionResponse, ::flow::access::GetCollectionByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCollectionByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::CollectionResponse>* AccessAPI::Stub::AsyncGetCollectionByIDRaw(::grpc::ClientContext* context, const ::flow::access::GetCollectionByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCollectionByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::SendTransaction(::grpc::ClientContext* context, const ::flow::access::SendTransactionRequest& request, ::flow::access::SendTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::SendTransactionRequest, ::flow::access::SendTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendTransaction_, context, request, response);
}

void AccessAPI::Stub::async::SendTransaction(::grpc::ClientContext* context, const ::flow::access::SendTransactionRequest* request, ::flow::access::SendTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::SendTransactionRequest, ::flow::access::SendTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTransaction_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::SendTransaction(::grpc::ClientContext* context, const ::flow::access::SendTransactionRequest* request, ::flow::access::SendTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::SendTransactionResponse>* AccessAPI::Stub::PrepareAsyncSendTransactionRaw(::grpc::ClientContext* context, const ::flow::access::SendTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::SendTransactionResponse, ::flow::access::SendTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::SendTransactionResponse>* AccessAPI::Stub::AsyncSendTransactionRaw(::grpc::ClientContext* context, const ::flow::access::SendTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetTransaction(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::flow::access::TransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetTransactionRequest, ::flow::access::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransaction_, context, request, response);
}

void AccessAPI::Stub::async::GetTransaction(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetTransactionRequest, ::flow::access::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetTransaction(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::TransactionResponse>* AccessAPI::Stub::PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::TransactionResponse, ::flow::access::GetTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::TransactionResponse>* AccessAPI::Stub::AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetTransactionResult(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::flow::access::TransactionResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetTransactionRequest, ::flow::access::TransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionResult_, context, request, response);
}

void AccessAPI::Stub::async::GetTransactionResult(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetTransactionRequest, ::flow::access::TransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionResult_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetTransactionResult(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::TransactionResultResponse>* AccessAPI::Stub::PrepareAsyncGetTransactionResultRaw(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::TransactionResultResponse, ::flow::access::GetTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::TransactionResultResponse>* AccessAPI::Stub::AsyncGetTransactionResultRaw(::grpc::ClientContext* context, const ::flow::access::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetAccount(::grpc::ClientContext* context, const ::flow::access::GetAccountRequest& request, ::flow::access::GetAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetAccountRequest, ::flow::access::GetAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

void AccessAPI::Stub::async::GetAccount(::grpc::ClientContext* context, const ::flow::access::GetAccountRequest* request, ::flow::access::GetAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetAccountRequest, ::flow::access::GetAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetAccount(::grpc::ClientContext* context, const ::flow::access::GetAccountRequest* request, ::flow::access::GetAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::GetAccountResponse>* AccessAPI::Stub::PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::GetAccountResponse, ::flow::access::GetAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::GetAccountResponse>* AccessAPI::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetAccountAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetAccountAtLatestBlockRequest& request, ::flow::access::AccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetAccountAtLatestBlockRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountAtLatestBlock_, context, request, response);
}

void AccessAPI::Stub::async::GetAccountAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetAccountAtLatestBlockRequest* request, ::flow::access::AccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetAccountAtLatestBlockRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtLatestBlock_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetAccountAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::GetAccountAtLatestBlockRequest* request, ::flow::access::AccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtLatestBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::AccountResponse>* AccessAPI::Stub::PrepareAsyncGetAccountAtLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountAtLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::AccountResponse, ::flow::access::GetAccountAtLatestBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountAtLatestBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::AccountResponse>* AccessAPI::Stub::AsyncGetAccountAtLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountAtLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountAtLatestBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetAccountAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::GetAccountAtBlockHeightRequest& request, ::flow::access::AccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetAccountAtBlockHeightRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountAtBlockHeight_, context, request, response);
}

void AccessAPI::Stub::async::GetAccountAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::GetAccountAtBlockHeightRequest* request, ::flow::access::AccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetAccountAtBlockHeightRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtBlockHeight_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetAccountAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::GetAccountAtBlockHeightRequest* request, ::flow::access::AccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtBlockHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::AccountResponse>* AccessAPI::Stub::PrepareAsyncGetAccountAtBlockHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountAtBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::AccountResponse, ::flow::access::GetAccountAtBlockHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountAtBlockHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::AccountResponse>* AccessAPI::Stub::AsyncGetAccountAtBlockHeightRaw(::grpc::ClientContext* context, const ::flow::access::GetAccountAtBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountAtBlockHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::ExecuteScriptAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest& request, ::flow::access::ExecuteScriptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::ExecuteScriptAtLatestBlockRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteScriptAtLatestBlock_, context, request, response);
}

void AccessAPI::Stub::async::ExecuteScriptAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest* request, ::flow::access::ExecuteScriptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::ExecuteScriptAtLatestBlockRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtLatestBlock_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::ExecuteScriptAtLatestBlock(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest* request, ::flow::access::ExecuteScriptResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtLatestBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::PrepareAsyncExecuteScriptAtLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::ExecuteScriptResponse, ::flow::access::ExecuteScriptAtLatestBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteScriptAtLatestBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::AsyncExecuteScriptAtLatestBlockRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteScriptAtLatestBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest& request, ::flow::access::ExecuteScriptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::ExecuteScriptAtBlockIDRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteScriptAtBlockID_, context, request, response);
}

void AccessAPI::Stub::async::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest* request, ::flow::access::ExecuteScriptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::ExecuteScriptAtBlockIDRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockID_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest* request, ::flow::access::ExecuteScriptResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::PrepareAsyncExecuteScriptAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::ExecuteScriptResponse, ::flow::access::ExecuteScriptAtBlockIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteScriptAtBlockID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::AsyncExecuteScriptAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteScriptAtBlockIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::ExecuteScriptAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest& request, ::flow::access::ExecuteScriptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::ExecuteScriptAtBlockHeightRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteScriptAtBlockHeight_, context, request, response);
}

void AccessAPI::Stub::async::ExecuteScriptAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest* request, ::flow::access::ExecuteScriptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::ExecuteScriptAtBlockHeightRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockHeight_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::ExecuteScriptAtBlockHeight(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest* request, ::flow::access::ExecuteScriptResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::PrepareAsyncExecuteScriptAtBlockHeightRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::ExecuteScriptResponse, ::flow::access::ExecuteScriptAtBlockHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteScriptAtBlockHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecuteScriptResponse>* AccessAPI::Stub::AsyncExecuteScriptAtBlockHeightRaw(::grpc::ClientContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteScriptAtBlockHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetEventsForHeightRange(::grpc::ClientContext* context, const ::flow::access::GetEventsForHeightRangeRequest& request, ::flow::access::EventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetEventsForHeightRangeRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventsForHeightRange_, context, request, response);
}

void AccessAPI::Stub::async::GetEventsForHeightRange(::grpc::ClientContext* context, const ::flow::access::GetEventsForHeightRangeRequest* request, ::flow::access::EventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetEventsForHeightRangeRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForHeightRange_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetEventsForHeightRange(::grpc::ClientContext* context, const ::flow::access::GetEventsForHeightRangeRequest* request, ::flow::access::EventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForHeightRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::EventsResponse>* AccessAPI::Stub::PrepareAsyncGetEventsForHeightRangeRaw(::grpc::ClientContext* context, const ::flow::access::GetEventsForHeightRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::EventsResponse, ::flow::access::GetEventsForHeightRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventsForHeightRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::EventsResponse>* AccessAPI::Stub::AsyncGetEventsForHeightRangeRaw(::grpc::ClientContext* context, const ::flow::access::GetEventsForHeightRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsForHeightRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::access::GetEventsForBlockIDsRequest& request, ::flow::access::EventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetEventsForBlockIDsRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventsForBlockIDs_, context, request, response);
}

void AccessAPI::Stub::async::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::access::GetEventsForBlockIDsRequest* request, ::flow::access::EventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetEventsForBlockIDsRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForBlockIDs_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::access::GetEventsForBlockIDsRequest* request, ::flow::access::EventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForBlockIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::EventsResponse>* AccessAPI::Stub::PrepareAsyncGetEventsForBlockIDsRaw(::grpc::ClientContext* context, const ::flow::access::GetEventsForBlockIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::EventsResponse, ::flow::access::GetEventsForBlockIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventsForBlockIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::EventsResponse>* AccessAPI::Stub::AsyncGetEventsForBlockIDsRaw(::grpc::ClientContext* context, const ::flow::access::GetEventsForBlockIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsForBlockIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetNetworkParameters(::grpc::ClientContext* context, const ::flow::access::GetNetworkParametersRequest& request, ::flow::access::GetNetworkParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetNetworkParametersRequest, ::flow::access::GetNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNetworkParameters_, context, request, response);
}

void AccessAPI::Stub::async::GetNetworkParameters(::grpc::ClientContext* context, const ::flow::access::GetNetworkParametersRequest* request, ::flow::access::GetNetworkParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetNetworkParametersRequest, ::flow::access::GetNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParameters_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetNetworkParameters(::grpc::ClientContext* context, const ::flow::access::GetNetworkParametersRequest* request, ::flow::access::GetNetworkParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::GetNetworkParametersResponse>* AccessAPI::Stub::PrepareAsyncGetNetworkParametersRaw(::grpc::ClientContext* context, const ::flow::access::GetNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::GetNetworkParametersResponse, ::flow::access::GetNetworkParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNetworkParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::GetNetworkParametersResponse>* AccessAPI::Stub::AsyncGetNetworkParametersRaw(::grpc::ClientContext* context, const ::flow::access::GetNetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNetworkParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetLatestProtocolStateSnapshot(::grpc::ClientContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest& request, ::flow::access::ProtocolStateSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetLatestProtocolStateSnapshotRequest, ::flow::access::ProtocolStateSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestProtocolStateSnapshot_, context, request, response);
}

void AccessAPI::Stub::async::GetLatestProtocolStateSnapshot(::grpc::ClientContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest* request, ::flow::access::ProtocolStateSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetLatestProtocolStateSnapshotRequest, ::flow::access::ProtocolStateSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestProtocolStateSnapshot_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetLatestProtocolStateSnapshot(::grpc::ClientContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest* request, ::flow::access::ProtocolStateSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestProtocolStateSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ProtocolStateSnapshotResponse>* AccessAPI::Stub::PrepareAsyncGetLatestProtocolStateSnapshotRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::ProtocolStateSnapshotResponse, ::flow::access::GetLatestProtocolStateSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestProtocolStateSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ProtocolStateSnapshotResponse>* AccessAPI::Stub::AsyncGetLatestProtocolStateSnapshotRaw(::grpc::ClientContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestProtocolStateSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccessAPI::Stub::GetExecutionResultForBlockID(::grpc::ClientContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest& request, ::flow::access::ExecutionResultForBlockIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::access::GetExecutionResultForBlockIDRequest, ::flow::access::ExecutionResultForBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionResultForBlockID_, context, request, response);
}

void AccessAPI::Stub::async::GetExecutionResultForBlockID(::grpc::ClientContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest* request, ::flow::access::ExecutionResultForBlockIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::access::GetExecutionResultForBlockIDRequest, ::flow::access::ExecutionResultForBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionResultForBlockID_, context, request, response, std::move(f));
}

void AccessAPI::Stub::async::GetExecutionResultForBlockID(::grpc::ClientContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest* request, ::flow::access::ExecutionResultForBlockIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionResultForBlockID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecutionResultForBlockIDResponse>* AccessAPI::Stub::PrepareAsyncGetExecutionResultForBlockIDRaw(::grpc::ClientContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::access::ExecutionResultForBlockIDResponse, ::flow::access::GetExecutionResultForBlockIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionResultForBlockID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::access::ExecutionResultForBlockIDResponse>* AccessAPI::Stub::AsyncGetExecutionResultForBlockIDRaw(::grpc::ClientContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionResultForBlockIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

AccessAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::PingRequest, ::flow::access::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::PingRequest* req,
             ::flow::access::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetLatestBlockHeaderRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetLatestBlockHeaderRequest* req,
             ::flow::access::BlockHeaderResponse* resp) {
               return service->GetLatestBlockHeader(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetBlockHeaderByIDRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetBlockHeaderByIDRequest* req,
             ::flow::access::BlockHeaderResponse* resp) {
               return service->GetBlockHeaderByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetBlockHeaderByHeightRequest, ::flow::access::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetBlockHeaderByHeightRequest* req,
             ::flow::access::BlockHeaderResponse* resp) {
               return service->GetBlockHeaderByHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetLatestBlockRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetLatestBlockRequest* req,
             ::flow::access::BlockResponse* resp) {
               return service->GetLatestBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetBlockByIDRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetBlockByIDRequest* req,
             ::flow::access::BlockResponse* resp) {
               return service->GetBlockByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetBlockByHeightRequest, ::flow::access::BlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetBlockByHeightRequest* req,
             ::flow::access::BlockResponse* resp) {
               return service->GetBlockByHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetCollectionByIDRequest, ::flow::access::CollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetCollectionByIDRequest* req,
             ::flow::access::CollectionResponse* resp) {
               return service->GetCollectionByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::SendTransactionRequest, ::flow::access::SendTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::SendTransactionRequest* req,
             ::flow::access::SendTransactionResponse* resp) {
               return service->SendTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetTransactionRequest, ::flow::access::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetTransactionRequest* req,
             ::flow::access::TransactionResponse* resp) {
               return service->GetTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetTransactionRequest, ::flow::access::TransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetTransactionRequest* req,
             ::flow::access::TransactionResultResponse* resp) {
               return service->GetTransactionResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetAccountRequest, ::flow::access::GetAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetAccountRequest* req,
             ::flow::access::GetAccountResponse* resp) {
               return service->GetAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetAccountAtLatestBlockRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetAccountAtLatestBlockRequest* req,
             ::flow::access::AccountResponse* resp) {
               return service->GetAccountAtLatestBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetAccountAtBlockHeightRequest, ::flow::access::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetAccountAtBlockHeightRequest* req,
             ::flow::access::AccountResponse* resp) {
               return service->GetAccountAtBlockHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::ExecuteScriptAtLatestBlockRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::ExecuteScriptAtLatestBlockRequest* req,
             ::flow::access::ExecuteScriptResponse* resp) {
               return service->ExecuteScriptAtLatestBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::ExecuteScriptAtBlockIDRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::ExecuteScriptAtBlockIDRequest* req,
             ::flow::access::ExecuteScriptResponse* resp) {
               return service->ExecuteScriptAtBlockID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::ExecuteScriptAtBlockHeightRequest, ::flow::access::ExecuteScriptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::ExecuteScriptAtBlockHeightRequest* req,
             ::flow::access::ExecuteScriptResponse* resp) {
               return service->ExecuteScriptAtBlockHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetEventsForHeightRangeRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetEventsForHeightRangeRequest* req,
             ::flow::access::EventsResponse* resp) {
               return service->GetEventsForHeightRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetEventsForBlockIDsRequest, ::flow::access::EventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetEventsForBlockIDsRequest* req,
             ::flow::access::EventsResponse* resp) {
               return service->GetEventsForBlockIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetNetworkParametersRequest, ::flow::access::GetNetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetNetworkParametersRequest* req,
             ::flow::access::GetNetworkParametersResponse* resp) {
               return service->GetNetworkParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetLatestProtocolStateSnapshotRequest, ::flow::access::ProtocolStateSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetLatestProtocolStateSnapshotRequest* req,
             ::flow::access::ProtocolStateSnapshotResponse* resp) {
               return service->GetLatestProtocolStateSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccessAPI_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccessAPI::Service, ::flow::access::GetExecutionResultForBlockIDRequest, ::flow::access::ExecutionResultForBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccessAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::access::GetExecutionResultForBlockIDRequest* req,
             ::flow::access::ExecutionResultForBlockIDResponse* resp) {
               return service->GetExecutionResultForBlockID(ctx, req, resp);
             }, this)));
}

AccessAPI::Service::~Service() {
}

::grpc::Status AccessAPI::Service::Ping(::grpc::ServerContext* context, const ::flow::access::PingRequest* request, ::flow::access::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetLatestBlockHeader(::grpc::ServerContext* context, const ::flow::access::GetLatestBlockHeaderRequest* request, ::flow::access::BlockHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetBlockHeaderByID(::grpc::ServerContext* context, const ::flow::access::GetBlockHeaderByIDRequest* request, ::flow::access::BlockHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetBlockHeaderByHeight(::grpc::ServerContext* context, const ::flow::access::GetBlockHeaderByHeightRequest* request, ::flow::access::BlockHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetLatestBlock(::grpc::ServerContext* context, const ::flow::access::GetLatestBlockRequest* request, ::flow::access::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetBlockByID(::grpc::ServerContext* context, const ::flow::access::GetBlockByIDRequest* request, ::flow::access::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetBlockByHeight(::grpc::ServerContext* context, const ::flow::access::GetBlockByHeightRequest* request, ::flow::access::BlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetCollectionByID(::grpc::ServerContext* context, const ::flow::access::GetCollectionByIDRequest* request, ::flow::access::CollectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::SendTransaction(::grpc::ServerContext* context, const ::flow::access::SendTransactionRequest* request, ::flow::access::SendTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetTransaction(::grpc::ServerContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetTransactionResult(::grpc::ServerContext* context, const ::flow::access::GetTransactionRequest* request, ::flow::access::TransactionResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetAccount(::grpc::ServerContext* context, const ::flow::access::GetAccountRequest* request, ::flow::access::GetAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetAccountAtLatestBlock(::grpc::ServerContext* context, const ::flow::access::GetAccountAtLatestBlockRequest* request, ::flow::access::AccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetAccountAtBlockHeight(::grpc::ServerContext* context, const ::flow::access::GetAccountAtBlockHeightRequest* request, ::flow::access::AccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::ExecuteScriptAtLatestBlock(::grpc::ServerContext* context, const ::flow::access::ExecuteScriptAtLatestBlockRequest* request, ::flow::access::ExecuteScriptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::ExecuteScriptAtBlockID(::grpc::ServerContext* context, const ::flow::access::ExecuteScriptAtBlockIDRequest* request, ::flow::access::ExecuteScriptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::ExecuteScriptAtBlockHeight(::grpc::ServerContext* context, const ::flow::access::ExecuteScriptAtBlockHeightRequest* request, ::flow::access::ExecuteScriptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetEventsForHeightRange(::grpc::ServerContext* context, const ::flow::access::GetEventsForHeightRangeRequest* request, ::flow::access::EventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetEventsForBlockIDs(::grpc::ServerContext* context, const ::flow::access::GetEventsForBlockIDsRequest* request, ::flow::access::EventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetNetworkParameters(::grpc::ServerContext* context, const ::flow::access::GetNetworkParametersRequest* request, ::flow::access::GetNetworkParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetLatestProtocolStateSnapshot(::grpc::ServerContext* context, const ::flow::access::GetLatestProtocolStateSnapshotRequest* request, ::flow::access::ProtocolStateSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccessAPI::Service::GetExecutionResultForBlockID(::grpc::ServerContext* context, const ::flow::access::GetExecutionResultForBlockIDRequest* request, ::flow::access::ExecutionResultForBlockIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flow
}  // namespace access

