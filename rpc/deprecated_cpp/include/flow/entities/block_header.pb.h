// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/block_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2fblock_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2fblock_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fblock_5fheader_2eproto;
namespace flow {
namespace entities {
class BlockHeader;
struct BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::BlockHeader* Arena::CreateMaybeMessage<::flow::entities::BlockHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class BlockHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.BlockHeader) */ {
 public:
  inline BlockHeader() : BlockHeader(nullptr) {}
  ~BlockHeader() override;
  explicit constexpr BlockHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return new BlockHeader();
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.BlockHeader";
  }
  protected:
  explicit BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentVoterIdsFieldNumber = 7,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kPayloadHashFieldNumber = 5,
    kParentVoterSigDataFieldNumber = 8,
    kProposerIdFieldNumber = 9,
    kProposerSigDataFieldNumber = 10,
    kChainIdFieldNumber = 11,
    kTimestampFieldNumber = 4,
    kHeightFieldNumber = 3,
    kViewFieldNumber = 6,
  };
  // repeated bytes parent_voter_ids = 7;
  int parent_voter_ids_size() const;
  private:
  int _internal_parent_voter_ids_size() const;
  public:
  void clear_parent_voter_ids();
  const std::string& parent_voter_ids(int index) const;
  std::string* mutable_parent_voter_ids(int index);
  void set_parent_voter_ids(int index, const std::string& value);
  void set_parent_voter_ids(int index, std::string&& value);
  void set_parent_voter_ids(int index, const char* value);
  void set_parent_voter_ids(int index, const void* value, size_t size);
  std::string* add_parent_voter_ids();
  void add_parent_voter_ids(const std::string& value);
  void add_parent_voter_ids(std::string&& value);
  void add_parent_voter_ids(const char* value);
  void add_parent_voter_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parent_voter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parent_voter_ids();
  private:
  const std::string& _internal_parent_voter_ids(int index) const;
  std::string* _internal_add_parent_voter_ids();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes parent_id = 2;
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // bytes payload_hash = 5;
  void clear_payload_hash();
  const std::string& payload_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload_hash();
  void set_allocated_payload_hash(std::string* payload_hash);
  private:
  const std::string& _internal_payload_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_hash(const std::string& value);
  std::string* _internal_mutable_payload_hash();
  public:

  // bytes parent_voter_sig_data = 8;
  void clear_parent_voter_sig_data();
  const std::string& parent_voter_sig_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_voter_sig_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_voter_sig_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent_voter_sig_data();
  void set_allocated_parent_voter_sig_data(std::string* parent_voter_sig_data);
  private:
  const std::string& _internal_parent_voter_sig_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_voter_sig_data(const std::string& value);
  std::string* _internal_mutable_parent_voter_sig_data();
  public:

  // bytes proposer_id = 9;
  void clear_proposer_id();
  const std::string& proposer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proposer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proposer_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_proposer_id();
  void set_allocated_proposer_id(std::string* proposer_id);
  private:
  const std::string& _internal_proposer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_id(const std::string& value);
  std::string* _internal_mutable_proposer_id();
  public:

  // bytes proposer_sig_data = 10;
  void clear_proposer_sig_data();
  const std::string& proposer_sig_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proposer_sig_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proposer_sig_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_proposer_sig_data();
  void set_allocated_proposer_sig_data(std::string* proposer_sig_data);
  private:
  const std::string& _internal_proposer_sig_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_sig_data(const std::string& value);
  std::string* _internal_mutable_proposer_sig_data();
  public:

  // string chain_id = 11;
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 view = 6;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.BlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parent_voter_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_voter_sig_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_sig_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fblock_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockHeader

// bytes id = 1;
inline void BlockHeader::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BlockHeader::id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.id)
}
inline std::string* BlockHeader::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.id)
  return _s;
}
inline const std::string& BlockHeader::_internal_id() const {
  return id_.Get();
}
inline void BlockHeader::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.id)
}

// bytes parent_id = 2;
inline void BlockHeader::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& BlockHeader::parent_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_parent_id(ArgT0&& arg0, ArgT... args) {
 
 parent_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.parent_id)
}
inline std::string* BlockHeader::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.parent_id)
  return _s;
}
inline const std::string& BlockHeader::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void BlockHeader::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_parent_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.parent_id)
}

// uint64 height = 3;
inline void BlockHeader::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::height() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.height)
  return _internal_height();
}
inline void BlockHeader::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void BlockHeader::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.height)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool BlockHeader::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool BlockHeader::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BlockHeader::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.timestamp)
  return _internal_timestamp();
}
inline void BlockHeader::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flow.entities.BlockHeader.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.timestamp)
  return _msg;
}
inline void BlockHeader::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.timestamp)
}

// bytes payload_hash = 5;
inline void BlockHeader::clear_payload_hash() {
  payload_hash_.ClearToEmpty();
}
inline const std::string& BlockHeader::payload_hash() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.payload_hash)
  return _internal_payload_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_payload_hash(ArgT0&& arg0, ArgT... args) {
 
 payload_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.payload_hash)
}
inline std::string* BlockHeader::mutable_payload_hash() {
  std::string* _s = _internal_mutable_payload_hash();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.payload_hash)
  return _s;
}
inline const std::string& BlockHeader::_internal_payload_hash() const {
  return payload_hash_.Get();
}
inline void BlockHeader::_internal_set_payload_hash(const std::string& value) {
  
  payload_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_payload_hash() {
  
  return payload_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_payload_hash() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.payload_hash)
  return payload_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_payload_hash(std::string* payload_hash) {
  if (payload_hash != nullptr) {
    
  } else {
    
  }
  payload_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.payload_hash)
}

// uint64 view = 6;
inline void BlockHeader::clear_view() {
  view_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::view() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.view)
  return _internal_view();
}
inline void BlockHeader::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  view_ = value;
}
inline void BlockHeader::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.view)
}

// repeated bytes parent_voter_ids = 7;
inline int BlockHeader::_internal_parent_voter_ids_size() const {
  return parent_voter_ids_.size();
}
inline int BlockHeader::parent_voter_ids_size() const {
  return _internal_parent_voter_ids_size();
}
inline void BlockHeader::clear_parent_voter_ids() {
  parent_voter_ids_.Clear();
}
inline std::string* BlockHeader::add_parent_voter_ids() {
  std::string* _s = _internal_add_parent_voter_ids();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.BlockHeader.parent_voter_ids)
  return _s;
}
inline const std::string& BlockHeader::_internal_parent_voter_ids(int index) const {
  return parent_voter_ids_.Get(index);
}
inline const std::string& BlockHeader::parent_voter_ids(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.parent_voter_ids)
  return _internal_parent_voter_ids(index);
}
inline std::string* BlockHeader::mutable_parent_voter_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.parent_voter_ids)
  return parent_voter_ids_.Mutable(index);
}
inline void BlockHeader::set_parent_voter_ids(int index, const std::string& value) {
  parent_voter_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::set_parent_voter_ids(int index, std::string&& value) {
  parent_voter_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::set_parent_voter_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_voter_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::set_parent_voter_ids(int index, const void* value, size_t size) {
  parent_voter_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.BlockHeader.parent_voter_ids)
}
inline std::string* BlockHeader::_internal_add_parent_voter_ids() {
  return parent_voter_ids_.Add();
}
inline void BlockHeader::add_parent_voter_ids(const std::string& value) {
  parent_voter_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::add_parent_voter_ids(std::string&& value) {
  parent_voter_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::add_parent_voter_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_voter_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.BlockHeader.parent_voter_ids)
}
inline void BlockHeader::add_parent_voter_ids(const void* value, size_t size) {
  parent_voter_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.BlockHeader.parent_voter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockHeader::parent_voter_ids() const {
  // @@protoc_insertion_point(field_list:flow.entities.BlockHeader.parent_voter_ids)
  return parent_voter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockHeader::mutable_parent_voter_ids() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.BlockHeader.parent_voter_ids)
  return &parent_voter_ids_;
}

// bytes parent_voter_sig_data = 8;
inline void BlockHeader::clear_parent_voter_sig_data() {
  parent_voter_sig_data_.ClearToEmpty();
}
inline const std::string& BlockHeader::parent_voter_sig_data() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.parent_voter_sig_data)
  return _internal_parent_voter_sig_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_parent_voter_sig_data(ArgT0&& arg0, ArgT... args) {
 
 parent_voter_sig_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.parent_voter_sig_data)
}
inline std::string* BlockHeader::mutable_parent_voter_sig_data() {
  std::string* _s = _internal_mutable_parent_voter_sig_data();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.parent_voter_sig_data)
  return _s;
}
inline const std::string& BlockHeader::_internal_parent_voter_sig_data() const {
  return parent_voter_sig_data_.Get();
}
inline void BlockHeader::_internal_set_parent_voter_sig_data(const std::string& value) {
  
  parent_voter_sig_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_parent_voter_sig_data() {
  
  return parent_voter_sig_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_parent_voter_sig_data() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.parent_voter_sig_data)
  return parent_voter_sig_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_parent_voter_sig_data(std::string* parent_voter_sig_data) {
  if (parent_voter_sig_data != nullptr) {
    
  } else {
    
  }
  parent_voter_sig_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_voter_sig_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.parent_voter_sig_data)
}

// bytes proposer_id = 9;
inline void BlockHeader::clear_proposer_id() {
  proposer_id_.ClearToEmpty();
}
inline const std::string& BlockHeader::proposer_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.proposer_id)
  return _internal_proposer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_proposer_id(ArgT0&& arg0, ArgT... args) {
 
 proposer_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.proposer_id)
}
inline std::string* BlockHeader::mutable_proposer_id() {
  std::string* _s = _internal_mutable_proposer_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.proposer_id)
  return _s;
}
inline const std::string& BlockHeader::_internal_proposer_id() const {
  return proposer_id_.Get();
}
inline void BlockHeader::_internal_set_proposer_id(const std::string& value) {
  
  proposer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_proposer_id() {
  
  return proposer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_proposer_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.proposer_id)
  return proposer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_proposer_id(std::string* proposer_id) {
  if (proposer_id != nullptr) {
    
  } else {
    
  }
  proposer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.proposer_id)
}

// bytes proposer_sig_data = 10;
inline void BlockHeader::clear_proposer_sig_data() {
  proposer_sig_data_.ClearToEmpty();
}
inline const std::string& BlockHeader::proposer_sig_data() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.proposer_sig_data)
  return _internal_proposer_sig_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_proposer_sig_data(ArgT0&& arg0, ArgT... args) {
 
 proposer_sig_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.proposer_sig_data)
}
inline std::string* BlockHeader::mutable_proposer_sig_data() {
  std::string* _s = _internal_mutable_proposer_sig_data();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.proposer_sig_data)
  return _s;
}
inline const std::string& BlockHeader::_internal_proposer_sig_data() const {
  return proposer_sig_data_.Get();
}
inline void BlockHeader::_internal_set_proposer_sig_data(const std::string& value) {
  
  proposer_sig_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_proposer_sig_data() {
  
  return proposer_sig_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_proposer_sig_data() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.proposer_sig_data)
  return proposer_sig_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_proposer_sig_data(std::string* proposer_sig_data) {
  if (proposer_sig_data != nullptr) {
    
  } else {
    
  }
  proposer_sig_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer_sig_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.proposer_sig_data)
}

// string chain_id = 11;
inline void BlockHeader::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& BlockHeader::chain_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockHeader.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockHeader.chain_id)
}
inline std::string* BlockHeader::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockHeader.chain_id)
  return _s;
}
inline const std::string& BlockHeader::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void BlockHeader::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_chain_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockHeader.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockHeader.chain_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fheader_2eproto
