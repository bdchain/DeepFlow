// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/collection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fcollection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fcollection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2fcollection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2fcollection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fcollection_2eproto;
namespace flow {
namespace entities {
class Collection;
struct CollectionDefaultTypeInternal;
extern CollectionDefaultTypeInternal _Collection_default_instance_;
class CollectionGuarantee;
struct CollectionGuaranteeDefaultTypeInternal;
extern CollectionGuaranteeDefaultTypeInternal _CollectionGuarantee_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::Collection* Arena::CreateMaybeMessage<::flow::entities::Collection>(Arena*);
template<> ::flow::entities::CollectionGuarantee* Arena::CreateMaybeMessage<::flow::entities::CollectionGuarantee>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class Collection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Collection) */ {
 public:
  inline Collection() : Collection(nullptr) {}
  ~Collection() override;
  explicit constexpr Collection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Collection(const Collection& from);
  Collection(Collection&& from) noexcept
    : Collection() {
    *this = ::std::move(from);
  }

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collection& operator=(Collection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Collection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Collection* internal_default_instance() {
    return reinterpret_cast<const Collection*>(
               &_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Collection& a, Collection& b) {
    a.Swap(&b);
  }
  inline void Swap(Collection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collection* New() const final {
    return new Collection();
  }

  Collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Collection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Collection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Collection";
  }
  protected:
  explicit Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated bytes transaction_ids = 2;
  int transaction_ids_size() const;
  private:
  int _internal_transaction_ids_size() const;
  public:
  void clear_transaction_ids();
  const std::string& transaction_ids(int index) const;
  std::string* mutable_transaction_ids(int index);
  void set_transaction_ids(int index, const std::string& value);
  void set_transaction_ids(int index, std::string&& value);
  void set_transaction_ids(int index, const char* value);
  void set_transaction_ids(int index, const void* value, size_t size);
  std::string* add_transaction_ids();
  void add_transaction_ids(const std::string& value);
  void add_transaction_ids(std::string&& value);
  void add_transaction_ids(const char* value);
  void add_transaction_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_ids();
  private:
  const std::string& _internal_transaction_ids(int index) const;
  std::string* _internal_add_transaction_ids();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Collection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fcollection_2eproto;
};
// -------------------------------------------------------------------

class CollectionGuarantee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.CollectionGuarantee) */ {
 public:
  inline CollectionGuarantee() : CollectionGuarantee(nullptr) {}
  ~CollectionGuarantee() override;
  explicit constexpr CollectionGuarantee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGuarantee(const CollectionGuarantee& from);
  CollectionGuarantee(CollectionGuarantee&& from) noexcept
    : CollectionGuarantee() {
    *this = ::std::move(from);
  }

  inline CollectionGuarantee& operator=(const CollectionGuarantee& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGuarantee& operator=(CollectionGuarantee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGuarantee& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGuarantee* internal_default_instance() {
    return reinterpret_cast<const CollectionGuarantee*>(
               &_CollectionGuarantee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CollectionGuarantee& a, CollectionGuarantee& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGuarantee* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGuarantee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionGuarantee* New() const final {
    return new CollectionGuarantee();
  }

  CollectionGuarantee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionGuarantee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGuarantee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CollectionGuarantee& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGuarantee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.CollectionGuarantee";
  }
  protected:
  explicit CollectionGuarantee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 2,
    kSignerIdsFieldNumber = 5,
    kCollectionIdFieldNumber = 1,
    kReferenceBlockIdFieldNumber = 3,
    kSignatureFieldNumber = 4,
  };
  // repeated bytes signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // repeated bytes signer_ids = 5;
  int signer_ids_size() const;
  private:
  int _internal_signer_ids_size() const;
  public:
  void clear_signer_ids();
  const std::string& signer_ids(int index) const;
  std::string* mutable_signer_ids(int index);
  void set_signer_ids(int index, const std::string& value);
  void set_signer_ids(int index, std::string&& value);
  void set_signer_ids(int index, const char* value);
  void set_signer_ids(int index, const void* value, size_t size);
  std::string* add_signer_ids();
  void add_signer_ids(const std::string& value);
  void add_signer_ids(std::string&& value);
  void add_signer_ids(const char* value);
  void add_signer_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signer_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signer_ids();
  private:
  const std::string& _internal_signer_ids(int index) const;
  std::string* _internal_add_signer_ids();
  public:

  // bytes collection_id = 1;
  void clear_collection_id();
  const std::string& collection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_collection_id();
  void set_allocated_collection_id(std::string* collection_id);
  private:
  const std::string& _internal_collection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_id(const std::string& value);
  std::string* _internal_mutable_collection_id();
  public:

  // bytes reference_block_id = 3;
  void clear_reference_block_id();
  const std::string& reference_block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_reference_block_id();
  void set_allocated_reference_block_id(std::string* reference_block_id);
  private:
  const std::string& _internal_reference_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_block_id(const std::string& value);
  std::string* _internal_mutable_reference_block_id();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.CollectionGuarantee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signer_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fcollection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Collection

// bytes id = 1;
inline void Collection::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Collection::id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Collection.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Collection::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Collection.id)
}
inline std::string* Collection::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.Collection.id)
  return _s;
}
inline const std::string& Collection::_internal_id() const {
  return id_.Get();
}
inline void Collection::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Collection::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Collection::release_id() {
  // @@protoc_insertion_point(field_release:flow.entities.Collection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Collection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Collection.id)
}

// repeated bytes transaction_ids = 2;
inline int Collection::_internal_transaction_ids_size() const {
  return transaction_ids_.size();
}
inline int Collection::transaction_ids_size() const {
  return _internal_transaction_ids_size();
}
inline void Collection::clear_transaction_ids() {
  transaction_ids_.Clear();
}
inline std::string* Collection::add_transaction_ids() {
  std::string* _s = _internal_add_transaction_ids();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.Collection.transaction_ids)
  return _s;
}
inline const std::string& Collection::_internal_transaction_ids(int index) const {
  return transaction_ids_.Get(index);
}
inline const std::string& Collection::transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Collection.transaction_ids)
  return _internal_transaction_ids(index);
}
inline std::string* Collection::mutable_transaction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Collection.transaction_ids)
  return transaction_ids_.Mutable(index);
}
inline void Collection::set_transaction_ids(int index, const std::string& value) {
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.Collection.transaction_ids)
}
inline void Collection::set_transaction_ids(int index, std::string&& value) {
  transaction_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.Collection.transaction_ids)
}
inline void Collection::set_transaction_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.Collection.transaction_ids)
}
inline void Collection::set_transaction_ids(int index, const void* value, size_t size) {
  transaction_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.Collection.transaction_ids)
}
inline std::string* Collection::_internal_add_transaction_ids() {
  return transaction_ids_.Add();
}
inline void Collection::add_transaction_ids(const std::string& value) {
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.Collection.transaction_ids)
}
inline void Collection::add_transaction_ids(std::string&& value) {
  transaction_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.Collection.transaction_ids)
}
inline void Collection::add_transaction_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.Collection.transaction_ids)
}
inline void Collection::add_transaction_ids(const void* value, size_t size) {
  transaction_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.Collection.transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collection::transaction_ids() const {
  // @@protoc_insertion_point(field_list:flow.entities.Collection.transaction_ids)
  return transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collection::mutable_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Collection.transaction_ids)
  return &transaction_ids_;
}

// -------------------------------------------------------------------

// CollectionGuarantee

// bytes collection_id = 1;
inline void CollectionGuarantee::clear_collection_id() {
  collection_id_.ClearToEmpty();
}
inline const std::string& CollectionGuarantee::collection_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.CollectionGuarantee.collection_id)
  return _internal_collection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectionGuarantee::set_collection_id(ArgT0&& arg0, ArgT... args) {
 
 collection_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.collection_id)
}
inline std::string* CollectionGuarantee::mutable_collection_id() {
  std::string* _s = _internal_mutable_collection_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.CollectionGuarantee.collection_id)
  return _s;
}
inline const std::string& CollectionGuarantee::_internal_collection_id() const {
  return collection_id_.Get();
}
inline void CollectionGuarantee::_internal_set_collection_id(const std::string& value) {
  
  collection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::_internal_mutable_collection_id() {
  
  return collection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::release_collection_id() {
  // @@protoc_insertion_point(field_release:flow.entities.CollectionGuarantee.collection_id)
  return collection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CollectionGuarantee::set_allocated_collection_id(std::string* collection_id) {
  if (collection_id != nullptr) {
    
  } else {
    
  }
  collection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.CollectionGuarantee.collection_id)
}

// repeated bytes signatures = 2;
inline int CollectionGuarantee::_internal_signatures_size() const {
  return signatures_.size();
}
inline int CollectionGuarantee::signatures_size() const {
  return _internal_signatures_size();
}
inline void CollectionGuarantee::clear_signatures() {
  signatures_.Clear();
}
inline std::string* CollectionGuarantee::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.CollectionGuarantee.signatures)
  return _s;
}
inline const std::string& CollectionGuarantee::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& CollectionGuarantee::signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.CollectionGuarantee.signatures)
  return _internal_signatures(index);
}
inline std::string* CollectionGuarantee::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.CollectionGuarantee.signatures)
  return signatures_.Mutable(index);
}
inline void CollectionGuarantee::set_signatures(int index, const std::string& value) {
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::set_signatures(int index, std::string&& value) {
  signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.CollectionGuarantee.signatures)
}
inline std::string* CollectionGuarantee::_internal_add_signatures() {
  return signatures_.Add();
}
inline void CollectionGuarantee::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.CollectionGuarantee.signatures)
}
inline void CollectionGuarantee::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.CollectionGuarantee.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CollectionGuarantee::signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.CollectionGuarantee.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CollectionGuarantee::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.CollectionGuarantee.signatures)
  return &signatures_;
}

// bytes reference_block_id = 3;
inline void CollectionGuarantee::clear_reference_block_id() {
  reference_block_id_.ClearToEmpty();
}
inline const std::string& CollectionGuarantee::reference_block_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.CollectionGuarantee.reference_block_id)
  return _internal_reference_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectionGuarantee::set_reference_block_id(ArgT0&& arg0, ArgT... args) {
 
 reference_block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.reference_block_id)
}
inline std::string* CollectionGuarantee::mutable_reference_block_id() {
  std::string* _s = _internal_mutable_reference_block_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.CollectionGuarantee.reference_block_id)
  return _s;
}
inline const std::string& CollectionGuarantee::_internal_reference_block_id() const {
  return reference_block_id_.Get();
}
inline void CollectionGuarantee::_internal_set_reference_block_id(const std::string& value) {
  
  reference_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::_internal_mutable_reference_block_id() {
  
  return reference_block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::release_reference_block_id() {
  // @@protoc_insertion_point(field_release:flow.entities.CollectionGuarantee.reference_block_id)
  return reference_block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CollectionGuarantee::set_allocated_reference_block_id(std::string* reference_block_id) {
  if (reference_block_id != nullptr) {
    
  } else {
    
  }
  reference_block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.CollectionGuarantee.reference_block_id)
}

// bytes signature = 4;
inline void CollectionGuarantee::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& CollectionGuarantee::signature() const {
  // @@protoc_insertion_point(field_get:flow.entities.CollectionGuarantee.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectionGuarantee::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.signature)
}
inline std::string* CollectionGuarantee::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:flow.entities.CollectionGuarantee.signature)
  return _s;
}
inline const std::string& CollectionGuarantee::_internal_signature() const {
  return signature_.Get();
}
inline void CollectionGuarantee::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CollectionGuarantee::release_signature() {
  // @@protoc_insertion_point(field_release:flow.entities.CollectionGuarantee.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CollectionGuarantee::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.CollectionGuarantee.signature)
}

// repeated bytes signer_ids = 5;
inline int CollectionGuarantee::_internal_signer_ids_size() const {
  return signer_ids_.size();
}
inline int CollectionGuarantee::signer_ids_size() const {
  return _internal_signer_ids_size();
}
inline void CollectionGuarantee::clear_signer_ids() {
  signer_ids_.Clear();
}
inline std::string* CollectionGuarantee::add_signer_ids() {
  std::string* _s = _internal_add_signer_ids();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.CollectionGuarantee.signer_ids)
  return _s;
}
inline const std::string& CollectionGuarantee::_internal_signer_ids(int index) const {
  return signer_ids_.Get(index);
}
inline const std::string& CollectionGuarantee::signer_ids(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.CollectionGuarantee.signer_ids)
  return _internal_signer_ids(index);
}
inline std::string* CollectionGuarantee::mutable_signer_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.CollectionGuarantee.signer_ids)
  return signer_ids_.Mutable(index);
}
inline void CollectionGuarantee::set_signer_ids(int index, const std::string& value) {
  signer_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::set_signer_ids(int index, std::string&& value) {
  signer_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::set_signer_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::set_signer_ids(int index, const void* value, size_t size) {
  signer_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.CollectionGuarantee.signer_ids)
}
inline std::string* CollectionGuarantee::_internal_add_signer_ids() {
  return signer_ids_.Add();
}
inline void CollectionGuarantee::add_signer_ids(const std::string& value) {
  signer_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::add_signer_ids(std::string&& value) {
  signer_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::add_signer_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.CollectionGuarantee.signer_ids)
}
inline void CollectionGuarantee::add_signer_ids(const void* value, size_t size) {
  signer_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.CollectionGuarantee.signer_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CollectionGuarantee::signer_ids() const {
  // @@protoc_insertion_point(field_list:flow.entities.CollectionGuarantee.signer_ids)
  return signer_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CollectionGuarantee::mutable_signer_ids() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.CollectionGuarantee.signer_ids)
  return &signer_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fcollection_2eproto
