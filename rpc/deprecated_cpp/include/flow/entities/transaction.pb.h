// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2ftransaction_2eproto;
namespace flow {
namespace entities {
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transaction_ProposalKey;
struct Transaction_ProposalKeyDefaultTypeInternal;
extern Transaction_ProposalKeyDefaultTypeInternal _Transaction_ProposalKey_default_instance_;
class Transaction_Signature;
struct Transaction_SignatureDefaultTypeInternal;
extern Transaction_SignatureDefaultTypeInternal _Transaction_Signature_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::Transaction* Arena::CreateMaybeMessage<::flow::entities::Transaction>(Arena*);
template<> ::flow::entities::Transaction_ProposalKey* Arena::CreateMaybeMessage<::flow::entities::Transaction_ProposalKey>(Arena*);
template<> ::flow::entities::Transaction_Signature* Arena::CreateMaybeMessage<::flow::entities::Transaction_Signature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

enum TransactionStatus : int {
  UNKNOWN = 0,
  PENDING = 1,
  FINALIZED = 2,
  EXECUTED = 3,
  SEALED = 4,
  EXPIRED = 5,
  TransactionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionStatus_IsValid(int value);
constexpr TransactionStatus TransactionStatus_MIN = UNKNOWN;
constexpr TransactionStatus TransactionStatus_MAX = EXPIRED;
constexpr int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor();
template<typename T>
inline const std::string& TransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionStatus_descriptor(), enum_t_value);
}
inline bool TransactionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class Transaction_ProposalKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Transaction.ProposalKey) */ {
 public:
  inline Transaction_ProposalKey() : Transaction_ProposalKey(nullptr) {}
  ~Transaction_ProposalKey() override;
  explicit constexpr Transaction_ProposalKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_ProposalKey(const Transaction_ProposalKey& from);
  Transaction_ProposalKey(Transaction_ProposalKey&& from) noexcept
    : Transaction_ProposalKey() {
    *this = ::std::move(from);
  }

  inline Transaction_ProposalKey& operator=(const Transaction_ProposalKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_ProposalKey& operator=(Transaction_ProposalKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_ProposalKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_ProposalKey* internal_default_instance() {
    return reinterpret_cast<const Transaction_ProposalKey*>(
               &_Transaction_ProposalKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction_ProposalKey& a, Transaction_ProposalKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_ProposalKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_ProposalKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_ProposalKey* New() const final {
    return new Transaction_ProposalKey();
  }

  Transaction_ProposalKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_ProposalKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_ProposalKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_ProposalKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_ProposalKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Transaction.ProposalKey";
  }
  protected:
  explicit Transaction_ProposalKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
    kKeyIdFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 key_id = 2;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Transaction.ProposalKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Transaction.Signature) */ {
 public:
  inline Transaction_Signature() : Transaction_Signature(nullptr) {}
  ~Transaction_Signature() override;
  explicit constexpr Transaction_Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Signature(const Transaction_Signature& from);
  Transaction_Signature(Transaction_Signature&& from) noexcept
    : Transaction_Signature() {
    *this = ::std::move(from);
  }

  inline Transaction_Signature& operator=(const Transaction_Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Signature& operator=(Transaction_Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction_Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Signature* internal_default_instance() {
    return reinterpret_cast<const Transaction_Signature*>(
               &_Transaction_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction_Signature& a, Transaction_Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Signature* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Signature* New() const final {
    return new Transaction_Signature();
  }

  Transaction_Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction_Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction_Signature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Transaction.Signature";
  }
  protected:
  explicit Transaction_Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSignatureFieldNumber = 3,
    kKeyIdFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 key_id = 2;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Transaction.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return new Transaction();
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_ProposalKey ProposalKey;
  typedef Transaction_Signature Signature;

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kAuthorizersFieldNumber = 7,
    kPayloadSignaturesFieldNumber = 8,
    kEnvelopeSignaturesFieldNumber = 9,
    kScriptFieldNumber = 1,
    kReferenceBlockIdFieldNumber = 3,
    kPayerFieldNumber = 6,
    kProposalKeyFieldNumber = 5,
    kGasLimitFieldNumber = 4,
  };
  // repeated bytes arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  const std::string& arguments(int index) const;
  std::string* mutable_arguments(int index);
  void set_arguments(int index, const std::string& value);
  void set_arguments(int index, std::string&& value);
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const void* value, size_t size);
  std::string* add_arguments();
  void add_arguments(const std::string& value);
  void add_arguments(std::string&& value);
  void add_arguments(const char* value);
  void add_arguments(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arguments();
  private:
  const std::string& _internal_arguments(int index) const;
  std::string* _internal_add_arguments();
  public:

  // repeated bytes authorizers = 7;
  int authorizers_size() const;
  private:
  int _internal_authorizers_size() const;
  public:
  void clear_authorizers();
  const std::string& authorizers(int index) const;
  std::string* mutable_authorizers(int index);
  void set_authorizers(int index, const std::string& value);
  void set_authorizers(int index, std::string&& value);
  void set_authorizers(int index, const char* value);
  void set_authorizers(int index, const void* value, size_t size);
  std::string* add_authorizers();
  void add_authorizers(const std::string& value);
  void add_authorizers(std::string&& value);
  void add_authorizers(const char* value);
  void add_authorizers(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authorizers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authorizers();
  private:
  const std::string& _internal_authorizers(int index) const;
  std::string* _internal_add_authorizers();
  public:

  // repeated .flow.entities.Transaction.Signature payload_signatures = 8;
  int payload_signatures_size() const;
  private:
  int _internal_payload_signatures_size() const;
  public:
  void clear_payload_signatures();
  ::flow::entities::Transaction_Signature* mutable_payload_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >*
      mutable_payload_signatures();
  private:
  const ::flow::entities::Transaction_Signature& _internal_payload_signatures(int index) const;
  ::flow::entities::Transaction_Signature* _internal_add_payload_signatures();
  public:
  const ::flow::entities::Transaction_Signature& payload_signatures(int index) const;
  ::flow::entities::Transaction_Signature* add_payload_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >&
      payload_signatures() const;

  // repeated .flow.entities.Transaction.Signature envelope_signatures = 9;
  int envelope_signatures_size() const;
  private:
  int _internal_envelope_signatures_size() const;
  public:
  void clear_envelope_signatures();
  ::flow::entities::Transaction_Signature* mutable_envelope_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >*
      mutable_envelope_signatures();
  private:
  const ::flow::entities::Transaction_Signature& _internal_envelope_signatures(int index) const;
  ::flow::entities::Transaction_Signature* _internal_add_envelope_signatures();
  public:
  const ::flow::entities::Transaction_Signature& envelope_signatures(int index) const;
  ::flow::entities::Transaction_Signature* add_envelope_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >&
      envelope_signatures() const;

  // bytes script = 1;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_MUST_USE_RESULT std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // bytes reference_block_id = 3;
  void clear_reference_block_id();
  const std::string& reference_block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_reference_block_id();
  void set_allocated_reference_block_id(std::string* reference_block_id);
  private:
  const std::string& _internal_reference_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_block_id(const std::string& value);
  std::string* _internal_mutable_reference_block_id();
  public:

  // bytes payer = 6;
  void clear_payer();
  const std::string& payer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payer();
  PROTOBUF_MUST_USE_RESULT std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // .flow.entities.Transaction.ProposalKey proposal_key = 5;
  bool has_proposal_key() const;
  private:
  bool _internal_has_proposal_key() const;
  public:
  void clear_proposal_key();
  const ::flow::entities::Transaction_ProposalKey& proposal_key() const;
  PROTOBUF_MUST_USE_RESULT ::flow::entities::Transaction_ProposalKey* release_proposal_key();
  ::flow::entities::Transaction_ProposalKey* mutable_proposal_key();
  void set_allocated_proposal_key(::flow::entities::Transaction_ProposalKey* proposal_key);
  private:
  const ::flow::entities::Transaction_ProposalKey& _internal_proposal_key() const;
  ::flow::entities::Transaction_ProposalKey* _internal_mutable_proposal_key();
  public:
  void unsafe_arena_set_allocated_proposal_key(
      ::flow::entities::Transaction_ProposalKey* proposal_key);
  ::flow::entities::Transaction_ProposalKey* unsafe_arena_release_proposal_key();

  // uint64 gas_limit = 4;
  void clear_gas_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_limit() const;
  void set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas_limit() const;
  void _internal_set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authorizers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature > payload_signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature > envelope_signatures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::flow::entities::Transaction_ProposalKey* proposal_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction_ProposalKey

// bytes address = 1;
inline void Transaction_ProposalKey::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Transaction_ProposalKey::address() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.ProposalKey.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_ProposalKey::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.ProposalKey.address)
}
inline std::string* Transaction_ProposalKey::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.ProposalKey.address)
  return _s;
}
inline const std::string& Transaction_ProposalKey::_internal_address() const {
  return address_.Get();
}
inline void Transaction_ProposalKey::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_ProposalKey::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_ProposalKey::release_address() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.ProposalKey.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_ProposalKey::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.ProposalKey.address)
}

// uint32 key_id = 2;
inline void Transaction_ProposalKey::clear_key_id() {
  key_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_ProposalKey::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_ProposalKey::key_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.ProposalKey.key_id)
  return _internal_key_id();
}
inline void Transaction_ProposalKey::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_id_ = value;
}
inline void Transaction_ProposalKey::set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.ProposalKey.key_id)
}

// uint64 sequence_number = 3;
inline void Transaction_ProposalKey::clear_sequence_number() {
  sequence_number_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction_ProposalKey::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction_ProposalKey::sequence_number() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.ProposalKey.sequence_number)
  return _internal_sequence_number();
}
inline void Transaction_ProposalKey::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_number_ = value;
}
inline void Transaction_ProposalKey::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.ProposalKey.sequence_number)
}

// -------------------------------------------------------------------

// Transaction_Signature

// bytes address = 1;
inline void Transaction_Signature::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Transaction_Signature::address() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.Signature.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Signature::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.Signature.address)
}
inline std::string* Transaction_Signature::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.Signature.address)
  return _s;
}
inline const std::string& Transaction_Signature::_internal_address() const {
  return address_.Get();
}
inline void Transaction_Signature::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Signature::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Signature::release_address() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.Signature.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Signature::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.Signature.address)
}

// uint32 key_id = 2;
inline void Transaction_Signature::clear_key_id() {
  key_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Signature::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Signature::key_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.Signature.key_id)
  return _internal_key_id();
}
inline void Transaction_Signature::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_id_ = value;
}
inline void Transaction_Signature::set_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.Signature.key_id)
}

// bytes signature = 3;
inline void Transaction_Signature::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Transaction_Signature::signature() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.Signature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction_Signature::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.Signature.signature)
}
inline std::string* Transaction_Signature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.Signature.signature)
  return _s;
}
inline const std::string& Transaction_Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Transaction_Signature::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction_Signature::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction_Signature::release_signature() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.Signature.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction_Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.Signature.signature)
}

// -------------------------------------------------------------------

// Transaction

// bytes script = 1;
inline void Transaction::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& Transaction::script() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.script)
}
inline std::string* Transaction::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.script)
  return _s;
}
inline const std::string& Transaction::_internal_script() const {
  return script_.Get();
}
inline void Transaction::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_script() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.script)
}

// repeated bytes arguments = 2;
inline int Transaction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Transaction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Transaction::clear_arguments() {
  arguments_.Clear();
}
inline std::string* Transaction::add_arguments() {
  std::string* _s = _internal_add_arguments();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.Transaction.arguments)
  return _s;
}
inline const std::string& Transaction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const std::string& Transaction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.arguments)
  return _internal_arguments(index);
}
inline std::string* Transaction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.arguments)
  return arguments_.Mutable(index);
}
inline void Transaction::set_arguments(int index, const std::string& value) {
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.arguments)
}
inline void Transaction::set_arguments(int index, std::string&& value) {
  arguments_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.arguments)
}
inline void Transaction::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.Transaction.arguments)
}
inline void Transaction::set_arguments(int index, const void* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.Transaction.arguments)
}
inline std::string* Transaction::_internal_add_arguments() {
  return arguments_.Add();
}
inline void Transaction::add_arguments(const std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.arguments)
}
inline void Transaction::add_arguments(std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.arguments)
}
inline void Transaction::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.Transaction.arguments)
}
inline void Transaction::add_arguments(const void* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.Transaction.arguments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::arguments() const {
  // @@protoc_insertion_point(field_list:flow.entities.Transaction.arguments)
  return arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Transaction.arguments)
  return &arguments_;
}

// bytes reference_block_id = 3;
inline void Transaction::clear_reference_block_id() {
  reference_block_id_.ClearToEmpty();
}
inline const std::string& Transaction::reference_block_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.reference_block_id)
  return _internal_reference_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_reference_block_id(ArgT0&& arg0, ArgT... args) {
 
 reference_block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.reference_block_id)
}
inline std::string* Transaction::mutable_reference_block_id() {
  std::string* _s = _internal_mutable_reference_block_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.reference_block_id)
  return _s;
}
inline const std::string& Transaction::_internal_reference_block_id() const {
  return reference_block_id_.Get();
}
inline void Transaction::_internal_set_reference_block_id(const std::string& value) {
  
  reference_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_reference_block_id() {
  
  return reference_block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_reference_block_id() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.reference_block_id)
  return reference_block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_reference_block_id(std::string* reference_block_id) {
  if (reference_block_id != nullptr) {
    
  } else {
    
  }
  reference_block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.reference_block_id)
}

// uint64 gas_limit = 4;
inline void Transaction::clear_gas_limit() {
  gas_limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_gas_limit() const {
  return gas_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::gas_limit() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.gas_limit)
  return _internal_gas_limit();
}
inline void Transaction::_internal_set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_limit_ = value;
}
inline void Transaction::set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.gas_limit)
}

// .flow.entities.Transaction.ProposalKey proposal_key = 5;
inline bool Transaction::_internal_has_proposal_key() const {
  return this != internal_default_instance() && proposal_key_ != nullptr;
}
inline bool Transaction::has_proposal_key() const {
  return _internal_has_proposal_key();
}
inline void Transaction::clear_proposal_key() {
  if (GetArenaForAllocation() == nullptr && proposal_key_ != nullptr) {
    delete proposal_key_;
  }
  proposal_key_ = nullptr;
}
inline const ::flow::entities::Transaction_ProposalKey& Transaction::_internal_proposal_key() const {
  const ::flow::entities::Transaction_ProposalKey* p = proposal_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::flow::entities::Transaction_ProposalKey&>(
      ::flow::entities::_Transaction_ProposalKey_default_instance_);
}
inline const ::flow::entities::Transaction_ProposalKey& Transaction::proposal_key() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.proposal_key)
  return _internal_proposal_key();
}
inline void Transaction::unsafe_arena_set_allocated_proposal_key(
    ::flow::entities::Transaction_ProposalKey* proposal_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_key_);
  }
  proposal_key_ = proposal_key;
  if (proposal_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flow.entities.Transaction.proposal_key)
}
inline ::flow::entities::Transaction_ProposalKey* Transaction::release_proposal_key() {
  
  ::flow::entities::Transaction_ProposalKey* temp = proposal_key_;
  proposal_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flow::entities::Transaction_ProposalKey* Transaction::unsafe_arena_release_proposal_key() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.proposal_key)
  
  ::flow::entities::Transaction_ProposalKey* temp = proposal_key_;
  proposal_key_ = nullptr;
  return temp;
}
inline ::flow::entities::Transaction_ProposalKey* Transaction::_internal_mutable_proposal_key() {
  
  if (proposal_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flow::entities::Transaction_ProposalKey>(GetArenaForAllocation());
    proposal_key_ = p;
  }
  return proposal_key_;
}
inline ::flow::entities::Transaction_ProposalKey* Transaction::mutable_proposal_key() {
  ::flow::entities::Transaction_ProposalKey* _msg = _internal_mutable_proposal_key();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.proposal_key)
  return _msg;
}
inline void Transaction::set_allocated_proposal_key(::flow::entities::Transaction_ProposalKey* proposal_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proposal_key_;
  }
  if (proposal_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flow::entities::Transaction_ProposalKey>::GetOwningArena(proposal_key);
    if (message_arena != submessage_arena) {
      proposal_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal_key, submessage_arena);
    }
    
  } else {
    
  }
  proposal_key_ = proposal_key;
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.proposal_key)
}

// bytes payer = 6;
inline void Transaction::clear_payer() {
  payer_.ClearToEmpty();
}
inline const std::string& Transaction::payer() const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.payer)
  return _internal_payer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_payer(ArgT0&& arg0, ArgT... args) {
 
 payer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.payer)
}
inline std::string* Transaction::mutable_payer() {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.payer)
  return _s;
}
inline const std::string& Transaction::_internal_payer() const {
  return payer_.Get();
}
inline void Transaction::_internal_set_payer(const std::string& value) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_payer() {
  
  return payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_payer() {
  // @@protoc_insertion_point(field_release:flow.entities.Transaction.payer)
  return payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Transaction.payer)
}

// repeated bytes authorizers = 7;
inline int Transaction::_internal_authorizers_size() const {
  return authorizers_.size();
}
inline int Transaction::authorizers_size() const {
  return _internal_authorizers_size();
}
inline void Transaction::clear_authorizers() {
  authorizers_.Clear();
}
inline std::string* Transaction::add_authorizers() {
  std::string* _s = _internal_add_authorizers();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.Transaction.authorizers)
  return _s;
}
inline const std::string& Transaction::_internal_authorizers(int index) const {
  return authorizers_.Get(index);
}
inline const std::string& Transaction::authorizers(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.authorizers)
  return _internal_authorizers(index);
}
inline std::string* Transaction::mutable_authorizers(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.authorizers)
  return authorizers_.Mutable(index);
}
inline void Transaction::set_authorizers(int index, const std::string& value) {
  authorizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.authorizers)
}
inline void Transaction::set_authorizers(int index, std::string&& value) {
  authorizers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.Transaction.authorizers)
}
inline void Transaction::set_authorizers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authorizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.Transaction.authorizers)
}
inline void Transaction::set_authorizers(int index, const void* value, size_t size) {
  authorizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.Transaction.authorizers)
}
inline std::string* Transaction::_internal_add_authorizers() {
  return authorizers_.Add();
}
inline void Transaction::add_authorizers(const std::string& value) {
  authorizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.authorizers)
}
inline void Transaction::add_authorizers(std::string&& value) {
  authorizers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.authorizers)
}
inline void Transaction::add_authorizers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authorizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.Transaction.authorizers)
}
inline void Transaction::add_authorizers(const void* value, size_t size) {
  authorizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.Transaction.authorizers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::authorizers() const {
  // @@protoc_insertion_point(field_list:flow.entities.Transaction.authorizers)
  return authorizers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_authorizers() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Transaction.authorizers)
  return &authorizers_;
}

// repeated .flow.entities.Transaction.Signature payload_signatures = 8;
inline int Transaction::_internal_payload_signatures_size() const {
  return payload_signatures_.size();
}
inline int Transaction::payload_signatures_size() const {
  return _internal_payload_signatures_size();
}
inline void Transaction::clear_payload_signatures() {
  payload_signatures_.Clear();
}
inline ::flow::entities::Transaction_Signature* Transaction::mutable_payload_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.payload_signatures)
  return payload_signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >*
Transaction::mutable_payload_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Transaction.payload_signatures)
  return &payload_signatures_;
}
inline const ::flow::entities::Transaction_Signature& Transaction::_internal_payload_signatures(int index) const {
  return payload_signatures_.Get(index);
}
inline const ::flow::entities::Transaction_Signature& Transaction::payload_signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.payload_signatures)
  return _internal_payload_signatures(index);
}
inline ::flow::entities::Transaction_Signature* Transaction::_internal_add_payload_signatures() {
  return payload_signatures_.Add();
}
inline ::flow::entities::Transaction_Signature* Transaction::add_payload_signatures() {
  ::flow::entities::Transaction_Signature* _add = _internal_add_payload_signatures();
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.payload_signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >&
Transaction::payload_signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.Transaction.payload_signatures)
  return payload_signatures_;
}

// repeated .flow.entities.Transaction.Signature envelope_signatures = 9;
inline int Transaction::_internal_envelope_signatures_size() const {
  return envelope_signatures_.size();
}
inline int Transaction::envelope_signatures_size() const {
  return _internal_envelope_signatures_size();
}
inline void Transaction::clear_envelope_signatures() {
  envelope_signatures_.Clear();
}
inline ::flow::entities::Transaction_Signature* Transaction::mutable_envelope_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Transaction.envelope_signatures)
  return envelope_signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >*
Transaction::mutable_envelope_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Transaction.envelope_signatures)
  return &envelope_signatures_;
}
inline const ::flow::entities::Transaction_Signature& Transaction::_internal_envelope_signatures(int index) const {
  return envelope_signatures_.Get(index);
}
inline const ::flow::entities::Transaction_Signature& Transaction::envelope_signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Transaction.envelope_signatures)
  return _internal_envelope_signatures(index);
}
inline ::flow::entities::Transaction_Signature* Transaction::_internal_add_envelope_signatures() {
  return envelope_signatures_.Add();
}
inline ::flow::entities::Transaction_Signature* Transaction::add_envelope_signatures() {
  ::flow::entities::Transaction_Signature* _add = _internal_add_envelope_signatures();
  // @@protoc_insertion_point(field_add:flow.entities.Transaction.envelope_signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Transaction_Signature >&
Transaction::envelope_signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.Transaction.envelope_signatures)
  return envelope_signatures_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flow::entities::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flow::entities::TransactionStatus>() {
  return ::flow::entities::TransactionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2ftransaction_2eproto
