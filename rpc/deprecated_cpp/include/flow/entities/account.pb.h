// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2faccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2faccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2faccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2faccount_2eproto;
namespace flow {
namespace entities {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountKey;
struct AccountKeyDefaultTypeInternal;
extern AccountKeyDefaultTypeInternal _AccountKey_default_instance_;
class Account_ContractsEntry_DoNotUse;
struct Account_ContractsEntry_DoNotUseDefaultTypeInternal;
extern Account_ContractsEntry_DoNotUseDefaultTypeInternal _Account_ContractsEntry_DoNotUse_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::Account* Arena::CreateMaybeMessage<::flow::entities::Account>(Arena*);
template<> ::flow::entities::AccountKey* Arena::CreateMaybeMessage<::flow::entities::AccountKey>(Arena*);
template<> ::flow::entities::Account_ContractsEntry_DoNotUse* Arena::CreateMaybeMessage<::flow::entities::Account_ContractsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class Account_ContractsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_ContractsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_ContractsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  Account_ContractsEntry_DoNotUse();
  explicit constexpr Account_ContractsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Account_ContractsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_ContractsEntry_DoNotUse& other);
  static const Account_ContractsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_ContractsEntry_DoNotUse*>(&_Account_ContractsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flow.entities.Account.ContractsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return new Account();
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kContractsFieldNumber = 5,
    kAddressFieldNumber = 1,
    kCodeFieldNumber = 3,
    kBalanceFieldNumber = 2,
  };
  // repeated .flow.entities.AccountKey keys = 4;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::flow::entities::AccountKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AccountKey >*
      mutable_keys();
  private:
  const ::flow::entities::AccountKey& _internal_keys(int index) const;
  ::flow::entities::AccountKey* _internal_add_keys();
  public:
  const ::flow::entities::AccountKey& keys(int index) const;
  ::flow::entities::AccountKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AccountKey >&
      keys() const;

  // map<string, bytes> contracts = 5;
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;
  public:
  void clear_contracts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_contracts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_contracts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      contracts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_contracts();

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // uint64 balance = 2;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AccountKey > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_ContractsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> contracts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2faccount_2eproto;
};
// -------------------------------------------------------------------

class AccountKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.AccountKey) */ {
 public:
  inline AccountKey() : AccountKey(nullptr) {}
  ~AccountKey() override;
  explicit constexpr AccountKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountKey(const AccountKey& from);
  AccountKey(AccountKey&& from) noexcept
    : AccountKey() {
    *this = ::std::move(from);
  }

  inline AccountKey& operator=(const AccountKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountKey& operator=(AccountKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountKey* internal_default_instance() {
    return reinterpret_cast<const AccountKey*>(
               &_AccountKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountKey& a, AccountKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountKey* New() const final {
    return new AccountKey();
  }

  AccountKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.AccountKey";
  }
  protected:
  explicit AccountKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 2,
    kIndexFieldNumber = 1,
    kSignAlgoFieldNumber = 3,
    kHashAlgoFieldNumber = 4,
    kWeightFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
    kRevokedFieldNumber = 7,
  };
  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sign_algo = 3;
  void clear_sign_algo();
  ::PROTOBUF_NAMESPACE_ID::uint32 sign_algo() const;
  void set_sign_algo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sign_algo() const;
  void _internal_set_sign_algo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash_algo = 4;
  void clear_hash_algo();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_algo() const;
  void set_hash_algo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash_algo() const;
  void _internal_set_hash_algo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 weight = 5;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sequence_number = 6;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool revoked = 7;
  void clear_revoked();
  bool revoked() const;
  void set_revoked(bool value);
  private:
  bool _internal_revoked() const;
  void _internal_set_revoked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.AccountKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sign_algo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_algo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  bool revoked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Account

// bytes address = 1;
inline void Account::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Account::address() const {
  // @@protoc_insertion_point(field_get:flow.entities.Account.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Account.address)
}
inline std::string* Account::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:flow.entities.Account.address)
  return _s;
}
inline const std::string& Account::_internal_address() const {
  return address_.Get();
}
inline void Account::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_address() {
  // @@protoc_insertion_point(field_release:flow.entities.Account.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Account.address)
}

// uint64 balance = 2;
inline void Account::clear_balance() {
  balance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::balance() const {
  // @@protoc_insertion_point(field_get:flow.entities.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  balance_ = value;
}
inline void Account::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:flow.entities.Account.balance)
}

// bytes code = 3;
inline void Account::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Account::code() const {
  // @@protoc_insertion_point(field_get:flow.entities.Account.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Account.code)
}
inline std::string* Account::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:flow.entities.Account.code)
  return _s;
}
inline const std::string& Account::_internal_code() const {
  return code_.Get();
}
inline void Account::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_code() {
  // @@protoc_insertion_point(field_release:flow.entities.Account.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Account::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Account.code)
}

// repeated .flow.entities.AccountKey keys = 4;
inline int Account::_internal_keys_size() const {
  return keys_.size();
}
inline int Account::keys_size() const {
  return _internal_keys_size();
}
inline void Account::clear_keys() {
  keys_.Clear();
}
inline ::flow::entities::AccountKey* Account::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Account.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AccountKey >*
Account::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Account.keys)
  return &keys_;
}
inline const ::flow::entities::AccountKey& Account::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::flow::entities::AccountKey& Account::keys(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Account.keys)
  return _internal_keys(index);
}
inline ::flow::entities::AccountKey* Account::_internal_add_keys() {
  return keys_.Add();
}
inline ::flow::entities::AccountKey* Account::add_keys() {
  ::flow::entities::AccountKey* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:flow.entities.Account.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AccountKey >&
Account::keys() const {
  // @@protoc_insertion_point(field_list:flow.entities.Account.keys)
  return keys_;
}

// map<string, bytes> contracts = 5;
inline int Account::_internal_contracts_size() const {
  return contracts_.size();
}
inline int Account::contracts_size() const {
  return _internal_contracts_size();
}
inline void Account::clear_contracts() {
  contracts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Account::_internal_contracts() const {
  return contracts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Account::contracts() const {
  // @@protoc_insertion_point(field_map:flow.entities.Account.contracts)
  return _internal_contracts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Account::_internal_mutable_contracts() {
  return contracts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Account::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_map:flow.entities.Account.contracts)
  return _internal_mutable_contracts();
}

// -------------------------------------------------------------------

// AccountKey

// uint32 index = 1;
inline void AccountKey::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::index() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.index)
  return _internal_index();
}
inline void AccountKey::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void AccountKey::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.index)
}

// bytes public_key = 2;
inline void AccountKey::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& AccountKey::public_key() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountKey::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.public_key)
}
inline std::string* AccountKey::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:flow.entities.AccountKey.public_key)
  return _s;
}
inline const std::string& AccountKey::_internal_public_key() const {
  return public_key_.Get();
}
inline void AccountKey::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountKey::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountKey::release_public_key() {
  // @@protoc_insertion_point(field_release:flow.entities.AccountKey.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountKey::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.AccountKey.public_key)
}

// uint32 sign_algo = 3;
inline void AccountKey::clear_sign_algo() {
  sign_algo_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::_internal_sign_algo() const {
  return sign_algo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::sign_algo() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.sign_algo)
  return _internal_sign_algo();
}
inline void AccountKey::_internal_set_sign_algo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sign_algo_ = value;
}
inline void AccountKey::set_sign_algo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sign_algo(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.sign_algo)
}

// uint32 hash_algo = 4;
inline void AccountKey::clear_hash_algo() {
  hash_algo_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::_internal_hash_algo() const {
  return hash_algo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::hash_algo() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.hash_algo)
  return _internal_hash_algo();
}
inline void AccountKey::_internal_set_hash_algo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_algo_ = value;
}
inline void AccountKey::set_hash_algo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash_algo(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.hash_algo)
}

// uint32 weight = 5;
inline void AccountKey::clear_weight() {
  weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::weight() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.weight)
  return _internal_weight();
}
inline void AccountKey::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weight_ = value;
}
inline void AccountKey::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.weight)
}

// uint32 sequence_number = 6;
inline void AccountKey::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountKey::sequence_number() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.sequence_number)
  return _internal_sequence_number();
}
inline void AccountKey::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void AccountKey::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.sequence_number)
}

// bool revoked = 7;
inline void AccountKey::clear_revoked() {
  revoked_ = false;
}
inline bool AccountKey::_internal_revoked() const {
  return revoked_;
}
inline bool AccountKey::revoked() const {
  // @@protoc_insertion_point(field_get:flow.entities.AccountKey.revoked)
  return _internal_revoked();
}
inline void AccountKey::_internal_set_revoked(bool value) {
  
  revoked_ = value;
}
inline void AccountKey::set_revoked(bool value) {
  _internal_set_revoked(value);
  // @@protoc_insertion_point(field_set:flow.entities.AccountKey.revoked)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2faccount_2eproto
