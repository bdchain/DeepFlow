// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/execution_result.proto

#include "flow/entities/execution_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow {
namespace entities {
constexpr ExecutionResult::ExecutionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , service_events_()
  , previous_result_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , execution_data_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecutionResultDefaultTypeInternal {
  constexpr ExecutionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionResultDefaultTypeInternal() {}
  union {
    ExecutionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionResultDefaultTypeInternal _ExecutionResult_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_collection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collectionindex_(0u)
  , number_of_transactions_(0u)
  , total_computation_used_(uint64_t{0u})
  , index_(uint64_t{0u}){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr ServiceEvent::ServiceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServiceEventDefaultTypeInternal {
  constexpr ServiceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceEventDefaultTypeInternal() {}
  union {
    ServiceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceEventDefaultTypeInternal _ServiceEvent_default_instance_;
constexpr ExecutionReceiptMeta::ExecutionReceiptMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spocks_()
  , executor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , executor_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecutionReceiptMetaDefaultTypeInternal {
  constexpr ExecutionReceiptMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionReceiptMetaDefaultTypeInternal() {}
  union {
    ExecutionReceiptMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionReceiptMetaDefaultTypeInternal _ExecutionReceiptMeta_default_instance_;
}  // namespace entities
}  // namespace flow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_2fentities_2fexecution_5fresult_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2fentities_2fexecution_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2fentities_2fexecution_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, previous_result_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, chunks_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, service_events_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionResult, execution_data_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, collectionindex_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, start_state_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, event_collection_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, total_computation_used_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, number_of_transactions_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, index_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::Chunk, end_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ServiceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ServiceEvent, type_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ServiceEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionReceiptMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionReceiptMeta, executor_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionReceiptMeta, result_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionReceiptMeta, spocks_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::ExecutionReceiptMeta, executor_signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flow::entities::ExecutionResult)},
  { 11, -1, -1, sizeof(::flow::entities::Chunk)},
  { 25, -1, -1, sizeof(::flow::entities::ServiceEvent)},
  { 33, -1, -1, sizeof(::flow::entities::ExecutionReceiptMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_ExecutionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_ServiceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_ExecutionReceiptMeta_default_instance_),
};

const char descriptor_table_protodef_flow_2fentities_2fexecution_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$flow/entities/execution_result.proto\022\r"
  "flow.entities\"\265\001\n\017ExecutionResult\022\032\n\022pre"
  "vious_result_id\030\001 \001(\014\022\020\n\010block_id\030\002 \001(\014\022"
  "$\n\006chunks\030\003 \003(\0132\024.flow.entities.Chunk\0223\n"
  "\016service_events\030\004 \003(\0132\033.flow.entities.Se"
  "rviceEvent\022\031\n\021execution_data_id\030\005 \001(\014\"\303\001"
  "\n\005Chunk\022\027\n\017CollectionIndex\030\001 \001(\r\022\023\n\013star"
  "t_state\030\002 \001(\014\022\030\n\020event_collection\030\003 \001(\014\022"
  "\020\n\010block_id\030\004 \001(\014\022\036\n\026total_computation_u"
  "sed\030\005 \001(\004\022\036\n\026number_of_transactions\030\006 \001("
  "\r\022\r\n\005index\030\007 \001(\004\022\021\n\tend_state\030\010 \001(\014\"-\n\014S"
  "erviceEvent\022\014\n\004type\030\001 \001(\t\022\017\n\007payload\030\002 \001"
  "(\014\"j\n\024ExecutionReceiptMeta\022\023\n\013executor_i"
  "d\030\001 \001(\014\022\021\n\tresult_id\030\002 \001(\014\022\016\n\006spocks\030\003 \003"
  "(\014\022\032\n\022executor_signature\030\004 \001(\014BP\n\034org.on"
  "flow.protobuf.entitiesZ0github.com/onflo"
  "w/flow/protobuf/go/flow/entitiesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto = {
  false, false, 680, descriptor_table_protodef_flow_2fentities_2fexecution_5fresult_2eproto, "flow/entities/execution_result.proto", 
  &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_flow_2fentities_2fexecution_5fresult_2eproto::offsets,
  file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto, file_level_enum_descriptors_flow_2fentities_2fexecution_5fresult_2eproto, file_level_service_descriptors_flow_2fentities_2fexecution_5fresult_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_getter() {
  return &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_2fentities_2fexecution_5fresult_2eproto(&descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto);
namespace flow {
namespace entities {

// ===================================================================

class ExecutionResult::_Internal {
 public:
};

ExecutionResult::ExecutionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_(arena),
  service_events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.ExecutionResult)
}
ExecutionResult::ExecutionResult(const ExecutionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_),
      service_events_(from.service_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_result_id().empty()) {
    previous_result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_result_id(), 
      GetArenaForAllocation());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  execution_data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_execution_data_id().empty()) {
    execution_data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_execution_data_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.entities.ExecutionResult)
}

void ExecutionResult::SharedCtor() {
previous_result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
execution_data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecutionResult::~ExecutionResult() {
  // @@protoc_insertion_point(destructor:flow.entities.ExecutionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  previous_result_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execution_data_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionResult::ArenaDtor(void* object) {
  ExecutionResult* _this = reinterpret_cast< ExecutionResult* >(object);
  (void)_this;
}
void ExecutionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.ExecutionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  service_events_.Clear();
  previous_result_id_.ClearToEmpty();
  block_id_.ClearToEmpty();
  execution_data_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes previous_result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_previous_result_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.Chunk chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.ServiceEvent service_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes execution_data_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_execution_data_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.ExecutionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_result_id = 1;
  if (!this->_internal_previous_result_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_previous_result_id(), target);
  }

  // bytes block_id = 2;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_id(), target);
  }

  // repeated .flow.entities.Chunk chunks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunks(i), target, stream);
  }

  // repeated .flow.entities.ServiceEvent service_events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_service_events(i), target, stream);
  }

  // bytes execution_data_id = 5;
  if (!this->_internal_execution_data_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_execution_data_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.ExecutionResult)
  return target;
}

size_t ExecutionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.ExecutionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.entities.Chunk chunks = 3;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flow.entities.ServiceEvent service_events = 4;
  total_size += 1UL * this->_internal_service_events_size();
  for (const auto& msg : this->service_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes previous_result_id = 1;
  if (!this->_internal_previous_result_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_result_id());
  }

  // bytes block_id = 2;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes execution_data_id = 5;
  if (!this->_internal_execution_data_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_execution_data_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecutionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionResult::GetClassData() const { return &_class_data_; }

void ExecutionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecutionResult *>(to)->MergeFrom(
      static_cast<const ExecutionResult &>(from));
}


void ExecutionResult::MergeFrom(const ExecutionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.ExecutionResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  service_events_.MergeFrom(from.service_events_);
  if (!from._internal_previous_result_id().empty()) {
    _internal_set_previous_result_id(from._internal_previous_result_id());
  }
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_execution_data_id().empty()) {
    _internal_set_execution_data_id(from._internal_execution_data_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionResult::CopyFrom(const ExecutionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.ExecutionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResult::IsInitialized() const {
  return true;
}

void ExecutionResult::InternalSwap(ExecutionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  service_events_.InternalSwap(&other->service_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_result_id_, lhs_arena,
      &other->previous_result_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &execution_data_id_, lhs_arena,
      &other->execution_data_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_getter, &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once,
      file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto[0]);
}

// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_state().empty()) {
    start_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_state(), 
      GetArenaForAllocation());
  }
  event_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_collection().empty()) {
    event_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_collection(), 
      GetArenaForAllocation());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_state().empty()) {
    end_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_state(), 
      GetArenaForAllocation());
  }
  ::memcpy(&collectionindex_, &from.collectionindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&collectionindex_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:flow.entities.Chunk)
}

void Chunk::SharedCtor() {
start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&collectionindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&collectionindex_)) + sizeof(index_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:flow.entities.Chunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_state_.ClearToEmpty();
  event_collection_.ClearToEmpty();
  block_id_.ClearToEmpty();
  end_state_.ClearToEmpty();
  ::memset(&collectionindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&collectionindex_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 CollectionIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          collectionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes start_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes event_collection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_event_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_computation_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_computation_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_of_transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_of_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes end_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_end_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CollectionIndex = 1;
  if (this->_internal_collectionindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_collectionindex(), target);
  }

  // bytes start_state = 2;
  if (!this->_internal_start_state().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_state(), target);
  }

  // bytes event_collection = 3;
  if (!this->_internal_event_collection().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_event_collection(), target);
  }

  // bytes block_id = 4;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_id(), target);
  }

  // uint64 total_computation_used = 5;
  if (this->_internal_total_computation_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_computation_used(), target);
  }

  // uint32 number_of_transactions = 6;
  if (this->_internal_number_of_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_transactions(), target);
  }

  // uint64 index = 7;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_index(), target);
  }

  // bytes end_state = 8;
  if (!this->_internal_end_state().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_end_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.Chunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_state = 2;
  if (!this->_internal_start_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_state());
  }

  // bytes event_collection = 3;
  if (!this->_internal_event_collection().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_event_collection());
  }

  // bytes block_id = 4;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes end_state = 8;
  if (!this->_internal_end_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_state());
  }

  // uint32 CollectionIndex = 1;
  if (this->_internal_collectionindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_collectionindex());
  }

  // uint32 number_of_transactions = 6;
  if (this->_internal_number_of_transactions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_transactions());
  }

  // uint64 total_computation_used = 5;
  if (this->_internal_total_computation_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_computation_used());
  }

  // uint64 index = 7;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }

void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chunk *>(to)->MergeFrom(
      static_cast<const Chunk &>(from));
}


void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_state().empty()) {
    _internal_set_start_state(from._internal_start_state());
  }
  if (!from._internal_event_collection().empty()) {
    _internal_set_event_collection(from._internal_event_collection());
  }
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_end_state().empty()) {
    _internal_set_end_state(from._internal_end_state());
  }
  if (from._internal_collectionindex() != 0) {
    _internal_set_collectionindex(from._internal_collectionindex());
  }
  if (from._internal_number_of_transactions() != 0) {
    _internal_set_number_of_transactions(from._internal_number_of_transactions());
  }
  if (from._internal_total_computation_used() != 0) {
    _internal_set_total_computation_used(from._internal_total_computation_used());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_state_, lhs_arena,
      &other->start_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_collection_, lhs_arena,
      &other->event_collection_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_state_, lhs_arena,
      &other->end_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, index_)
      + sizeof(Chunk::index_)
      - PROTOBUF_FIELD_OFFSET(Chunk, collectionindex_)>(
          reinterpret_cast<char*>(&collectionindex_),
          reinterpret_cast<char*>(&other->collectionindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_getter, &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once,
      file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto[1]);
}

// ===================================================================

class ServiceEvent::_Internal {
 public:
};

ServiceEvent::ServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.ServiceEvent)
}
ServiceEvent::ServiceEvent(const ServiceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.entities.ServiceEvent)
}

void ServiceEvent::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceEvent::~ServiceEvent() {
  // @@protoc_insertion_point(destructor:flow.entities.ServiceEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceEvent::ArenaDtor(void* object) {
  ServiceEvent* _this = reinterpret_cast< ServiceEvent* >(object);
  (void)_this;
}
void ServiceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.ServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.entities.ServiceEvent.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.ServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.entities.ServiceEvent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.ServiceEvent)
  return target;
}

size_t ServiceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.ServiceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceEvent::GetClassData() const { return &_class_data_; }

void ServiceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceEvent *>(to)->MergeFrom(
      static_cast<const ServiceEvent &>(from));
}


void ServiceEvent::MergeFrom(const ServiceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.ServiceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceEvent::CopyFrom(const ServiceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.ServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceEvent::IsInitialized() const {
  return true;
}

void ServiceEvent::InternalSwap(ServiceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_getter, &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once,
      file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto[2]);
}

// ===================================================================

class ExecutionReceiptMeta::_Internal {
 public:
};

ExecutionReceiptMeta::ExecutionReceiptMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.ExecutionReceiptMeta)
}
ExecutionReceiptMeta::ExecutionReceiptMeta(const ExecutionReceiptMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spocks_(from.spocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  executor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executor_id().empty()) {
    executor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_executor_id(), 
      GetArenaForAllocation());
  }
  result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_id().empty()) {
    result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_id(), 
      GetArenaForAllocation());
  }
  executor_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executor_signature().empty()) {
    executor_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_executor_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.entities.ExecutionReceiptMeta)
}

void ExecutionReceiptMeta::SharedCtor() {
executor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
executor_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecutionReceiptMeta::~ExecutionReceiptMeta() {
  // @@protoc_insertion_point(destructor:flow.entities.ExecutionReceiptMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionReceiptMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  executor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executor_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionReceiptMeta::ArenaDtor(void* object) {
  ExecutionReceiptMeta* _this = reinterpret_cast< ExecutionReceiptMeta* >(object);
  (void)_this;
}
void ExecutionReceiptMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionReceiptMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionReceiptMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.ExecutionReceiptMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spocks_.Clear();
  executor_id_.ClearToEmpty();
  result_id_.ClearToEmpty();
  executor_signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionReceiptMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes executor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_executor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes spocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spocks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes executor_signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_executor_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionReceiptMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.ExecutionReceiptMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes executor_id = 1;
  if (!this->_internal_executor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_executor_id(), target);
  }

  // bytes result_id = 2;
  if (!this->_internal_result_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_result_id(), target);
  }

  // repeated bytes spocks = 3;
  for (int i = 0, n = this->_internal_spocks_size(); i < n; i++) {
    const auto& s = this->_internal_spocks(i);
    target = stream->WriteBytes(3, s, target);
  }

  // bytes executor_signature = 4;
  if (!this->_internal_executor_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_executor_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.ExecutionReceiptMeta)
  return target;
}

size_t ExecutionReceiptMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.ExecutionReceiptMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes spocks = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(spocks_.size());
  for (int i = 0, n = spocks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      spocks_.Get(i));
  }

  // bytes executor_id = 1;
  if (!this->_internal_executor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_executor_id());
  }

  // bytes result_id = 2;
  if (!this->_internal_result_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_id());
  }

  // bytes executor_signature = 4;
  if (!this->_internal_executor_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_executor_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionReceiptMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecutionReceiptMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionReceiptMeta::GetClassData() const { return &_class_data_; }

void ExecutionReceiptMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecutionReceiptMeta *>(to)->MergeFrom(
      static_cast<const ExecutionReceiptMeta &>(from));
}


void ExecutionReceiptMeta::MergeFrom(const ExecutionReceiptMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.ExecutionReceiptMeta)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spocks_.MergeFrom(from.spocks_);
  if (!from._internal_executor_id().empty()) {
    _internal_set_executor_id(from._internal_executor_id());
  }
  if (!from._internal_result_id().empty()) {
    _internal_set_result_id(from._internal_result_id());
  }
  if (!from._internal_executor_signature().empty()) {
    _internal_set_executor_signature(from._internal_executor_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionReceiptMeta::CopyFrom(const ExecutionReceiptMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.ExecutionReceiptMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionReceiptMeta::IsInitialized() const {
  return true;
}

void ExecutionReceiptMeta::InternalSwap(ExecutionReceiptMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spocks_.InternalSwap(&other->spocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &executor_id_, lhs_arena,
      &other->executor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_id_, lhs_arena,
      &other->result_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &executor_signature_, lhs_arena,
      &other->executor_signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionReceiptMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_getter, &descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto_once,
      file_level_metadata_flow_2fentities_2fexecution_5fresult_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow::entities::ExecutionResult* Arena::CreateMaybeMessage< ::flow::entities::ExecutionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::ExecutionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::entities::Chunk* Arena::CreateMaybeMessage< ::flow::entities::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::entities::ServiceEvent* Arena::CreateMaybeMessage< ::flow::entities::ServiceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::ServiceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::entities::ExecutionReceiptMeta* Arena::CreateMaybeMessage< ::flow::entities::ExecutionReceiptMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::ExecutionReceiptMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
