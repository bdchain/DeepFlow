// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/execution/execution.proto

#include "flow/execution/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow {
namespace execution {
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr GetAccountAtBlockIDRequest::GetAccountAtBlockIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAccountAtBlockIDRequestDefaultTypeInternal {
  constexpr GetAccountAtBlockIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtBlockIDRequestDefaultTypeInternal() {}
  union {
    GetAccountAtBlockIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtBlockIDRequestDefaultTypeInternal _GetAccountAtBlockIDRequest_default_instance_;
constexpr GetAccountAtBlockIDResponse::GetAccountAtBlockIDResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(nullptr){}
struct GetAccountAtBlockIDResponseDefaultTypeInternal {
  constexpr GetAccountAtBlockIDResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtBlockIDResponseDefaultTypeInternal() {}
  union {
    GetAccountAtBlockIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtBlockIDResponseDefaultTypeInternal _GetAccountAtBlockIDResponse_default_instance_;
constexpr ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtBlockIDRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockIDRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockIDRequestDefaultTypeInternal _ExecuteScriptAtBlockIDRequest_default_instance_;
constexpr ExecuteScriptAtBlockIDResponse::ExecuteScriptAtBlockIDResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtBlockIDResponseDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockIDResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockIDResponseDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockIDResponseDefaultTypeInternal _ExecuteScriptAtBlockIDResponse_default_instance_;
constexpr GetEventsForBlockIDsResponse_Result::GetEventsForBlockIDsResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_height_(uint64_t{0u}){}
struct GetEventsForBlockIDsResponse_ResultDefaultTypeInternal {
  constexpr GetEventsForBlockIDsResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForBlockIDsResponse_ResultDefaultTypeInternal() {}
  union {
    GetEventsForBlockIDsResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForBlockIDsResponse_ResultDefaultTypeInternal _GetEventsForBlockIDsResponse_Result_default_instance_;
constexpr GetEventsForBlockIDsResponse::GetEventsForBlockIDsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct GetEventsForBlockIDsResponseDefaultTypeInternal {
  constexpr GetEventsForBlockIDsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForBlockIDsResponseDefaultTypeInternal() {}
  union {
    GetEventsForBlockIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForBlockIDsResponseDefaultTypeInternal _GetEventsForBlockIDsResponse_default_instance_;
constexpr GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_ids_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEventsForBlockIDsRequestDefaultTypeInternal {
  constexpr GetEventsForBlockIDsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForBlockIDsRequestDefaultTypeInternal() {}
  union {
    GetEventsForBlockIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForBlockIDsRequestDefaultTypeInternal _GetEventsForBlockIDsRequest_default_instance_;
constexpr GetTransactionResultRequest::GetTransactionResultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTransactionResultRequestDefaultTypeInternal {
  constexpr GetTransactionResultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTransactionResultRequestDefaultTypeInternal() {}
  union {
    GetTransactionResultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTransactionResultRequestDefaultTypeInternal _GetTransactionResultRequest_default_instance_;
constexpr GetTransactionResultResponse::GetTransactionResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_code_(0u){}
struct GetTransactionResultResponseDefaultTypeInternal {
  constexpr GetTransactionResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTransactionResultResponseDefaultTypeInternal() {}
  union {
    GetTransactionResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTransactionResultResponseDefaultTypeInternal _GetTransactionResultResponse_default_instance_;
constexpr GetRegisterAtBlockIDRequest::GetRegisterAtBlockIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , register_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , register_controller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , register_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRegisterAtBlockIDRequestDefaultTypeInternal {
  constexpr GetRegisterAtBlockIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRegisterAtBlockIDRequestDefaultTypeInternal() {}
  union {
    GetRegisterAtBlockIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRegisterAtBlockIDRequestDefaultTypeInternal _GetRegisterAtBlockIDRequest_default_instance_;
constexpr GetRegisterAtBlockIDResponse::GetRegisterAtBlockIDResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRegisterAtBlockIDResponseDefaultTypeInternal {
  constexpr GetRegisterAtBlockIDResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRegisterAtBlockIDResponseDefaultTypeInternal() {}
  union {
    GetRegisterAtBlockIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRegisterAtBlockIDResponseDefaultTypeInternal _GetRegisterAtBlockIDResponse_default_instance_;
constexpr GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_sealed_(false){}
struct GetLatestBlockHeaderRequestDefaultTypeInternal {
  constexpr GetLatestBlockHeaderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestBlockHeaderRequestDefaultTypeInternal() {}
  union {
    GetLatestBlockHeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestBlockHeaderRequestDefaultTypeInternal _GetLatestBlockHeaderRequest_default_instance_;
constexpr GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockHeaderByIDRequestDefaultTypeInternal {
  constexpr GetBlockHeaderByIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockHeaderByIDRequestDefaultTypeInternal() {}
  union {
    GetBlockHeaderByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockHeaderByIDRequestDefaultTypeInternal _GetBlockHeaderByIDRequest_default_instance_;
constexpr BlockHeaderResponse::BlockHeaderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockHeaderResponseDefaultTypeInternal {
  constexpr BlockHeaderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderResponseDefaultTypeInternal() {}
  union {
    BlockHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderResponseDefaultTypeInternal _BlockHeaderResponse_default_instance_;
}  // namespace execution
}  // namespace flow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2fexecution_2fexecution_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_2fexecution_2fexecution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2fexecution_2fexecution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2fexecution_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetAccountAtBlockIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetAccountAtBlockIDRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetAccountAtBlockIDRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetAccountAtBlockIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetAccountAtBlockIDResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDRequest, script_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDRequest, arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::ExecuteScriptAtBlockIDResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse_Result, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse_Result, block_height_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse_Result, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetEventsForBlockIDsRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultRequest, transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetTransactionResultResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDRequest, register_owner_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDRequest, register_controller_),
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDRequest, register_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetRegisterAtBlockIDResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetLatestBlockHeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetLatestBlockHeaderRequest, is_sealed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetBlockHeaderByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::GetBlockHeaderByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::execution::BlockHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::execution::BlockHeaderResponse, block_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flow::execution::PingRequest)},
  { 6, -1, -1, sizeof(::flow::execution::PingResponse)},
  { 12, -1, -1, sizeof(::flow::execution::GetAccountAtBlockIDRequest)},
  { 20, -1, -1, sizeof(::flow::execution::GetAccountAtBlockIDResponse)},
  { 27, -1, -1, sizeof(::flow::execution::ExecuteScriptAtBlockIDRequest)},
  { 36, -1, -1, sizeof(::flow::execution::ExecuteScriptAtBlockIDResponse)},
  { 43, -1, -1, sizeof(::flow::execution::GetEventsForBlockIDsResponse_Result)},
  { 52, -1, -1, sizeof(::flow::execution::GetEventsForBlockIDsResponse)},
  { 59, -1, -1, sizeof(::flow::execution::GetEventsForBlockIDsRequest)},
  { 67, -1, -1, sizeof(::flow::execution::GetTransactionResultRequest)},
  { 75, -1, -1, sizeof(::flow::execution::GetTransactionResultResponse)},
  { 84, -1, -1, sizeof(::flow::execution::GetRegisterAtBlockIDRequest)},
  { 94, -1, -1, sizeof(::flow::execution::GetRegisterAtBlockIDResponse)},
  { 101, -1, -1, sizeof(::flow::execution::GetLatestBlockHeaderRequest)},
  { 108, -1, -1, sizeof(::flow::execution::GetBlockHeaderByIDRequest)},
  { 115, -1, -1, sizeof(::flow::execution::BlockHeaderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetAccountAtBlockIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetAccountAtBlockIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_ExecuteScriptAtBlockIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_ExecuteScriptAtBlockIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetEventsForBlockIDsResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetEventsForBlockIDsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetEventsForBlockIDsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetTransactionResultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetTransactionResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetRegisterAtBlockIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetRegisterAtBlockIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetLatestBlockHeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_GetBlockHeaderByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::execution::_BlockHeaderResponse_default_instance_),
};

const char descriptor_table_protodef_flow_2fexecution_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036flow/execution/execution.proto\022\016flow.e"
  "xecution\032\033flow/entities/account.proto\032 f"
  "low/entities/block_header.proto\032\031flow/en"
  "tities/event.proto\"\r\n\013PingRequest\"\016\n\014Pin"
  "gResponse\"\?\n\032GetAccountAtBlockIDRequest\022"
  "\020\n\010block_id\030\001 \001(\014\022\017\n\007address\030\002 \001(\014\"F\n\033Ge"
  "tAccountAtBlockIDResponse\022\'\n\007account\030\001 \001"
  "(\0132\026.flow.entities.Account\"T\n\035ExecuteScr"
  "iptAtBlockIDRequest\022\020\n\010block_id\030\001 \001(\014\022\016\n"
  "\006script\030\002 \001(\014\022\021\n\targuments\030\003 \003(\014\"/\n\036Exec"
  "uteScriptAtBlockIDResponse\022\r\n\005value\030\001 \001("
  "\014\"\274\001\n\034GetEventsForBlockIDsResponse\022D\n\007re"
  "sults\030\001 \003(\01323.flow.execution.GetEventsFo"
  "rBlockIDsResponse.Result\032V\n\006Result\022\020\n\010bl"
  "ock_id\030\001 \001(\014\022\024\n\014block_height\030\002 \001(\004\022$\n\006ev"
  "ents\030\003 \003(\0132\024.flow.entities.Event\">\n\033GetE"
  "ventsForBlockIDsRequest\022\014\n\004type\030\001 \001(\t\022\021\n"
  "\tblock_ids\030\002 \003(\014\"G\n\033GetTransactionResult"
  "Request\022\020\n\010block_id\030\001 \001(\014\022\026\n\016transaction"
  "_id\030\002 \001(\014\"p\n\034GetTransactionResultRespons"
  "e\022\023\n\013status_code\030\001 \001(\r\022\025\n\rerror_message\030"
  "\002 \001(\t\022$\n\006events\030\003 \003(\0132\024.flow.entities.Ev"
  "ent\"z\n\033GetRegisterAtBlockIDRequest\022\020\n\010bl"
  "ock_id\030\001 \001(\014\022\026\n\016register_owner\030\002 \001(\014\022\033\n\023"
  "register_controller\030\003 \001(\014\022\024\n\014register_ke"
  "y\030\004 \001(\014\"-\n\034GetRegisterAtBlockIDResponse\022"
  "\r\n\005value\030\001 \001(\014\"0\n\033GetLatestBlockHeaderRe"
  "quest\022\021\n\tis_sealed\030\001 \001(\010\"\'\n\031GetBlockHead"
  "erByIDRequest\022\n\n\002id\030\001 \001(\014\"@\n\023BlockHeader"
  "Response\022)\n\005block\030\001 \001(\0132\032.flow.entities."
  "BlockHeader2\343\006\n\014ExecutionAPI\022A\n\004Ping\022\033.f"
  "low.execution.PingRequest\032\034.flow.executi"
  "on.PingResponse\022n\n\023GetAccountAtBlockID\022*"
  ".flow.execution.GetAccountAtBlockIDReque"
  "st\032+.flow.execution.GetAccountAtBlockIDR"
  "esponse\022w\n\026ExecuteScriptAtBlockID\022-.flow"
  ".execution.ExecuteScriptAtBlockIDRequest"
  "\032..flow.execution.ExecuteScriptAtBlockID"
  "Response\022q\n\024GetEventsForBlockIDs\022+.flow."
  "execution.GetEventsForBlockIDsRequest\032,."
  "flow.execution.GetEventsForBlockIDsRespo"
  "nse\022q\n\024GetTransactionResult\022+.flow.execu"
  "tion.GetTransactionResultRequest\032,.flow."
  "execution.GetTransactionResultResponse\022q"
  "\n\024GetRegisterAtBlockID\022+.flow.execution."
  "GetRegisterAtBlockIDRequest\032,.flow.execu"
  "tion.GetRegisterAtBlockIDResponse\022h\n\024Get"
  "LatestBlockHeader\022+.flow.execution.GetLa"
  "testBlockHeaderRequest\032#.flow.execution."
  "BlockHeaderResponse\022d\n\022GetBlockHeaderByI"
  "D\022).flow.execution.GetBlockHeaderByIDReq"
  "uest\032#.flow.execution.BlockHeaderRespons"
  "eBR\n\035org.onflow.protobuf.executionZ1gith"
  "ub.com/onflow/flow/protobuf/go/flow/exec"
  "utionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flow_2fexecution_2fexecution_2eproto_deps[3] = {
  &::descriptor_table_flow_2fentities_2faccount_2eproto,
  &::descriptor_table_flow_2fentities_2fblock_5fheader_2eproto,
  &::descriptor_table_flow_2fentities_2fevent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2fexecution_2fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fexecution_2fexecution_2eproto = {
  false, false, 2173, descriptor_table_protodef_flow_2fexecution_2fexecution_2eproto, "flow/execution/execution.proto", 
  &descriptor_table_flow_2fexecution_2fexecution_2eproto_once, descriptor_table_flow_2fexecution_2fexecution_2eproto_deps, 3, 16,
  schemas, file_default_instances, TableStruct_flow_2fexecution_2fexecution_2eproto::offsets,
  file_level_metadata_flow_2fexecution_2fexecution_2eproto, file_level_enum_descriptors_flow_2fexecution_2fexecution_2eproto, file_level_service_descriptors_flow_2fexecution_2fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flow_2fexecution_2fexecution_2eproto_getter() {
  return &descriptor_table_flow_2fexecution_2fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_2fexecution_2fexecution_2eproto(&descriptor_table_flow_2fexecution_2fexecution_2eproto);
namespace flow {
namespace execution {

// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.execution.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.execution.PingRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[0]);
}

// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.execution.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.execution.PingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[1]);
}

// ===================================================================

class GetAccountAtBlockIDRequest::_Internal {
 public:
};

GetAccountAtBlockIDRequest::GetAccountAtBlockIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetAccountAtBlockIDRequest)
}
GetAccountAtBlockIDRequest::GetAccountAtBlockIDRequest(const GetAccountAtBlockIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetAccountAtBlockIDRequest)
}

void GetAccountAtBlockIDRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountAtBlockIDRequest::~GetAccountAtBlockIDRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetAccountAtBlockIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountAtBlockIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountAtBlockIDRequest::ArenaDtor(void* object) {
  GetAccountAtBlockIDRequest* _this = reinterpret_cast< GetAccountAtBlockIDRequest* >(object);
  (void)_this;
}
void GetAccountAtBlockIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtBlockIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtBlockIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetAccountAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtBlockIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtBlockIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetAccountAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetAccountAtBlockIDRequest)
  return target;
}

size_t GetAccountAtBlockIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetAccountAtBlockIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAtBlockIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountAtBlockIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAtBlockIDRequest::GetClassData() const { return &_class_data_; }

void GetAccountAtBlockIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountAtBlockIDRequest *>(to)->MergeFrom(
      static_cast<const GetAccountAtBlockIDRequest &>(from));
}


void GetAccountAtBlockIDRequest::MergeFrom(const GetAccountAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetAccountAtBlockIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAtBlockIDRequest::CopyFrom(const GetAccountAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetAccountAtBlockIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtBlockIDRequest::IsInitialized() const {
  return true;
}

void GetAccountAtBlockIDRequest::InternalSwap(GetAccountAtBlockIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtBlockIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[2]);
}

// ===================================================================

class GetAccountAtBlockIDResponse::_Internal {
 public:
  static const ::flow::entities::Account& account(const GetAccountAtBlockIDResponse* msg);
};

const ::flow::entities::Account&
GetAccountAtBlockIDResponse::_Internal::account(const GetAccountAtBlockIDResponse* msg) {
  return *msg->account_;
}
void GetAccountAtBlockIDResponse::clear_account() {
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
GetAccountAtBlockIDResponse::GetAccountAtBlockIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetAccountAtBlockIDResponse)
}
GetAccountAtBlockIDResponse::GetAccountAtBlockIDResponse(const GetAccountAtBlockIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::flow::entities::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetAccountAtBlockIDResponse)
}

void GetAccountAtBlockIDResponse::SharedCtor() {
account_ = nullptr;
}

GetAccountAtBlockIDResponse::~GetAccountAtBlockIDResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.GetAccountAtBlockIDResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountAtBlockIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void GetAccountAtBlockIDResponse::ArenaDtor(void* object) {
  GetAccountAtBlockIDResponse* _this = reinterpret_cast< GetAccountAtBlockIDResponse* >(object);
  (void)_this;
}
void GetAccountAtBlockIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtBlockIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtBlockIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetAccountAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtBlockIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtBlockIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetAccountAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetAccountAtBlockIDResponse)
  return target;
}

size_t GetAccountAtBlockIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetAccountAtBlockIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAtBlockIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountAtBlockIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAtBlockIDResponse::GetClassData() const { return &_class_data_; }

void GetAccountAtBlockIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountAtBlockIDResponse *>(to)->MergeFrom(
      static_cast<const GetAccountAtBlockIDResponse &>(from));
}


void GetAccountAtBlockIDResponse::MergeFrom(const GetAccountAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetAccountAtBlockIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account()) {
    _internal_mutable_account()->::flow::entities::Account::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAtBlockIDResponse::CopyFrom(const GetAccountAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetAccountAtBlockIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtBlockIDResponse::IsInitialized() const {
  return true;
}

void GetAccountAtBlockIDResponse::InternalSwap(GetAccountAtBlockIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtBlockIDResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[3]);
}

// ===================================================================

class ExecuteScriptAtBlockIDRequest::_Internal {
 public:
};

ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.ExecuteScriptAtBlockIDRequest)
}
ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(const ExecuteScriptAtBlockIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.ExecuteScriptAtBlockIDRequest)
}

void ExecuteScriptAtBlockIDRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtBlockIDRequest::~ExecuteScriptAtBlockIDRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.ExecuteScriptAtBlockIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptAtBlockIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockIDRequest::ArenaDtor(void* object) {
  ExecuteScriptAtBlockIDRequest* _this = reinterpret_cast< ExecuteScriptAtBlockIDRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.ExecuteScriptAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  block_id_.ClearToEmpty();
  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.ExecuteScriptAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  // repeated bytes arguments = 3;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.ExecuteScriptAtBlockIDRequest)
  return target;
}

size_t ExecuteScriptAtBlockIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.ExecuteScriptAtBlockIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes arguments = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      arguments_.Get(i));
  }

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptAtBlockIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptAtBlockIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptAtBlockIDRequest::GetClassData() const { return &_class_data_; }

void ExecuteScriptAtBlockIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptAtBlockIDRequest *>(to)->MergeFrom(
      static_cast<const ExecuteScriptAtBlockIDRequest &>(from));
}


void ExecuteScriptAtBlockIDRequest::MergeFrom(const ExecuteScriptAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.ExecuteScriptAtBlockIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptAtBlockIDRequest::CopyFrom(const ExecuteScriptAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.ExecuteScriptAtBlockIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockIDRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockIDRequest::InternalSwap(ExecuteScriptAtBlockIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[4]);
}

// ===================================================================

class ExecuteScriptAtBlockIDResponse::_Internal {
 public:
};

ExecuteScriptAtBlockIDResponse::ExecuteScriptAtBlockIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.ExecuteScriptAtBlockIDResponse)
}
ExecuteScriptAtBlockIDResponse::ExecuteScriptAtBlockIDResponse(const ExecuteScriptAtBlockIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.ExecuteScriptAtBlockIDResponse)
}

void ExecuteScriptAtBlockIDResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtBlockIDResponse::~ExecuteScriptAtBlockIDResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.ExecuteScriptAtBlockIDResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptAtBlockIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockIDResponse::ArenaDtor(void* object) {
  ExecuteScriptAtBlockIDResponse* _this = reinterpret_cast< ExecuteScriptAtBlockIDResponse* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.ExecuteScriptAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.ExecuteScriptAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.ExecuteScriptAtBlockIDResponse)
  return target;
}

size_t ExecuteScriptAtBlockIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.ExecuteScriptAtBlockIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptAtBlockIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptAtBlockIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptAtBlockIDResponse::GetClassData() const { return &_class_data_; }

void ExecuteScriptAtBlockIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptAtBlockIDResponse *>(to)->MergeFrom(
      static_cast<const ExecuteScriptAtBlockIDResponse &>(from));
}


void ExecuteScriptAtBlockIDResponse::MergeFrom(const ExecuteScriptAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.ExecuteScriptAtBlockIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptAtBlockIDResponse::CopyFrom(const ExecuteScriptAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.ExecuteScriptAtBlockIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockIDResponse::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockIDResponse::InternalSwap(ExecuteScriptAtBlockIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockIDResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[5]);
}

// ===================================================================

class GetEventsForBlockIDsResponse_Result::_Internal {
 public:
};

void GetEventsForBlockIDsResponse_Result::clear_events() {
  events_.Clear();
}
GetEventsForBlockIDsResponse_Result::GetEventsForBlockIDsResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetEventsForBlockIDsResponse.Result)
}
GetEventsForBlockIDsResponse_Result::GetEventsForBlockIDsResponse_Result(const GetEventsForBlockIDsResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetEventsForBlockIDsResponse.Result)
}

void GetEventsForBlockIDsResponse_Result::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_height_ = uint64_t{0u};
}

GetEventsForBlockIDsResponse_Result::~GetEventsForBlockIDsResponse_Result() {
  // @@protoc_insertion_point(destructor:flow.execution.GetEventsForBlockIDsResponse.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsForBlockIDsResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForBlockIDsResponse_Result::ArenaDtor(void* object) {
  GetEventsForBlockIDsResponse_Result* _this = reinterpret_cast< GetEventsForBlockIDsResponse_Result* >(object);
  (void)_this;
}
void GetEventsForBlockIDsResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForBlockIDsResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForBlockIDsResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetEventsForBlockIDsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  block_id_.ClearToEmpty();
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForBlockIDsResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForBlockIDsResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetEventsForBlockIDsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // repeated .flow.entities.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetEventsForBlockIDsResponse.Result)
  return target;
}

size_t GetEventsForBlockIDsResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetEventsForBlockIDsResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.entities.Event events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsForBlockIDsResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsForBlockIDsResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsForBlockIDsResponse_Result::GetClassData() const { return &_class_data_; }

void GetEventsForBlockIDsResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsForBlockIDsResponse_Result *>(to)->MergeFrom(
      static_cast<const GetEventsForBlockIDsResponse_Result &>(from));
}


void GetEventsForBlockIDsResponse_Result::MergeFrom(const GetEventsForBlockIDsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetEventsForBlockIDsResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsForBlockIDsResponse_Result::CopyFrom(const GetEventsForBlockIDsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetEventsForBlockIDsResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForBlockIDsResponse_Result::IsInitialized() const {
  return true;
}

void GetEventsForBlockIDsResponse_Result::InternalSwap(GetEventsForBlockIDsResponse_Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForBlockIDsResponse_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[6]);
}

// ===================================================================

class GetEventsForBlockIDsResponse::_Internal {
 public:
};

GetEventsForBlockIDsResponse::GetEventsForBlockIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetEventsForBlockIDsResponse)
}
GetEventsForBlockIDsResponse::GetEventsForBlockIDsResponse(const GetEventsForBlockIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetEventsForBlockIDsResponse)
}

void GetEventsForBlockIDsResponse::SharedCtor() {
}

GetEventsForBlockIDsResponse::~GetEventsForBlockIDsResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.GetEventsForBlockIDsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsForBlockIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetEventsForBlockIDsResponse::ArenaDtor(void* object) {
  GetEventsForBlockIDsResponse* _this = reinterpret_cast< GetEventsForBlockIDsResponse* >(object);
  (void)_this;
}
void GetEventsForBlockIDsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForBlockIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForBlockIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetEventsForBlockIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForBlockIDsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flow.execution.GetEventsForBlockIDsResponse.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForBlockIDsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetEventsForBlockIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flow.execution.GetEventsForBlockIDsResponse.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetEventsForBlockIDsResponse)
  return target;
}

size_t GetEventsForBlockIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetEventsForBlockIDsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.execution.GetEventsForBlockIDsResponse.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsForBlockIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsForBlockIDsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsForBlockIDsResponse::GetClassData() const { return &_class_data_; }

void GetEventsForBlockIDsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsForBlockIDsResponse *>(to)->MergeFrom(
      static_cast<const GetEventsForBlockIDsResponse &>(from));
}


void GetEventsForBlockIDsResponse::MergeFrom(const GetEventsForBlockIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetEventsForBlockIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsForBlockIDsResponse::CopyFrom(const GetEventsForBlockIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetEventsForBlockIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForBlockIDsResponse::IsInitialized() const {
  return true;
}

void GetEventsForBlockIDsResponse::InternalSwap(GetEventsForBlockIDsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForBlockIDsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[7]);
}

// ===================================================================

class GetEventsForBlockIDsRequest::_Internal {
 public:
};

GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetEventsForBlockIDsRequest)
}
GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(const GetEventsForBlockIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetEventsForBlockIDsRequest)
}

void GetEventsForBlockIDsRequest::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEventsForBlockIDsRequest::~GetEventsForBlockIDsRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetEventsForBlockIDsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsForBlockIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForBlockIDsRequest::ArenaDtor(void* object) {
  GetEventsForBlockIDsRequest* _this = reinterpret_cast< GetEventsForBlockIDsRequest* >(object);
  (void)_this;
}
void GetEventsForBlockIDsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForBlockIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForBlockIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetEventsForBlockIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForBlockIDsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.execution.GetEventsForBlockIDsRequest.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes block_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForBlockIDsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetEventsForBlockIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.execution.GetEventsForBlockIDsRequest.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated bytes block_ids = 2;
  for (int i = 0, n = this->_internal_block_ids_size(); i < n; i++) {
    const auto& s = this->_internal_block_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetEventsForBlockIDsRequest)
  return target;
}

size_t GetEventsForBlockIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetEventsForBlockIDsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_ids_.size());
  for (int i = 0, n = block_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      block_ids_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsForBlockIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsForBlockIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsForBlockIDsRequest::GetClassData() const { return &_class_data_; }

void GetEventsForBlockIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsForBlockIDsRequest *>(to)->MergeFrom(
      static_cast<const GetEventsForBlockIDsRequest &>(from));
}


void GetEventsForBlockIDsRequest::MergeFrom(const GetEventsForBlockIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetEventsForBlockIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsForBlockIDsRequest::CopyFrom(const GetEventsForBlockIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetEventsForBlockIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForBlockIDsRequest::IsInitialized() const {
  return true;
}

void GetEventsForBlockIDsRequest::InternalSwap(GetEventsForBlockIDsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_ids_.InternalSwap(&other->block_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForBlockIDsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[8]);
}

// ===================================================================

class GetTransactionResultRequest::_Internal {
 public:
};

GetTransactionResultRequest::GetTransactionResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetTransactionResultRequest)
}
GetTransactionResultRequest::GetTransactionResultRequest(const GetTransactionResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetTransactionResultRequest)
}

void GetTransactionResultRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTransactionResultRequest::~GetTransactionResultRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetTransactionResultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTransactionResultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionResultRequest::ArenaDtor(void* object) {
  GetTransactionResultRequest* _this = reinterpret_cast< GetTransactionResultRequest* >(object);
  (void)_this;
}
void GetTransactionResultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionResultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTransactionResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetTransactionResultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionResultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionResultRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetTransactionResultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes transaction_id = 2;
  if (!this->_internal_transaction_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetTransactionResultRequest)
  return target;
}

size_t GetTransactionResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetTransactionResultRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes transaction_id = 2;
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTransactionResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTransactionResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTransactionResultRequest::GetClassData() const { return &_class_data_; }

void GetTransactionResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTransactionResultRequest *>(to)->MergeFrom(
      static_cast<const GetTransactionResultRequest &>(from));
}


void GetTransactionResultRequest::MergeFrom(const GetTransactionResultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetTransactionResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTransactionResultRequest::CopyFrom(const GetTransactionResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetTransactionResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionResultRequest::IsInitialized() const {
  return true;
}

void GetTransactionResultRequest::InternalSwap(GetTransactionResultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionResultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[9]);
}

// ===================================================================

class GetTransactionResultResponse::_Internal {
 public:
};

void GetTransactionResultResponse::clear_events() {
  events_.Clear();
}
GetTransactionResultResponse::GetTransactionResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetTransactionResultResponse)
}
GetTransactionResultResponse::GetTransactionResultResponse(const GetTransactionResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetTransactionResultResponse)
}

void GetTransactionResultResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_code_ = 0u;
}

GetTransactionResultResponse::~GetTransactionResultResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.GetTransactionResultResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTransactionResultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionResultResponse::ArenaDtor(void* object) {
  GetTransactionResultResponse* _this = reinterpret_cast< GetTransactionResultResponse* >(object);
  (void)_this;
}
void GetTransactionResultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTransactionResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetTransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  error_message_.ClearToEmpty();
  status_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionResultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.execution.GetTransactionResultResponse.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionResultResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetTransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.execution.GetTransactionResultResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // repeated .flow.entities.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetTransactionResultResponse)
  return target;
}

size_t GetTransactionResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetTransactionResultResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.entities.Event events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // uint32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTransactionResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTransactionResultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTransactionResultResponse::GetClassData() const { return &_class_data_; }

void GetTransactionResultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTransactionResultResponse *>(to)->MergeFrom(
      static_cast<const GetTransactionResultResponse &>(from));
}


void GetTransactionResultResponse::MergeFrom(const GetTransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetTransactionResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTransactionResultResponse::CopyFrom(const GetTransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetTransactionResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionResultResponse::IsInitialized() const {
  return true;
}

void GetTransactionResultResponse::InternalSwap(GetTransactionResultResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionResultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[10]);
}

// ===================================================================

class GetRegisterAtBlockIDRequest::_Internal {
 public:
};

GetRegisterAtBlockIDRequest::GetRegisterAtBlockIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetRegisterAtBlockIDRequest)
}
GetRegisterAtBlockIDRequest::GetRegisterAtBlockIDRequest(const GetRegisterAtBlockIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  register_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_owner().empty()) {
    register_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_owner(), 
      GetArenaForAllocation());
  }
  register_controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_controller().empty()) {
    register_controller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_controller(), 
      GetArenaForAllocation());
  }
  register_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_register_key().empty()) {
    register_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_register_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetRegisterAtBlockIDRequest)
}

void GetRegisterAtBlockIDRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
register_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
register_controller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
register_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRegisterAtBlockIDRequest::~GetRegisterAtBlockIDRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetRegisterAtBlockIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRegisterAtBlockIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_controller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRegisterAtBlockIDRequest::ArenaDtor(void* object) {
  GetRegisterAtBlockIDRequest* _this = reinterpret_cast< GetRegisterAtBlockIDRequest* >(object);
  (void)_this;
}
void GetRegisterAtBlockIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRegisterAtBlockIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRegisterAtBlockIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetRegisterAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  register_owner_.ClearToEmpty();
  register_controller_.ClearToEmpty();
  register_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRegisterAtBlockIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes register_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_register_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes register_controller = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_register_controller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes register_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_register_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegisterAtBlockIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetRegisterAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes register_owner = 2;
  if (!this->_internal_register_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_register_owner(), target);
  }

  // bytes register_controller = 3;
  if (!this->_internal_register_controller().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_register_controller(), target);
  }

  // bytes register_key = 4;
  if (!this->_internal_register_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_register_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetRegisterAtBlockIDRequest)
  return target;
}

size_t GetRegisterAtBlockIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetRegisterAtBlockIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes register_owner = 2;
  if (!this->_internal_register_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_register_owner());
  }

  // bytes register_controller = 3;
  if (!this->_internal_register_controller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_register_controller());
  }

  // bytes register_key = 4;
  if (!this->_internal_register_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_register_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRegisterAtBlockIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRegisterAtBlockIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRegisterAtBlockIDRequest::GetClassData() const { return &_class_data_; }

void GetRegisterAtBlockIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRegisterAtBlockIDRequest *>(to)->MergeFrom(
      static_cast<const GetRegisterAtBlockIDRequest &>(from));
}


void GetRegisterAtBlockIDRequest::MergeFrom(const GetRegisterAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetRegisterAtBlockIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_register_owner().empty()) {
    _internal_set_register_owner(from._internal_register_owner());
  }
  if (!from._internal_register_controller().empty()) {
    _internal_set_register_controller(from._internal_register_controller());
  }
  if (!from._internal_register_key().empty()) {
    _internal_set_register_key(from._internal_register_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRegisterAtBlockIDRequest::CopyFrom(const GetRegisterAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetRegisterAtBlockIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegisterAtBlockIDRequest::IsInitialized() const {
  return true;
}

void GetRegisterAtBlockIDRequest::InternalSwap(GetRegisterAtBlockIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_owner_, lhs_arena,
      &other->register_owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_controller_, lhs_arena,
      &other->register_controller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &register_key_, lhs_arena,
      &other->register_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegisterAtBlockIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[11]);
}

// ===================================================================

class GetRegisterAtBlockIDResponse::_Internal {
 public:
};

GetRegisterAtBlockIDResponse::GetRegisterAtBlockIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetRegisterAtBlockIDResponse)
}
GetRegisterAtBlockIDResponse::GetRegisterAtBlockIDResponse(const GetRegisterAtBlockIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetRegisterAtBlockIDResponse)
}

void GetRegisterAtBlockIDResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRegisterAtBlockIDResponse::~GetRegisterAtBlockIDResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.GetRegisterAtBlockIDResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRegisterAtBlockIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRegisterAtBlockIDResponse::ArenaDtor(void* object) {
  GetRegisterAtBlockIDResponse* _this = reinterpret_cast< GetRegisterAtBlockIDResponse* >(object);
  (void)_this;
}
void GetRegisterAtBlockIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRegisterAtBlockIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRegisterAtBlockIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetRegisterAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRegisterAtBlockIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegisterAtBlockIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetRegisterAtBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetRegisterAtBlockIDResponse)
  return target;
}

size_t GetRegisterAtBlockIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetRegisterAtBlockIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRegisterAtBlockIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRegisterAtBlockIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRegisterAtBlockIDResponse::GetClassData() const { return &_class_data_; }

void GetRegisterAtBlockIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRegisterAtBlockIDResponse *>(to)->MergeFrom(
      static_cast<const GetRegisterAtBlockIDResponse &>(from));
}


void GetRegisterAtBlockIDResponse::MergeFrom(const GetRegisterAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetRegisterAtBlockIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRegisterAtBlockIDResponse::CopyFrom(const GetRegisterAtBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetRegisterAtBlockIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegisterAtBlockIDResponse::IsInitialized() const {
  return true;
}

void GetRegisterAtBlockIDResponse::InternalSwap(GetRegisterAtBlockIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegisterAtBlockIDResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[12]);
}

// ===================================================================

class GetLatestBlockHeaderRequest::_Internal {
 public:
};

GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetLatestBlockHeaderRequest)
}
GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(const GetLatestBlockHeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_sealed_ = from.is_sealed_;
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetLatestBlockHeaderRequest)
}

void GetLatestBlockHeaderRequest::SharedCtor() {
is_sealed_ = false;
}

GetLatestBlockHeaderRequest::~GetLatestBlockHeaderRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetLatestBlockHeaderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLatestBlockHeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLatestBlockHeaderRequest::ArenaDtor(void* object) {
  GetLatestBlockHeaderRequest* _this = reinterpret_cast< GetLatestBlockHeaderRequest* >(object);
  (void)_this;
}
void GetLatestBlockHeaderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestBlockHeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestBlockHeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_sealed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestBlockHeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_sealed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestBlockHeaderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sealed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetLatestBlockHeaderRequest)
  return target;
}

size_t GetLatestBlockHeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetLatestBlockHeaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLatestBlockHeaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLatestBlockHeaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLatestBlockHeaderRequest::GetClassData() const { return &_class_data_; }

void GetLatestBlockHeaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLatestBlockHeaderRequest *>(to)->MergeFrom(
      static_cast<const GetLatestBlockHeaderRequest &>(from));
}


void GetLatestBlockHeaderRequest::MergeFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetLatestBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_sealed() != 0) {
    _internal_set_is_sealed(from._internal_is_sealed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLatestBlockHeaderRequest::CopyFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetLatestBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestBlockHeaderRequest::IsInitialized() const {
  return true;
}

void GetLatestBlockHeaderRequest::InternalSwap(GetLatestBlockHeaderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_sealed_, other->is_sealed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestBlockHeaderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[13]);
}

// ===================================================================

class GetBlockHeaderByIDRequest::_Internal {
 public:
};

GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.GetBlockHeaderByIDRequest)
}
GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(const GetBlockHeaderByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.GetBlockHeaderByIDRequest)
}

void GetBlockHeaderByIDRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockHeaderByIDRequest::~GetBlockHeaderByIDRequest() {
  // @@protoc_insertion_point(destructor:flow.execution.GetBlockHeaderByIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockHeaderByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockHeaderByIDRequest::ArenaDtor(void* object) {
  GetBlockHeaderByIDRequest* _this = reinterpret_cast< GetBlockHeaderByIDRequest* >(object);
  (void)_this;
}
void GetBlockHeaderByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaderByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockHeaderByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.GetBlockHeaderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaderByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.GetBlockHeaderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.GetBlockHeaderByIDRequest)
  return target;
}

size_t GetBlockHeaderByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.GetBlockHeaderByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockHeaderByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockHeaderByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockHeaderByIDRequest::GetClassData() const { return &_class_data_; }

void GetBlockHeaderByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockHeaderByIDRequest *>(to)->MergeFrom(
      static_cast<const GetBlockHeaderByIDRequest &>(from));
}


void GetBlockHeaderByIDRequest::MergeFrom(const GetBlockHeaderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.GetBlockHeaderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockHeaderByIDRequest::CopyFrom(const GetBlockHeaderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.GetBlockHeaderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderByIDRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderByIDRequest::InternalSwap(GetBlockHeaderByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderByIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[14]);
}

// ===================================================================

class BlockHeaderResponse::_Internal {
 public:
  static const ::flow::entities::BlockHeader& block(const BlockHeaderResponse* msg);
};

const ::flow::entities::BlockHeader&
BlockHeaderResponse::_Internal::block(const BlockHeaderResponse* msg) {
  return *msg->block_;
}
void BlockHeaderResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
BlockHeaderResponse::BlockHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.execution.BlockHeaderResponse)
}
BlockHeaderResponse::BlockHeaderResponse(const BlockHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::flow::entities::BlockHeader(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.execution.BlockHeaderResponse)
}

void BlockHeaderResponse::SharedCtor() {
block_ = nullptr;
}

BlockHeaderResponse::~BlockHeaderResponse() {
  // @@protoc_insertion_point(destructor:flow.execution.BlockHeaderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockHeaderResponse::ArenaDtor(void* object) {
  BlockHeaderResponse* _this = reinterpret_cast< BlockHeaderResponse* >(object);
  (void)_this;
}
void BlockHeaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.execution.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.BlockHeader block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeaderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.execution.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.BlockHeader block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.execution.BlockHeaderResponse)
  return target;
}

size_t BlockHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.execution.BlockHeaderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.BlockHeader block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeaderResponse::GetClassData() const { return &_class_data_; }

void BlockHeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockHeaderResponse *>(to)->MergeFrom(
      static_cast<const BlockHeaderResponse &>(from));
}


void BlockHeaderResponse::MergeFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.execution.BlockHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::flow::entities::BlockHeader::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeaderResponse::CopyFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.execution.BlockHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeaderResponse::IsInitialized() const {
  return true;
}

void BlockHeaderResponse::InternalSwap(BlockHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeaderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fexecution_2fexecution_2eproto_getter, &descriptor_table_flow_2fexecution_2fexecution_2eproto_once,
      file_level_metadata_flow_2fexecution_2fexecution_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace execution
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow::execution::PingRequest* Arena::CreateMaybeMessage< ::flow::execution::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::PingResponse* Arena::CreateMaybeMessage< ::flow::execution::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetAccountAtBlockIDRequest* Arena::CreateMaybeMessage< ::flow::execution::GetAccountAtBlockIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetAccountAtBlockIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetAccountAtBlockIDResponse* Arena::CreateMaybeMessage< ::flow::execution::GetAccountAtBlockIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetAccountAtBlockIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::ExecuteScriptAtBlockIDRequest* Arena::CreateMaybeMessage< ::flow::execution::ExecuteScriptAtBlockIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::ExecuteScriptAtBlockIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::ExecuteScriptAtBlockIDResponse* Arena::CreateMaybeMessage< ::flow::execution::ExecuteScriptAtBlockIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::ExecuteScriptAtBlockIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetEventsForBlockIDsResponse_Result* Arena::CreateMaybeMessage< ::flow::execution::GetEventsForBlockIDsResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetEventsForBlockIDsResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetEventsForBlockIDsResponse* Arena::CreateMaybeMessage< ::flow::execution::GetEventsForBlockIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetEventsForBlockIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetEventsForBlockIDsRequest* Arena::CreateMaybeMessage< ::flow::execution::GetEventsForBlockIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetEventsForBlockIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetTransactionResultRequest* Arena::CreateMaybeMessage< ::flow::execution::GetTransactionResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetTransactionResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetTransactionResultResponse* Arena::CreateMaybeMessage< ::flow::execution::GetTransactionResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetTransactionResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetRegisterAtBlockIDRequest* Arena::CreateMaybeMessage< ::flow::execution::GetRegisterAtBlockIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetRegisterAtBlockIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetRegisterAtBlockIDResponse* Arena::CreateMaybeMessage< ::flow::execution::GetRegisterAtBlockIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetRegisterAtBlockIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetLatestBlockHeaderRequest* Arena::CreateMaybeMessage< ::flow::execution::GetLatestBlockHeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetLatestBlockHeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::GetBlockHeaderByIDRequest* Arena::CreateMaybeMessage< ::flow::execution::GetBlockHeaderByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::GetBlockHeaderByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::execution::BlockHeaderResponse* Arena::CreateMaybeMessage< ::flow::execution::BlockHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::execution::BlockHeaderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
