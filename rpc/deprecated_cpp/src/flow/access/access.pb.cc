// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/access/access.proto

#include "flow/access/access.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow {
namespace access {
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_sealed_(false){}
struct GetLatestBlockHeaderRequestDefaultTypeInternal {
  constexpr GetLatestBlockHeaderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestBlockHeaderRequestDefaultTypeInternal() {}
  union {
    GetLatestBlockHeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestBlockHeaderRequestDefaultTypeInternal _GetLatestBlockHeaderRequest_default_instance_;
constexpr GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockHeaderByIDRequestDefaultTypeInternal {
  constexpr GetBlockHeaderByIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockHeaderByIDRequestDefaultTypeInternal() {}
  union {
    GetBlockHeaderByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockHeaderByIDRequestDefaultTypeInternal _GetBlockHeaderByIDRequest_default_instance_;
constexpr GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct GetBlockHeaderByHeightRequestDefaultTypeInternal {
  constexpr GetBlockHeaderByHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockHeaderByHeightRequestDefaultTypeInternal() {}
  union {
    GetBlockHeaderByHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockHeaderByHeightRequestDefaultTypeInternal _GetBlockHeaderByHeightRequest_default_instance_;
constexpr BlockHeaderResponse::BlockHeaderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockHeaderResponseDefaultTypeInternal {
  constexpr BlockHeaderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderResponseDefaultTypeInternal() {}
  union {
    BlockHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderResponseDefaultTypeInternal _BlockHeaderResponse_default_instance_;
constexpr GetLatestBlockRequest::GetLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_sealed_(false){}
struct GetLatestBlockRequestDefaultTypeInternal {
  constexpr GetLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestBlockRequestDefaultTypeInternal() {}
  union {
    GetLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestBlockRequestDefaultTypeInternal _GetLatestBlockRequest_default_instance_;
constexpr GetBlockByIDRequest::GetBlockByIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockByIDRequestDefaultTypeInternal {
  constexpr GetBlockByIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockByIDRequestDefaultTypeInternal() {}
  union {
    GetBlockByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockByIDRequestDefaultTypeInternal _GetBlockByIDRequest_default_instance_;
constexpr GetBlockByHeightRequest::GetBlockByHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct GetBlockByHeightRequestDefaultTypeInternal {
  constexpr GetBlockByHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockByHeightRequestDefaultTypeInternal() {}
  union {
    GetBlockByHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockByHeightRequestDefaultTypeInternal _GetBlockByHeightRequest_default_instance_;
constexpr BlockResponse::BlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockResponseDefaultTypeInternal {
  constexpr BlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponseDefaultTypeInternal() {}
  union {
    BlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
constexpr GetCollectionByIDRequest::GetCollectionByIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetCollectionByIDRequestDefaultTypeInternal {
  constexpr GetCollectionByIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCollectionByIDRequestDefaultTypeInternal() {}
  union {
    GetCollectionByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCollectionByIDRequestDefaultTypeInternal _GetCollectionByIDRequest_default_instance_;
constexpr CollectionResponse::CollectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_(nullptr){}
struct CollectionResponseDefaultTypeInternal {
  constexpr CollectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionResponseDefaultTypeInternal() {}
  union {
    CollectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionResponseDefaultTypeInternal _CollectionResponse_default_instance_;
constexpr SendTransactionRequest::SendTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct SendTransactionRequestDefaultTypeInternal {
  constexpr SendTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionRequestDefaultTypeInternal() {}
  union {
    SendTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionRequestDefaultTypeInternal _SendTransactionRequest_default_instance_;
constexpr SendTransactionResponse::SendTransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SendTransactionResponseDefaultTypeInternal {
  constexpr SendTransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionResponseDefaultTypeInternal() {}
  union {
    SendTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionResponseDefaultTypeInternal _SendTransactionResponse_default_instance_;
constexpr GetTransactionRequest::GetTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTransactionRequestDefaultTypeInternal {
  constexpr GetTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTransactionRequestDefaultTypeInternal() {}
  union {
    GetTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTransactionRequestDefaultTypeInternal _GetTransactionRequest_default_instance_;
constexpr TransactionResponse::TransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct TransactionResponseDefaultTypeInternal {
  constexpr TransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResponseDefaultTypeInternal() {}
  union {
    TransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
constexpr TransactionResultResponse::TransactionResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , status_code_(0u){}
struct TransactionResultResponseDefaultTypeInternal {
  constexpr TransactionResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResultResponseDefaultTypeInternal() {}
  union {
    TransactionResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResultResponseDefaultTypeInternal _TransactionResultResponse_default_instance_;
constexpr GetAccountRequest::GetAccountRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAccountRequestDefaultTypeInternal {
  constexpr GetAccountRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountRequestDefaultTypeInternal() {}
  union {
    GetAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountRequestDefaultTypeInternal _GetAccountRequest_default_instance_;
constexpr GetAccountResponse::GetAccountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(nullptr){}
struct GetAccountResponseDefaultTypeInternal {
  constexpr GetAccountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountResponseDefaultTypeInternal() {}
  union {
    GetAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountResponseDefaultTypeInternal _GetAccountResponse_default_instance_;
constexpr GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAccountAtLatestBlockRequestDefaultTypeInternal {
  constexpr GetAccountAtLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtLatestBlockRequestDefaultTypeInternal() {}
  union {
    GetAccountAtLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtLatestBlockRequestDefaultTypeInternal _GetAccountAtLatestBlockRequest_default_instance_;
constexpr AccountResponse::AccountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(nullptr){}
struct AccountResponseDefaultTypeInternal {
  constexpr AccountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResponseDefaultTypeInternal() {}
  union {
    AccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResponseDefaultTypeInternal _AccountResponse_default_instance_;
constexpr GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_height_(uint64_t{0u}){}
struct GetAccountAtBlockHeightRequestDefaultTypeInternal {
  constexpr GetAccountAtBlockHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtBlockHeightRequestDefaultTypeInternal() {}
  union {
    GetAccountAtBlockHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtBlockHeightRequestDefaultTypeInternal _GetAccountAtBlockHeightRequest_default_instance_;
constexpr ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtLatestBlockRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtLatestBlockRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtLatestBlockRequestDefaultTypeInternal _ExecuteScriptAtLatestBlockRequest_default_instance_;
constexpr ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtBlockIDRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockIDRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockIDRequestDefaultTypeInternal _ExecuteScriptAtBlockIDRequest_default_instance_;
constexpr ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_height_(uint64_t{0u}){}
struct ExecuteScriptAtBlockHeightRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockHeightRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockHeightRequestDefaultTypeInternal _ExecuteScriptAtBlockHeightRequest_default_instance_;
constexpr ExecuteScriptResponse::ExecuteScriptResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptResponseDefaultTypeInternal {
  constexpr ExecuteScriptResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptResponseDefaultTypeInternal() {}
  union {
    ExecuteScriptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptResponseDefaultTypeInternal _ExecuteScriptResponse_default_instance_;
constexpr GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_height_(uint64_t{0u})
  , end_height_(uint64_t{0u}){}
struct GetEventsForHeightRangeRequestDefaultTypeInternal {
  constexpr GetEventsForHeightRangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForHeightRangeRequestDefaultTypeInternal() {}
  union {
    GetEventsForHeightRangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForHeightRangeRequestDefaultTypeInternal _GetEventsForHeightRangeRequest_default_instance_;
constexpr GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_ids_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEventsForBlockIDsRequestDefaultTypeInternal {
  constexpr GetEventsForBlockIDsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForBlockIDsRequestDefaultTypeInternal() {}
  union {
    GetEventsForBlockIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForBlockIDsRequestDefaultTypeInternal _GetEventsForBlockIDsRequest_default_instance_;
constexpr EventsResponse_Result::EventsResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_timestamp_(nullptr)
  , block_height_(uint64_t{0u}){}
struct EventsResponse_ResultDefaultTypeInternal {
  constexpr EventsResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsResponse_ResultDefaultTypeInternal() {}
  union {
    EventsResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsResponse_ResultDefaultTypeInternal _EventsResponse_Result_default_instance_;
constexpr EventsResponse::EventsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct EventsResponseDefaultTypeInternal {
  constexpr EventsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;
constexpr GetNetworkParametersRequest::GetNetworkParametersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetNetworkParametersRequestDefaultTypeInternal {
  constexpr GetNetworkParametersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetworkParametersRequestDefaultTypeInternal() {}
  union {
    GetNetworkParametersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetworkParametersRequestDefaultTypeInternal _GetNetworkParametersRequest_default_instance_;
constexpr GetNetworkParametersResponse::GetNetworkParametersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetNetworkParametersResponseDefaultTypeInternal {
  constexpr GetNetworkParametersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetworkParametersResponseDefaultTypeInternal() {}
  union {
    GetNetworkParametersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetworkParametersResponseDefaultTypeInternal _GetNetworkParametersResponse_default_instance_;
constexpr GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLatestProtocolStateSnapshotRequestDefaultTypeInternal {
  constexpr GetLatestProtocolStateSnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestProtocolStateSnapshotRequestDefaultTypeInternal() {}
  union {
    GetLatestProtocolStateSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestProtocolStateSnapshotRequestDefaultTypeInternal _GetLatestProtocolStateSnapshotRequest_default_instance_;
constexpr ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serializedsnapshot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProtocolStateSnapshotResponseDefaultTypeInternal {
  constexpr ProtocolStateSnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolStateSnapshotResponseDefaultTypeInternal() {}
  union {
    ProtocolStateSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolStateSnapshotResponseDefaultTypeInternal _ProtocolStateSnapshotResponse_default_instance_;
constexpr GetExecutionResultForBlockIDRequest::GetExecutionResultForBlockIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetExecutionResultForBlockIDRequestDefaultTypeInternal {
  constexpr GetExecutionResultForBlockIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExecutionResultForBlockIDRequestDefaultTypeInternal() {}
  union {
    GetExecutionResultForBlockIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExecutionResultForBlockIDRequestDefaultTypeInternal _GetExecutionResultForBlockIDRequest_default_instance_;
constexpr ExecutionResultForBlockIDResponse::ExecutionResultForBlockIDResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_result_(nullptr){}
struct ExecutionResultForBlockIDResponseDefaultTypeInternal {
  constexpr ExecutionResultForBlockIDResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionResultForBlockIDResponseDefaultTypeInternal() {}
  union {
    ExecutionResultForBlockIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionResultForBlockIDResponseDefaultTypeInternal _ExecutionResultForBlockIDResponse_default_instance_;
}  // namespace access
}  // namespace flow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2faccess_2faccess_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_2faccess_2faccess_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2faccess_2faccess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2faccess_2faccess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockHeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockHeaderRequest, is_sealed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByHeightRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeaderResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockRequest, is_sealed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByHeightRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetCollectionByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetCollectionByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionResponse, collection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetTransactionRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, status_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, events_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtLatestBlockRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, address_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtLatestBlockRequest, script_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtLatestBlockRequest, arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIDRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIDRequest, script_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIDRequest, arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, block_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, script_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, start_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, end_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIDsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIDsRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, events_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersResponse, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestProtocolStateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ProtocolStateSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ProtocolStateSnapshotResponse, serializedsnapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetExecutionResultForBlockIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetExecutionResultForBlockIDRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResultForBlockIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResultForBlockIDResponse, execution_result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flow::access::PingRequest)},
  { 6, -1, -1, sizeof(::flow::access::PingResponse)},
  { 12, -1, -1, sizeof(::flow::access::GetLatestBlockHeaderRequest)},
  { 19, -1, -1, sizeof(::flow::access::GetBlockHeaderByIDRequest)},
  { 26, -1, -1, sizeof(::flow::access::GetBlockHeaderByHeightRequest)},
  { 33, -1, -1, sizeof(::flow::access::BlockHeaderResponse)},
  { 40, -1, -1, sizeof(::flow::access::GetLatestBlockRequest)},
  { 47, -1, -1, sizeof(::flow::access::GetBlockByIDRequest)},
  { 54, -1, -1, sizeof(::flow::access::GetBlockByHeightRequest)},
  { 61, -1, -1, sizeof(::flow::access::BlockResponse)},
  { 68, -1, -1, sizeof(::flow::access::GetCollectionByIDRequest)},
  { 75, -1, -1, sizeof(::flow::access::CollectionResponse)},
  { 82, -1, -1, sizeof(::flow::access::SendTransactionRequest)},
  { 89, -1, -1, sizeof(::flow::access::SendTransactionResponse)},
  { 96, -1, -1, sizeof(::flow::access::GetTransactionRequest)},
  { 103, -1, -1, sizeof(::flow::access::TransactionResponse)},
  { 110, -1, -1, sizeof(::flow::access::TransactionResultResponse)},
  { 121, -1, -1, sizeof(::flow::access::GetAccountRequest)},
  { 128, -1, -1, sizeof(::flow::access::GetAccountResponse)},
  { 135, -1, -1, sizeof(::flow::access::GetAccountAtLatestBlockRequest)},
  { 142, -1, -1, sizeof(::flow::access::AccountResponse)},
  { 149, -1, -1, sizeof(::flow::access::GetAccountAtBlockHeightRequest)},
  { 157, -1, -1, sizeof(::flow::access::ExecuteScriptAtLatestBlockRequest)},
  { 165, -1, -1, sizeof(::flow::access::ExecuteScriptAtBlockIDRequest)},
  { 174, -1, -1, sizeof(::flow::access::ExecuteScriptAtBlockHeightRequest)},
  { 183, -1, -1, sizeof(::flow::access::ExecuteScriptResponse)},
  { 190, -1, -1, sizeof(::flow::access::GetEventsForHeightRangeRequest)},
  { 199, -1, -1, sizeof(::flow::access::GetEventsForBlockIDsRequest)},
  { 207, -1, -1, sizeof(::flow::access::EventsResponse_Result)},
  { 217, -1, -1, sizeof(::flow::access::EventsResponse)},
  { 224, -1, -1, sizeof(::flow::access::GetNetworkParametersRequest)},
  { 230, -1, -1, sizeof(::flow::access::GetNetworkParametersResponse)},
  { 237, -1, -1, sizeof(::flow::access::GetLatestProtocolStateSnapshotRequest)},
  { 243, -1, -1, sizeof(::flow::access::ProtocolStateSnapshotResponse)},
  { 250, -1, -1, sizeof(::flow::access::GetExecutionResultForBlockIDRequest)},
  { 257, -1, -1, sizeof(::flow::access::ExecutionResultForBlockIDResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestBlockHeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockHeaderByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockHeaderByHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockHeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockByHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetCollectionByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_CollectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_SendTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_SendTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountAtLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_AccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountAtBlockHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtBlockIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtBlockHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetEventsForHeightRangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetEventsForBlockIDsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_EventsResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_EventsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetNetworkParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetNetworkParametersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestProtocolStateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ProtocolStateSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetExecutionResultForBlockIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecutionResultForBlockIDResponse_default_instance_),
};

const char descriptor_table_protodef_flow_2faccess_2faccess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030flow/access/access.proto\022\013flow.access\032"
  "\033flow/entities/account.proto\032 flow/entit"
  "ies/block_header.proto\032\031flow/entities/bl"
  "ock.proto\032\036flow/entities/collection.prot"
  "o\032\031flow/entities/event.proto\032$flow/entit"
  "ies/execution_result.proto\032\037flow/entitie"
  "s/transaction.proto\032\037google/protobuf/tim"
  "estamp.proto\"\r\n\013PingRequest\"\016\n\014PingRespo"
  "nse\"0\n\033GetLatestBlockHeaderRequest\022\021\n\tis"
  "_sealed\030\001 \001(\010\"\'\n\031GetBlockHeaderByIDReque"
  "st\022\n\n\002id\030\001 \001(\014\"/\n\035GetBlockHeaderByHeight"
  "Request\022\016\n\006height\030\001 \001(\004\"@\n\023BlockHeaderRe"
  "sponse\022)\n\005block\030\001 \001(\0132\032.flow.entities.Bl"
  "ockHeader\"*\n\025GetLatestBlockRequest\022\021\n\tis"
  "_sealed\030\001 \001(\010\"!\n\023GetBlockByIDRequest\022\n\n\002"
  "id\030\001 \001(\014\")\n\027GetBlockByHeightRequest\022\016\n\006h"
  "eight\030\001 \001(\004\"4\n\rBlockResponse\022#\n\005block\030\001 "
  "\001(\0132\024.flow.entities.Block\"&\n\030GetCollecti"
  "onByIDRequest\022\n\n\002id\030\001 \001(\014\"C\n\022CollectionR"
  "esponse\022-\n\ncollection\030\001 \001(\0132\031.flow.entit"
  "ies.Collection\"I\n\026SendTransactionRequest"
  "\022/\n\013transaction\030\001 \001(\0132\032.flow.entities.Tr"
  "ansaction\"%\n\027SendTransactionResponse\022\n\n\002"
  "id\030\001 \001(\014\"#\n\025GetTransactionRequest\022\n\n\002id\030"
  "\001 \001(\014\"F\n\023TransactionResponse\022/\n\013transact"
  "ion\030\001 \001(\0132\032.flow.entities.Transaction\"\261\001"
  "\n\031TransactionResultResponse\0220\n\006status\030\001 "
  "\001(\0162 .flow.entities.TransactionStatus\022\023\n"
  "\013status_code\030\002 \001(\r\022\025\n\rerror_message\030\003 \001("
  "\t\022$\n\006events\030\004 \003(\0132\024.flow.entities.Event\022"
  "\020\n\010block_id\030\005 \001(\014\"$\n\021GetAccountRequest\022\017"
  "\n\007address\030\001 \001(\014\"=\n\022GetAccountResponse\022\'\n"
  "\007account\030\001 \001(\0132\026.flow.entities.Account\"1"
  "\n\036GetAccountAtLatestBlockRequest\022\017\n\007addr"
  "ess\030\001 \001(\014\":\n\017AccountResponse\022\'\n\007account\030"
  "\001 \001(\0132\026.flow.entities.Account\"G\n\036GetAcco"
  "untAtBlockHeightRequest\022\017\n\007address\030\001 \001(\014"
  "\022\024\n\014block_height\030\002 \001(\004\"F\n!ExecuteScriptA"
  "tLatestBlockRequest\022\016\n\006script\030\001 \001(\014\022\021\n\ta"
  "rguments\030\002 \003(\014\"T\n\035ExecuteScriptAtBlockID"
  "Request\022\020\n\010block_id\030\001 \001(\014\022\016\n\006script\030\002 \001("
  "\014\022\021\n\targuments\030\003 \003(\014\"\\\n!ExecuteScriptAtB"
  "lockHeightRequest\022\024\n\014block_height\030\001 \001(\004\022"
  "\016\n\006script\030\002 \001(\014\022\021\n\targuments\030\003 \003(\014\"&\n\025Ex"
  "ecuteScriptResponse\022\r\n\005value\030\001 \001(\014\"X\n\036Ge"
  "tEventsForHeightRangeRequest\022\014\n\004type\030\001 \001"
  "(\t\022\024\n\014start_height\030\002 \001(\004\022\022\n\nend_height\030\003"
  " \001(\004\">\n\033GetEventsForBlockIDsRequest\022\014\n\004t"
  "ype\030\001 \001(\t\022\021\n\tblock_ids\030\002 \003(\014\"\323\001\n\016EventsR"
  "esponse\0223\n\007results\030\001 \003(\0132\".flow.access.E"
  "ventsResponse.Result\032\213\001\n\006Result\022\020\n\010block"
  "_id\030\001 \001(\014\022\024\n\014block_height\030\002 \001(\004\022$\n\006event"
  "s\030\003 \003(\0132\024.flow.entities.Event\0223\n\017block_t"
  "imestamp\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mp\"\035\n\033GetNetworkParametersRequest\"0\n\034Get"
  "NetworkParametersResponse\022\020\n\010chain_id\030\001 "
  "\001(\t\"\'\n%GetLatestProtocolStateSnapshotReq"
  "uest\";\n\035ProtocolStateSnapshotResponse\022\032\n"
  "\022serializedSnapshot\030\001 \001(\014\"7\n#GetExecutio"
  "nResultForBlockIDRequest\022\020\n\010block_id\030\001 \001"
  "(\014\"]\n!ExecutionResultForBlockIDResponse\022"
  "8\n\020execution_result\030\001 \001(\0132\036.flow.entitie"
  "s.ExecutionResult2\201\021\n\tAccessAPI\022;\n\004Ping\022"
  "\030.flow.access.PingRequest\032\031.flow.access."
  "PingResponse\022b\n\024GetLatestBlockHeader\022(.f"
  "low.access.GetLatestBlockHeaderRequest\032 "
  ".flow.access.BlockHeaderResponse\022^\n\022GetB"
  "lockHeaderByID\022&.flow.access.GetBlockHea"
  "derByIDRequest\032 .flow.access.BlockHeader"
  "Response\022f\n\026GetBlockHeaderByHeight\022*.flo"
  "w.access.GetBlockHeaderByHeightRequest\032 "
  ".flow.access.BlockHeaderResponse\022P\n\016GetL"
  "atestBlock\022\".flow.access.GetLatestBlockR"
  "equest\032\032.flow.access.BlockResponse\022L\n\014Ge"
  "tBlockByID\022 .flow.access.GetBlockByIDReq"
  "uest\032\032.flow.access.BlockResponse\022T\n\020GetB"
  "lockByHeight\022$.flow.access.GetBlockByHei"
  "ghtRequest\032\032.flow.access.BlockResponse\022["
  "\n\021GetCollectionByID\022%.flow.access.GetCol"
  "lectionByIDRequest\032\037.flow.access.Collect"
  "ionResponse\022\\\n\017SendTransaction\022#.flow.ac"
  "cess.SendTransactionRequest\032$.flow.acces"
  "s.SendTransactionResponse\022V\n\016GetTransact"
  "ion\022\".flow.access.GetTransactionRequest\032"
  " .flow.access.TransactionResponse\022b\n\024Get"
  "TransactionResult\022\".flow.access.GetTrans"
  "actionRequest\032&.flow.access.TransactionR"
  "esultResponse\022M\n\nGetAccount\022\036.flow.acces"
  "s.GetAccountRequest\032\037.flow.access.GetAcc"
  "ountResponse\022d\n\027GetAccountAtLatestBlock\022"
  "+.flow.access.GetAccountAtLatestBlockReq"
  "uest\032\034.flow.access.AccountResponse\022d\n\027Ge"
  "tAccountAtBlockHeight\022+.flow.access.GetA"
  "ccountAtBlockHeightRequest\032\034.flow.access"
  ".AccountResponse\022p\n\032ExecuteScriptAtLates"
  "tBlock\022..flow.access.ExecuteScriptAtLate"
  "stBlockRequest\032\".flow.access.ExecuteScri"
  "ptResponse\022h\n\026ExecuteScriptAtBlockID\022*.f"
  "low.access.ExecuteScriptAtBlockIDRequest"
  "\032\".flow.access.ExecuteScriptResponse\022p\n\032"
  "ExecuteScriptAtBlockHeight\022..flow.access"
  ".ExecuteScriptAtBlockHeightRequest\032\".flo"
  "w.access.ExecuteScriptResponse\022c\n\027GetEve"
  "ntsForHeightRange\022+.flow.access.GetEvent"
  "sForHeightRangeRequest\032\033.flow.access.Eve"
  "ntsResponse\022]\n\024GetEventsForBlockIDs\022(.fl"
  "ow.access.GetEventsForBlockIDsRequest\032\033."
  "flow.access.EventsResponse\022k\n\024GetNetwork"
  "Parameters\022(.flow.access.GetNetworkParam"
  "etersRequest\032).flow.access.GetNetworkPar"
  "ametersResponse\022\200\001\n\036GetLatestProtocolSta"
  "teSnapshot\0222.flow.access.GetLatestProtoc"
  "olStateSnapshotRequest\032*.flow.access.Pro"
  "tocolStateSnapshotResponse\022\200\001\n\034GetExecut"
  "ionResultForBlockID\0220.flow.access.GetExe"
  "cutionResultForBlockIDRequest\032..flow.acc"
  "ess.ExecutionResultForBlockIDResponseBL\n"
  "\032org.onflow.protobuf.accessZ.github.com/"
  "onflow/flow/protobuf/go/flow/accessb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flow_2faccess_2faccess_2eproto_deps[8] = {
  &::descriptor_table_flow_2fentities_2faccount_2eproto,
  &::descriptor_table_flow_2fentities_2fblock_2eproto,
  &::descriptor_table_flow_2fentities_2fblock_5fheader_2eproto,
  &::descriptor_table_flow_2fentities_2fcollection_2eproto,
  &::descriptor_table_flow_2fentities_2fevent_2eproto,
  &::descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto,
  &::descriptor_table_flow_2fentities_2ftransaction_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2faccess_2faccess_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2faccess_2faccess_2eproto = {
  false, false, 4763, descriptor_table_protodef_flow_2faccess_2faccess_2eproto, "flow/access/access.proto", 
  &descriptor_table_flow_2faccess_2faccess_2eproto_once, descriptor_table_flow_2faccess_2faccess_2eproto_deps, 8, 36,
  schemas, file_default_instances, TableStruct_flow_2faccess_2faccess_2eproto::offsets,
  file_level_metadata_flow_2faccess_2faccess_2eproto, file_level_enum_descriptors_flow_2faccess_2faccess_2eproto, file_level_service_descriptors_flow_2faccess_2faccess_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flow_2faccess_2faccess_2eproto_getter() {
  return &descriptor_table_flow_2faccess_2faccess_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_2faccess_2faccess_2eproto(&descriptor_table_flow_2faccess_2faccess_2eproto);
namespace flow {
namespace access {

// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.access.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.PingRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[0]);
}

// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.access.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.PingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[1]);
}

// ===================================================================

class GetLatestBlockHeaderRequest::_Internal {
 public:
};

GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestBlockHeaderRequest)
}
GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(const GetLatestBlockHeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_sealed_ = from.is_sealed_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestBlockHeaderRequest)
}

void GetLatestBlockHeaderRequest::SharedCtor() {
is_sealed_ = false;
}

GetLatestBlockHeaderRequest::~GetLatestBlockHeaderRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetLatestBlockHeaderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLatestBlockHeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLatestBlockHeaderRequest::ArenaDtor(void* object) {
  GetLatestBlockHeaderRequest* _this = reinterpret_cast< GetLatestBlockHeaderRequest* >(object);
  (void)_this;
}
void GetLatestBlockHeaderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestBlockHeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestBlockHeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_sealed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestBlockHeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_sealed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestBlockHeaderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sealed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetLatestBlockHeaderRequest)
  return target;
}

size_t GetLatestBlockHeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetLatestBlockHeaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLatestBlockHeaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLatestBlockHeaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLatestBlockHeaderRequest::GetClassData() const { return &_class_data_; }

void GetLatestBlockHeaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLatestBlockHeaderRequest *>(to)->MergeFrom(
      static_cast<const GetLatestBlockHeaderRequest &>(from));
}


void GetLatestBlockHeaderRequest::MergeFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetLatestBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_sealed() != 0) {
    _internal_set_is_sealed(from._internal_is_sealed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLatestBlockHeaderRequest::CopyFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetLatestBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestBlockHeaderRequest::IsInitialized() const {
  return true;
}

void GetLatestBlockHeaderRequest::InternalSwap(GetLatestBlockHeaderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_sealed_, other->is_sealed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestBlockHeaderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[2]);
}

// ===================================================================

class GetBlockHeaderByIDRequest::_Internal {
 public:
};

GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockHeaderByIDRequest)
}
GetBlockHeaderByIDRequest::GetBlockHeaderByIDRequest(const GetBlockHeaderByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockHeaderByIDRequest)
}

void GetBlockHeaderByIDRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockHeaderByIDRequest::~GetBlockHeaderByIDRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockHeaderByIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockHeaderByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockHeaderByIDRequest::ArenaDtor(void* object) {
  GetBlockHeaderByIDRequest* _this = reinterpret_cast< GetBlockHeaderByIDRequest* >(object);
  (void)_this;
}
void GetBlockHeaderByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaderByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockHeaderByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockHeaderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaderByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockHeaderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockHeaderByIDRequest)
  return target;
}

size_t GetBlockHeaderByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockHeaderByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockHeaderByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockHeaderByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockHeaderByIDRequest::GetClassData() const { return &_class_data_; }

void GetBlockHeaderByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockHeaderByIDRequest *>(to)->MergeFrom(
      static_cast<const GetBlockHeaderByIDRequest &>(from));
}


void GetBlockHeaderByIDRequest::MergeFrom(const GetBlockHeaderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockHeaderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockHeaderByIDRequest::CopyFrom(const GetBlockHeaderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockHeaderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderByIDRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderByIDRequest::InternalSwap(GetBlockHeaderByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderByIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[3]);
}

// ===================================================================

class GetBlockHeaderByHeightRequest::_Internal {
 public:
};

GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockHeaderByHeightRequest)
}
GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(const GetBlockHeaderByHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockHeaderByHeightRequest)
}

void GetBlockHeaderByHeightRequest::SharedCtor() {
height_ = uint64_t{0u};
}

GetBlockHeaderByHeightRequest::~GetBlockHeaderByHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockHeaderByHeightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockHeaderByHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBlockHeaderByHeightRequest::ArenaDtor(void* object) {
  GetBlockHeaderByHeightRequest* _this = reinterpret_cast< GetBlockHeaderByHeightRequest* >(object);
  (void)_this;
}
void GetBlockHeaderByHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaderByHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockHeaderByHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockHeaderByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaderByHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderByHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockHeaderByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockHeaderByHeightRequest)
  return target;
}

size_t GetBlockHeaderByHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockHeaderByHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockHeaderByHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockHeaderByHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockHeaderByHeightRequest::GetClassData() const { return &_class_data_; }

void GetBlockHeaderByHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockHeaderByHeightRequest *>(to)->MergeFrom(
      static_cast<const GetBlockHeaderByHeightRequest &>(from));
}


void GetBlockHeaderByHeightRequest::MergeFrom(const GetBlockHeaderByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockHeaderByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockHeaderByHeightRequest::CopyFrom(const GetBlockHeaderByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockHeaderByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderByHeightRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderByHeightRequest::InternalSwap(GetBlockHeaderByHeightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderByHeightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[4]);
}

// ===================================================================

class BlockHeaderResponse::_Internal {
 public:
  static const ::flow::entities::BlockHeader& block(const BlockHeaderResponse* msg);
};

const ::flow::entities::BlockHeader&
BlockHeaderResponse::_Internal::block(const BlockHeaderResponse* msg) {
  return *msg->block_;
}
void BlockHeaderResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
BlockHeaderResponse::BlockHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockHeaderResponse)
}
BlockHeaderResponse::BlockHeaderResponse(const BlockHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::flow::entities::BlockHeader(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockHeaderResponse)
}

void BlockHeaderResponse::SharedCtor() {
block_ = nullptr;
}

BlockHeaderResponse::~BlockHeaderResponse() {
  // @@protoc_insertion_point(destructor:flow.access.BlockHeaderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockHeaderResponse::ArenaDtor(void* object) {
  BlockHeaderResponse* _this = reinterpret_cast< BlockHeaderResponse* >(object);
  (void)_this;
}
void BlockHeaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.BlockHeader block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeaderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.BlockHeader block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockHeaderResponse)
  return target;
}

size_t BlockHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockHeaderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.BlockHeader block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeaderResponse::GetClassData() const { return &_class_data_; }

void BlockHeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockHeaderResponse *>(to)->MergeFrom(
      static_cast<const BlockHeaderResponse &>(from));
}


void BlockHeaderResponse::MergeFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::flow::entities::BlockHeader::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeaderResponse::CopyFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeaderResponse::IsInitialized() const {
  return true;
}

void BlockHeaderResponse::InternalSwap(BlockHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeaderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[5]);
}

// ===================================================================

class GetLatestBlockRequest::_Internal {
 public:
};

GetLatestBlockRequest::GetLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestBlockRequest)
}
GetLatestBlockRequest::GetLatestBlockRequest(const GetLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_sealed_ = from.is_sealed_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestBlockRequest)
}

void GetLatestBlockRequest::SharedCtor() {
is_sealed_ = false;
}

GetLatestBlockRequest::~GetLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetLatestBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLatestBlockRequest::ArenaDtor(void* object) {
  GetLatestBlockRequest* _this = reinterpret_cast< GetLatestBlockRequest* >(object);
  (void)_this;
}
void GetLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_sealed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_sealed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sealed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetLatestBlockRequest)
  return target;
}

size_t GetLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->_internal_is_sealed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLatestBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLatestBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLatestBlockRequest::GetClassData() const { return &_class_data_; }

void GetLatestBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLatestBlockRequest *>(to)->MergeFrom(
      static_cast<const GetLatestBlockRequest &>(from));
}


void GetLatestBlockRequest::MergeFrom(const GetLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_sealed() != 0) {
    _internal_set_is_sealed(from._internal_is_sealed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLatestBlockRequest::CopyFrom(const GetLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestBlockRequest::IsInitialized() const {
  return true;
}

void GetLatestBlockRequest::InternalSwap(GetLatestBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_sealed_, other->is_sealed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[6]);
}

// ===================================================================

class GetBlockByIDRequest::_Internal {
 public:
};

GetBlockByIDRequest::GetBlockByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockByIDRequest)
}
GetBlockByIDRequest::GetBlockByIDRequest(const GetBlockByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockByIDRequest)
}

void GetBlockByIDRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockByIDRequest::~GetBlockByIDRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockByIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockByIDRequest::ArenaDtor(void* object) {
  GetBlockByIDRequest* _this = reinterpret_cast< GetBlockByIDRequest* >(object);
  (void)_this;
}
void GetBlockByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockByIDRequest)
  return target;
}

size_t GetBlockByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockByIDRequest::GetClassData() const { return &_class_data_; }

void GetBlockByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockByIDRequest *>(to)->MergeFrom(
      static_cast<const GetBlockByIDRequest &>(from));
}


void GetBlockByIDRequest::MergeFrom(const GetBlockByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockByIDRequest::CopyFrom(const GetBlockByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockByIDRequest::IsInitialized() const {
  return true;
}

void GetBlockByIDRequest::InternalSwap(GetBlockByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockByIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[7]);
}

// ===================================================================

class GetBlockByHeightRequest::_Internal {
 public:
};

GetBlockByHeightRequest::GetBlockByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockByHeightRequest)
}
GetBlockByHeightRequest::GetBlockByHeightRequest(const GetBlockByHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockByHeightRequest)
}

void GetBlockByHeightRequest::SharedCtor() {
height_ = uint64_t{0u};
}

GetBlockByHeightRequest::~GetBlockByHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockByHeightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockByHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBlockByHeightRequest::ArenaDtor(void* object) {
  GetBlockByHeightRequest* _this = reinterpret_cast< GetBlockByHeightRequest* >(object);
  (void)_this;
}
void GetBlockByHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockByHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockByHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockByHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockByHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockByHeightRequest)
  return target;
}

size_t GetBlockByHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockByHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockByHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockByHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockByHeightRequest::GetClassData() const { return &_class_data_; }

void GetBlockByHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockByHeightRequest *>(to)->MergeFrom(
      static_cast<const GetBlockByHeightRequest &>(from));
}


void GetBlockByHeightRequest::MergeFrom(const GetBlockByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockByHeightRequest::CopyFrom(const GetBlockByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockByHeightRequest::IsInitialized() const {
  return true;
}

void GetBlockByHeightRequest::InternalSwap(GetBlockByHeightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockByHeightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[8]);
}

// ===================================================================

class BlockResponse::_Internal {
 public:
  static const ::flow::entities::Block& block(const BlockResponse* msg);
};

const ::flow::entities::Block&
BlockResponse::_Internal::block(const BlockResponse* msg) {
  return *msg->block_;
}
void BlockResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::flow::entities::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockResponse)
}

void BlockResponse::SharedCtor() {
block_ = nullptr;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:flow.access.BlockResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockResponse::GetClassData() const { return &_class_data_; }

void BlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockResponse *>(to)->MergeFrom(
      static_cast<const BlockResponse &>(from));
}


void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::flow::entities::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[9]);
}

// ===================================================================

class GetCollectionByIDRequest::_Internal {
 public:
};

GetCollectionByIDRequest::GetCollectionByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetCollectionByIDRequest)
}
GetCollectionByIDRequest::GetCollectionByIDRequest(const GetCollectionByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetCollectionByIDRequest)
}

void GetCollectionByIDRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCollectionByIDRequest::~GetCollectionByIDRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetCollectionByIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCollectionByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollectionByIDRequest::ArenaDtor(void* object) {
  GetCollectionByIDRequest* _this = reinterpret_cast< GetCollectionByIDRequest* >(object);
  (void)_this;
}
void GetCollectionByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCollectionByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCollectionByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetCollectionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetCollectionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetCollectionByIDRequest)
  return target;
}

size_t GetCollectionByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetCollectionByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectionByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCollectionByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectionByIDRequest::GetClassData() const { return &_class_data_; }

void GetCollectionByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCollectionByIDRequest *>(to)->MergeFrom(
      static_cast<const GetCollectionByIDRequest &>(from));
}


void GetCollectionByIDRequest::MergeFrom(const GetCollectionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetCollectionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectionByIDRequest::CopyFrom(const GetCollectionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetCollectionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionByIDRequest::IsInitialized() const {
  return true;
}

void GetCollectionByIDRequest::InternalSwap(GetCollectionByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionByIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[10]);
}

// ===================================================================

class CollectionResponse::_Internal {
 public:
  static const ::flow::entities::Collection& collection(const CollectionResponse* msg);
};

const ::flow::entities::Collection&
CollectionResponse::_Internal::collection(const CollectionResponse* msg) {
  return *msg->collection_;
}
void CollectionResponse::clear_collection() {
  if (GetArenaForAllocation() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
}
CollectionResponse::CollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.CollectionResponse)
}
CollectionResponse::CollectionResponse(const CollectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_collection()) {
    collection_ = new ::flow::entities::Collection(*from.collection_);
  } else {
    collection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.CollectionResponse)
}

void CollectionResponse::SharedCtor() {
collection_ = nullptr;
}

CollectionResponse::~CollectionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.CollectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete collection_;
}

void CollectionResponse::ArenaDtor(void* object) {
  CollectionResponse* _this = reinterpret_cast< CollectionResponse* >(object);
  (void)_this;
}
void CollectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.CollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Collection collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.CollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Collection collection = 1;
  if (this->_internal_has_collection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::collection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.CollectionResponse)
  return target;
}

size_t CollectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.CollectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Collection collection = 1;
  if (this->_internal_has_collection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionResponse::GetClassData() const { return &_class_data_; }

void CollectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollectionResponse *>(to)->MergeFrom(
      static_cast<const CollectionResponse &>(from));
}


void CollectionResponse::MergeFrom(const CollectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.CollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_collection()) {
    _internal_mutable_collection()->::flow::entities::Collection::MergeFrom(from._internal_collection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionResponse::CopyFrom(const CollectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.CollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionResponse::IsInitialized() const {
  return true;
}

void CollectionResponse::InternalSwap(CollectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(collection_, other->collection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[11]);
}

// ===================================================================

class SendTransactionRequest::_Internal {
 public:
  static const ::flow::entities::Transaction& transaction(const SendTransactionRequest* msg);
};

const ::flow::entities::Transaction&
SendTransactionRequest::_Internal::transaction(const SendTransactionRequest* msg) {
  return *msg->transaction_;
}
void SendTransactionRequest::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
SendTransactionRequest::SendTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.SendTransactionRequest)
}
SendTransactionRequest::SendTransactionRequest(const SendTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::flow::entities::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.SendTransactionRequest)
}

void SendTransactionRequest::SharedCtor() {
transaction_ = nullptr;
}

SendTransactionRequest::~SendTransactionRequest() {
  // @@protoc_insertion_point(destructor:flow.access.SendTransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void SendTransactionRequest::ArenaDtor(void* object) {
  SendTransactionRequest* _this = reinterpret_cast< SendTransactionRequest* >(object);
  (void)_this;
}
void SendTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.SendTransactionRequest)
  return target;
}

size_t SendTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.SendTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTransactionRequest::GetClassData() const { return &_class_data_; }

void SendTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendTransactionRequest *>(to)->MergeFrom(
      static_cast<const SendTransactionRequest &>(from));
}


void SendTransactionRequest::MergeFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.SendTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::flow::entities::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTransactionRequest::CopyFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.SendTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionRequest::IsInitialized() const {
  return true;
}

void SendTransactionRequest::InternalSwap(SendTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[12]);
}

// ===================================================================

class SendTransactionResponse::_Internal {
 public:
};

SendTransactionResponse::SendTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.SendTransactionResponse)
}
SendTransactionResponse::SendTransactionResponse(const SendTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.SendTransactionResponse)
}

void SendTransactionResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendTransactionResponse::~SendTransactionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.SendTransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTransactionResponse::ArenaDtor(void* object) {
  SendTransactionResponse* _this = reinterpret_cast< SendTransactionResponse* >(object);
  (void)_this;
}
void SendTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.SendTransactionResponse)
  return target;
}

size_t SendTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.SendTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTransactionResponse::GetClassData() const { return &_class_data_; }

void SendTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendTransactionResponse *>(to)->MergeFrom(
      static_cast<const SendTransactionResponse &>(from));
}


void SendTransactionResponse::MergeFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.SendTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTransactionResponse::CopyFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.SendTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionResponse::IsInitialized() const {
  return true;
}

void SendTransactionResponse::InternalSwap(SendTransactionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[13]);
}

// ===================================================================

class GetTransactionRequest::_Internal {
 public:
};

GetTransactionRequest::GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetTransactionRequest)
}
GetTransactionRequest::GetTransactionRequest(const GetTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetTransactionRequest)
}

void GetTransactionRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTransactionRequest::~GetTransactionRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetTransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionRequest::ArenaDtor(void* object) {
  GetTransactionRequest* _this = reinterpret_cast< GetTransactionRequest* >(object);
  (void)_this;
}
void GetTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetTransactionRequest)
  return target;
}

size_t GetTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTransactionRequest::GetClassData() const { return &_class_data_; }

void GetTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTransactionRequest *>(to)->MergeFrom(
      static_cast<const GetTransactionRequest &>(from));
}


void GetTransactionRequest::MergeFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTransactionRequest::CopyFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionRequest::IsInitialized() const {
  return true;
}

void GetTransactionRequest::InternalSwap(GetTransactionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[14]);
}

// ===================================================================

class TransactionResponse::_Internal {
 public:
  static const ::flow::entities::Transaction& transaction(const TransactionResponse* msg);
};

const ::flow::entities::Transaction&
TransactionResponse::_Internal::transaction(const TransactionResponse* msg) {
  return *msg->transaction_;
}
void TransactionResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::flow::entities::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionResponse)
}

void TransactionResponse::SharedCtor() {
transaction_ = nullptr;
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
}
void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionResponse::GetClassData() const { return &_class_data_; }

void TransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionResponse *>(to)->MergeFrom(
      static_cast<const TransactionResponse &>(from));
}


void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::flow::entities::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[15]);
}

// ===================================================================

class TransactionResultResponse::_Internal {
 public:
};

void TransactionResultResponse::clear_events() {
  events_.Clear();
}
TransactionResultResponse::TransactionResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionResultResponse)
}
TransactionResultResponse::TransactionResultResponse(const TransactionResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionResultResponse)
}

void TransactionResultResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

TransactionResultResponse::~TransactionResultResponse() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionResultResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionResultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionResultResponse::ArenaDtor(void* object) {
  TransactionResultResponse* _this = reinterpret_cast< TransactionResultResponse* >(object);
  (void)_this;
}
void TransactionResultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  error_message_.ClearToEmpty();
  block_id_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.TransactionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::flow::entities::TransactionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.TransactionResultResponse.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.Event events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes block_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResultResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.TransactionStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint32 status_code = 2;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status_code(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.TransactionResultResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // repeated .flow.entities.Event events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_events(i), target, stream);
  }

  // bytes block_id = 5;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionResultResponse)
  return target;
}

size_t TransactionResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionResultResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.entities.Event events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bytes block_id = 5;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // .flow.entities.TransactionStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 status_code = 2;
  if (this->_internal_status_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionResultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionResultResponse::GetClassData() const { return &_class_data_; }

void TransactionResultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionResultResponse *>(to)->MergeFrom(
      static_cast<const TransactionResultResponse &>(from));
}


void TransactionResultResponse::MergeFrom(const TransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionResultResponse::CopyFrom(const TransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResultResponse::IsInitialized() const {
  return true;
}

void TransactionResultResponse::InternalSwap(TransactionResultResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionResultResponse, status_code_)
      + sizeof(TransactionResultResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(TransactionResultResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[16]);
}

// ===================================================================

class GetAccountRequest::_Internal {
 public:
};

GetAccountRequest::GetAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountRequest)
}
GetAccountRequest::GetAccountRequest(const GetAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountRequest)
}

void GetAccountRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountRequest::~GetAccountRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountRequest::ArenaDtor(void* object) {
  GetAccountRequest* _this = reinterpret_cast< GetAccountRequest* >(object);
  (void)_this;
}
void GetAccountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountRequest)
  return target;
}

size_t GetAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountRequest::GetClassData() const { return &_class_data_; }

void GetAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountRequest *>(to)->MergeFrom(
      static_cast<const GetAccountRequest &>(from));
}


void GetAccountRequest::MergeFrom(const GetAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountRequest::CopyFrom(const GetAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountRequest::IsInitialized() const {
  return true;
}

void GetAccountRequest::InternalSwap(GetAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[17]);
}

// ===================================================================

class GetAccountResponse::_Internal {
 public:
  static const ::flow::entities::Account& account(const GetAccountResponse* msg);
};

const ::flow::entities::Account&
GetAccountResponse::_Internal::account(const GetAccountResponse* msg) {
  return *msg->account_;
}
void GetAccountResponse::clear_account() {
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
GetAccountResponse::GetAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountResponse)
}
GetAccountResponse::GetAccountResponse(const GetAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::flow::entities::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountResponse)
}

void GetAccountResponse::SharedCtor() {
account_ = nullptr;
}

GetAccountResponse::~GetAccountResponse() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void GetAccountResponse::ArenaDtor(void* object) {
  GetAccountResponse* _this = reinterpret_cast< GetAccountResponse* >(object);
  (void)_this;
}
void GetAccountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountResponse)
  return target;
}

size_t GetAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountResponse::GetClassData() const { return &_class_data_; }

void GetAccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountResponse *>(to)->MergeFrom(
      static_cast<const GetAccountResponse &>(from));
}


void GetAccountResponse::MergeFrom(const GetAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account()) {
    _internal_mutable_account()->::flow::entities::Account::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountResponse::CopyFrom(const GetAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountResponse::IsInitialized() const {
  return true;
}

void GetAccountResponse::InternalSwap(GetAccountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[18]);
}

// ===================================================================

class GetAccountAtLatestBlockRequest::_Internal {
 public:
};

GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountAtLatestBlockRequest)
}
GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(const GetAccountAtLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountAtLatestBlockRequest)
}

void GetAccountAtLatestBlockRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountAtLatestBlockRequest::~GetAccountAtLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountAtLatestBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountAtLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountAtLatestBlockRequest::ArenaDtor(void* object) {
  GetAccountAtLatestBlockRequest* _this = reinterpret_cast< GetAccountAtLatestBlockRequest* >(object);
  (void)_this;
}
void GetAccountAtLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountAtLatestBlockRequest)
  return target;
}

size_t GetAccountAtLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountAtLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAtLatestBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountAtLatestBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAtLatestBlockRequest::GetClassData() const { return &_class_data_; }

void GetAccountAtLatestBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountAtLatestBlockRequest *>(to)->MergeFrom(
      static_cast<const GetAccountAtLatestBlockRequest &>(from));
}


void GetAccountAtLatestBlockRequest::MergeFrom(const GetAccountAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAtLatestBlockRequest::CopyFrom(const GetAccountAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtLatestBlockRequest::IsInitialized() const {
  return true;
}

void GetAccountAtLatestBlockRequest::InternalSwap(GetAccountAtLatestBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtLatestBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[19]);
}

// ===================================================================

class AccountResponse::_Internal {
 public:
  static const ::flow::entities::Account& account(const AccountResponse* msg);
};

const ::flow::entities::Account&
AccountResponse::_Internal::account(const AccountResponse* msg) {
  return *msg->account_;
}
void AccountResponse::clear_account() {
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
AccountResponse::AccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.AccountResponse)
}
AccountResponse::AccountResponse(const AccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::flow::entities::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.AccountResponse)
}

void AccountResponse::SharedCtor() {
account_ = nullptr;
}

AccountResponse::~AccountResponse() {
  // @@protoc_insertion_point(destructor:flow.access.AccountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void AccountResponse::ArenaDtor(void* object) {
  AccountResponse* _this = reinterpret_cast< AccountResponse* >(object);
  (void)_this;
}
void AccountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.AccountResponse)
  return target;
}

size_t AccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.AccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.Account account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountResponse::GetClassData() const { return &_class_data_; }

void AccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountResponse *>(to)->MergeFrom(
      static_cast<const AccountResponse &>(from));
}


void AccountResponse::MergeFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account()) {
    _internal_mutable_account()->::flow::entities::Account::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {
  return true;
}

void AccountResponse::InternalSwap(AccountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[20]);
}

// ===================================================================

class GetAccountAtBlockHeightRequest::_Internal {
 public:
};

GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountAtBlockHeightRequest)
}
GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(const GetAccountAtBlockHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountAtBlockHeightRequest)
}

void GetAccountAtBlockHeightRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_height_ = uint64_t{0u};
}

GetAccountAtBlockHeightRequest::~GetAccountAtBlockHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountAtBlockHeightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAccountAtBlockHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountAtBlockHeightRequest::ArenaDtor(void* object) {
  GetAccountAtBlockHeightRequest* _this = reinterpret_cast< GetAccountAtBlockHeightRequest* >(object);
  (void)_this;
}
void GetAccountAtBlockHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtBlockHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtBlockHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtBlockHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtBlockHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountAtBlockHeightRequest)
  return target;
}

size_t GetAccountAtBlockHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountAtBlockHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAtBlockHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountAtBlockHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAtBlockHeightRequest::GetClassData() const { return &_class_data_; }

void GetAccountAtBlockHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountAtBlockHeightRequest *>(to)->MergeFrom(
      static_cast<const GetAccountAtBlockHeightRequest &>(from));
}


void GetAccountAtBlockHeightRequest::MergeFrom(const GetAccountAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAtBlockHeightRequest::CopyFrom(const GetAccountAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtBlockHeightRequest::IsInitialized() const {
  return true;
}

void GetAccountAtBlockHeightRequest::InternalSwap(GetAccountAtBlockHeightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtBlockHeightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[21]);
}

// ===================================================================

class ExecuteScriptAtLatestBlockRequest::_Internal {
 public:
};

ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtLatestBlockRequest)
}
ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(const ExecuteScriptAtLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtLatestBlockRequest)
}

void ExecuteScriptAtLatestBlockRequest::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtLatestBlockRequest::~ExecuteScriptAtLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtLatestBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptAtLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtLatestBlockRequest::ArenaDtor(void* object) {
  ExecuteScriptAtLatestBlockRequest* _this = reinterpret_cast< ExecuteScriptAtLatestBlockRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // repeated bytes arguments = 2;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtLatestBlockRequest)
  return target;
}

size_t ExecuteScriptAtLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes arguments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      arguments_.Get(i));
  }

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptAtLatestBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptAtLatestBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptAtLatestBlockRequest::GetClassData() const { return &_class_data_; }

void ExecuteScriptAtLatestBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptAtLatestBlockRequest *>(to)->MergeFrom(
      static_cast<const ExecuteScriptAtLatestBlockRequest &>(from));
}


void ExecuteScriptAtLatestBlockRequest::MergeFrom(const ExecuteScriptAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptAtLatestBlockRequest::CopyFrom(const ExecuteScriptAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtLatestBlockRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtLatestBlockRequest::InternalSwap(ExecuteScriptAtLatestBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtLatestBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[22]);
}

// ===================================================================

class ExecuteScriptAtBlockIDRequest::_Internal {
 public:
};

ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtBlockIDRequest)
}
ExecuteScriptAtBlockIDRequest::ExecuteScriptAtBlockIDRequest(const ExecuteScriptAtBlockIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtBlockIDRequest)
}

void ExecuteScriptAtBlockIDRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtBlockIDRequest::~ExecuteScriptAtBlockIDRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtBlockIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptAtBlockIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockIDRequest::ArenaDtor(void* object) {
  ExecuteScriptAtBlockIDRequest* _this = reinterpret_cast< ExecuteScriptAtBlockIDRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  block_id_.ClearToEmpty();
  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  // repeated bytes arguments = 3;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtBlockIDRequest)
  return target;
}

size_t ExecuteScriptAtBlockIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtBlockIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes arguments = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      arguments_.Get(i));
  }

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptAtBlockIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptAtBlockIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptAtBlockIDRequest::GetClassData() const { return &_class_data_; }

void ExecuteScriptAtBlockIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptAtBlockIDRequest *>(to)->MergeFrom(
      static_cast<const ExecuteScriptAtBlockIDRequest &>(from));
}


void ExecuteScriptAtBlockIDRequest::MergeFrom(const ExecuteScriptAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtBlockIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptAtBlockIDRequest::CopyFrom(const ExecuteScriptAtBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtBlockIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockIDRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockIDRequest::InternalSwap(ExecuteScriptAtBlockIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[23]);
}

// ===================================================================

class ExecuteScriptAtBlockHeightRequest::_Internal {
 public:
};

ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtBlockHeightRequest)
}
ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(const ExecuteScriptAtBlockHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtBlockHeightRequest)
}

void ExecuteScriptAtBlockHeightRequest::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_height_ = uint64_t{0u};
}

ExecuteScriptAtBlockHeightRequest::~ExecuteScriptAtBlockHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtBlockHeightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptAtBlockHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockHeightRequest::ArenaDtor(void* object) {
  ExecuteScriptAtBlockHeightRequest* _this = reinterpret_cast< ExecuteScriptAtBlockHeightRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  script_.ClearToEmpty();
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_height = 1;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_height(), target);
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  // repeated bytes arguments = 3;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtBlockHeightRequest)
  return target;
}

size_t ExecuteScriptAtBlockHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes arguments = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      arguments_.Get(i));
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // uint64 block_height = 1;
  if (this->_internal_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptAtBlockHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptAtBlockHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptAtBlockHeightRequest::GetClassData() const { return &_class_data_; }

void ExecuteScriptAtBlockHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptAtBlockHeightRequest *>(to)->MergeFrom(
      static_cast<const ExecuteScriptAtBlockHeightRequest &>(from));
}


void ExecuteScriptAtBlockHeightRequest::MergeFrom(const ExecuteScriptAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptAtBlockHeightRequest::CopyFrom(const ExecuteScriptAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockHeightRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockHeightRequest::InternalSwap(ExecuteScriptAtBlockHeightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockHeightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[24]);
}

// ===================================================================

class ExecuteScriptResponse::_Internal {
 public:
};

ExecuteScriptResponse::ExecuteScriptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptResponse)
}
ExecuteScriptResponse::ExecuteScriptResponse(const ExecuteScriptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptResponse)
}

void ExecuteScriptResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptResponse::~ExecuteScriptResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteScriptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptResponse::ArenaDtor(void* object) {
  ExecuteScriptResponse* _this = reinterpret_cast< ExecuteScriptResponse* >(object);
  (void)_this;
}
void ExecuteScriptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptResponse)
  return target;
}

size_t ExecuteScriptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteScriptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteScriptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteScriptResponse::GetClassData() const { return &_class_data_; }

void ExecuteScriptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteScriptResponse *>(to)->MergeFrom(
      static_cast<const ExecuteScriptResponse &>(from));
}


void ExecuteScriptResponse::MergeFrom(const ExecuteScriptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteScriptResponse::CopyFrom(const ExecuteScriptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptResponse::IsInitialized() const {
  return true;
}

void ExecuteScriptResponse::InternalSwap(ExecuteScriptResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[25]);
}

// ===================================================================

class GetEventsForHeightRangeRequest::_Internal {
 public:
};

GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetEventsForHeightRangeRequest)
}
GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(const GetEventsForHeightRangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_height_, &from.start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:flow.access.GetEventsForHeightRangeRequest)
}

void GetEventsForHeightRangeRequest::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
}

GetEventsForHeightRangeRequest::~GetEventsForHeightRangeRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetEventsForHeightRangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsForHeightRangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForHeightRangeRequest::ArenaDtor(void* object) {
  GetEventsForHeightRangeRequest* _this = reinterpret_cast< GetEventsForHeightRangeRequest* >(object);
  (void)_this;
}
void GetEventsForHeightRangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForHeightRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForHeightRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetEventsForHeightRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForHeightRangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetEventsForHeightRangeRequest.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForHeightRangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetEventsForHeightRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetEventsForHeightRangeRequest.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // uint64 start_height = 2;
  if (this->_internal_start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_height(), target);
  }

  // uint64 end_height = 3;
  if (this->_internal_end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetEventsForHeightRangeRequest)
  return target;
}

size_t GetEventsForHeightRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetEventsForHeightRangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 start_height = 2;
  if (this->_internal_start_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start_height());
  }

  // uint64 end_height = 3;
  if (this->_internal_end_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_end_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsForHeightRangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsForHeightRangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsForHeightRangeRequest::GetClassData() const { return &_class_data_; }

void GetEventsForHeightRangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsForHeightRangeRequest *>(to)->MergeFrom(
      static_cast<const GetEventsForHeightRangeRequest &>(from));
}


void GetEventsForHeightRangeRequest::MergeFrom(const GetEventsForHeightRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetEventsForHeightRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from._internal_end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsForHeightRangeRequest::CopyFrom(const GetEventsForHeightRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetEventsForHeightRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForHeightRangeRequest::IsInitialized() const {
  return true;
}

void GetEventsForHeightRangeRequest::InternalSwap(GetEventsForHeightRangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEventsForHeightRangeRequest, end_height_)
      + sizeof(GetEventsForHeightRangeRequest::end_height_)
      - PROTOBUF_FIELD_OFFSET(GetEventsForHeightRangeRequest, start_height_)>(
          reinterpret_cast<char*>(&start_height_),
          reinterpret_cast<char*>(&other->start_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForHeightRangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[26]);
}

// ===================================================================

class GetEventsForBlockIDsRequest::_Internal {
 public:
};

GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetEventsForBlockIDsRequest)
}
GetEventsForBlockIDsRequest::GetEventsForBlockIDsRequest(const GetEventsForBlockIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetEventsForBlockIDsRequest)
}

void GetEventsForBlockIDsRequest::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEventsForBlockIDsRequest::~GetEventsForBlockIDsRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetEventsForBlockIDsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEventsForBlockIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForBlockIDsRequest::ArenaDtor(void* object) {
  GetEventsForBlockIDsRequest* _this = reinterpret_cast< GetEventsForBlockIDsRequest* >(object);
  (void)_this;
}
void GetEventsForBlockIDsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForBlockIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForBlockIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetEventsForBlockIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForBlockIDsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetEventsForBlockIDsRequest.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes block_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForBlockIDsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetEventsForBlockIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetEventsForBlockIDsRequest.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated bytes block_ids = 2;
  for (int i = 0, n = this->_internal_block_ids_size(); i < n; i++) {
    const auto& s = this->_internal_block_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetEventsForBlockIDsRequest)
  return target;
}

size_t GetEventsForBlockIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetEventsForBlockIDsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_ids_.size());
  for (int i = 0, n = block_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      block_ids_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsForBlockIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEventsForBlockIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsForBlockIDsRequest::GetClassData() const { return &_class_data_; }

void GetEventsForBlockIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEventsForBlockIDsRequest *>(to)->MergeFrom(
      static_cast<const GetEventsForBlockIDsRequest &>(from));
}


void GetEventsForBlockIDsRequest::MergeFrom(const GetEventsForBlockIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetEventsForBlockIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsForBlockIDsRequest::CopyFrom(const GetEventsForBlockIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetEventsForBlockIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForBlockIDsRequest::IsInitialized() const {
  return true;
}

void GetEventsForBlockIDsRequest::InternalSwap(GetEventsForBlockIDsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_ids_.InternalSwap(&other->block_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForBlockIDsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[27]);
}

// ===================================================================

class EventsResponse_Result::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& block_timestamp(const EventsResponse_Result* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventsResponse_Result::_Internal::block_timestamp(const EventsResponse_Result* msg) {
  return *msg->block_timestamp_;
}
void EventsResponse_Result::clear_events() {
  events_.Clear();
}
void EventsResponse_Result::clear_block_timestamp() {
  if (GetArenaForAllocation() == nullptr && block_timestamp_ != nullptr) {
    delete block_timestamp_;
  }
  block_timestamp_ = nullptr;
}
EventsResponse_Result::EventsResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.EventsResponse.Result)
}
EventsResponse_Result::EventsResponse_Result(const EventsResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_timestamp()) {
    block_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.block_timestamp_);
  } else {
    block_timestamp_ = nullptr;
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.EventsResponse.Result)
}

void EventsResponse_Result::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&block_timestamp_)) + sizeof(block_height_));
}

EventsResponse_Result::~EventsResponse_Result() {
  // @@protoc_insertion_point(destructor:flow.access.EventsResponse.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventsResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_timestamp_;
}

void EventsResponse_Result::ArenaDtor(void* object) {
  EventsResponse_Result* _this = reinterpret_cast< EventsResponse_Result* >(object);
  (void)_this;
}
void EventsResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.EventsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  block_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_timestamp_ != nullptr) {
    delete block_timestamp_;
  }
  block_timestamp_ = nullptr;
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp block_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.EventsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // repeated .flow.entities.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  // .google.protobuf.Timestamp block_timestamp = 4;
  if (this->_internal_has_block_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.EventsResponse.Result)
  return target;
}

size_t EventsResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.EventsResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.entities.Event events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // .google.protobuf.Timestamp block_timestamp = 4;
  if (this->_internal_has_block_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_timestamp_);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventsResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsResponse_Result::GetClassData() const { return &_class_data_; }

void EventsResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventsResponse_Result *>(to)->MergeFrom(
      static_cast<const EventsResponse_Result &>(from));
}


void EventsResponse_Result::MergeFrom(const EventsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.EventsResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_has_block_timestamp()) {
    _internal_mutable_block_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_block_timestamp());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse_Result::CopyFrom(const EventsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.EventsResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse_Result::IsInitialized() const {
  return true;
}

void EventsResponse_Result::InternalSwap(EventsResponse_Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventsResponse_Result, block_height_)
      + sizeof(EventsResponse_Result::block_height_)
      - PROTOBUF_FIELD_OFFSET(EventsResponse_Result, block_timestamp_)>(
          reinterpret_cast<char*>(&block_timestamp_),
          reinterpret_cast<char*>(&other->block_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[28]);
}

// ===================================================================

class EventsResponse::_Internal {
 public:
};

EventsResponse::EventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.EventsResponse)
}
EventsResponse::EventsResponse(const EventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.EventsResponse)
}

void EventsResponse::SharedCtor() {
}

EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:flow.access.EventsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventsResponse::ArenaDtor(void* object) {
  EventsResponse* _this = reinterpret_cast< EventsResponse* >(object);
  (void)_this;
}
void EventsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flow.access.EventsResponse.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flow.access.EventsResponse.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.EventsResponse)
  return target;
}

size_t EventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.EventsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.EventsResponse.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsResponse::GetClassData() const { return &_class_data_; }

void EventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventsResponse *>(to)->MergeFrom(
      static_cast<const EventsResponse &>(from));
}


void EventsResponse::MergeFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.EventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse::IsInitialized() const {
  return true;
}

void EventsResponse::InternalSwap(EventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[29]);
}

// ===================================================================

class GetNetworkParametersRequest::_Internal {
 public:
};

GetNetworkParametersRequest::GetNetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.access.GetNetworkParametersRequest)
}
GetNetworkParametersRequest::GetNetworkParametersRequest(const GetNetworkParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.GetNetworkParametersRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetworkParametersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetworkParametersRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[30]);
}

// ===================================================================

class GetNetworkParametersResponse::_Internal {
 public:
};

GetNetworkParametersResponse::GetNetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetNetworkParametersResponse)
}
GetNetworkParametersResponse::GetNetworkParametersResponse(const GetNetworkParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetNetworkParametersResponse)
}

void GetNetworkParametersResponse::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNetworkParametersResponse::~GetNetworkParametersResponse() {
  // @@protoc_insertion_point(destructor:flow.access.GetNetworkParametersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNetworkParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNetworkParametersResponse::ArenaDtor(void* object) {
  GetNetworkParametersResponse* _this = reinterpret_cast< GetNetworkParametersResponse* >(object);
  (void)_this;
}
void GetNetworkParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetworkParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetNetworkParametersResponse.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetNetworkParametersResponse.chain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetNetworkParametersResponse)
  return target;
}

size_t GetNetworkParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetNetworkParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetworkParametersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNetworkParametersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetworkParametersResponse::GetClassData() const { return &_class_data_; }

void GetNetworkParametersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNetworkParametersResponse *>(to)->MergeFrom(
      static_cast<const GetNetworkParametersResponse &>(from));
}


void GetNetworkParametersResponse::MergeFrom(const GetNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetNetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNetworkParametersResponse::CopyFrom(const GetNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetNetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersResponse::IsInitialized() const {
  return true;
}

void GetNetworkParametersResponse::InternalSwap(GetNetworkParametersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[31]);
}

// ===================================================================

class GetLatestProtocolStateSnapshotRequest::_Internal {
 public:
};

GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestProtocolStateSnapshotRequest)
}
GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(const GetLatestProtocolStateSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestProtocolStateSnapshotRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLatestProtocolStateSnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLatestProtocolStateSnapshotRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetLatestProtocolStateSnapshotRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[32]);
}

// ===================================================================

class ProtocolStateSnapshotResponse::_Internal {
 public:
};

ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ProtocolStateSnapshotResponse)
}
ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(const ProtocolStateSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serializedsnapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serializedsnapshot().empty()) {
    serializedsnapshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serializedsnapshot(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ProtocolStateSnapshotResponse)
}

void ProtocolStateSnapshotResponse::SharedCtor() {
serializedsnapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProtocolStateSnapshotResponse::~ProtocolStateSnapshotResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ProtocolStateSnapshotResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolStateSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serializedsnapshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtocolStateSnapshotResponse::ArenaDtor(void* object) {
  ProtocolStateSnapshotResponse* _this = reinterpret_cast< ProtocolStateSnapshotResponse* >(object);
  (void)_this;
}
void ProtocolStateSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolStateSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolStateSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ProtocolStateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serializedsnapshot_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolStateSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes serializedSnapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serializedsnapshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolStateSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ProtocolStateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes serializedSnapshot = 1;
  if (!this->_internal_serializedsnapshot().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serializedsnapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ProtocolStateSnapshotResponse)
  return target;
}

size_t ProtocolStateSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ProtocolStateSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serializedSnapshot = 1;
  if (!this->_internal_serializedsnapshot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serializedsnapshot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolStateSnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolStateSnapshotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolStateSnapshotResponse::GetClassData() const { return &_class_data_; }

void ProtocolStateSnapshotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolStateSnapshotResponse *>(to)->MergeFrom(
      static_cast<const ProtocolStateSnapshotResponse &>(from));
}


void ProtocolStateSnapshotResponse::MergeFrom(const ProtocolStateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ProtocolStateSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serializedsnapshot().empty()) {
    _internal_set_serializedsnapshot(from._internal_serializedsnapshot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolStateSnapshotResponse::CopyFrom(const ProtocolStateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ProtocolStateSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolStateSnapshotResponse::IsInitialized() const {
  return true;
}

void ProtocolStateSnapshotResponse::InternalSwap(ProtocolStateSnapshotResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serializedsnapshot_, lhs_arena,
      &other->serializedsnapshot_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolStateSnapshotResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[33]);
}

// ===================================================================

class GetExecutionResultForBlockIDRequest::_Internal {
 public:
};

GetExecutionResultForBlockIDRequest::GetExecutionResultForBlockIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.GetExecutionResultForBlockIDRequest)
}
GetExecutionResultForBlockIDRequest::GetExecutionResultForBlockIDRequest(const GetExecutionResultForBlockIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetExecutionResultForBlockIDRequest)
}

void GetExecutionResultForBlockIDRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetExecutionResultForBlockIDRequest::~GetExecutionResultForBlockIDRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetExecutionResultForBlockIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExecutionResultForBlockIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetExecutionResultForBlockIDRequest::ArenaDtor(void* object) {
  GetExecutionResultForBlockIDRequest* _this = reinterpret_cast< GetExecutionResultForBlockIDRequest* >(object);
  (void)_this;
}
void GetExecutionResultForBlockIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExecutionResultForBlockIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExecutionResultForBlockIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetExecutionResultForBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExecutionResultForBlockIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExecutionResultForBlockIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetExecutionResultForBlockIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetExecutionResultForBlockIDRequest)
  return target;
}

size_t GetExecutionResultForBlockIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetExecutionResultForBlockIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExecutionResultForBlockIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExecutionResultForBlockIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExecutionResultForBlockIDRequest::GetClassData() const { return &_class_data_; }

void GetExecutionResultForBlockIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExecutionResultForBlockIDRequest *>(to)->MergeFrom(
      static_cast<const GetExecutionResultForBlockIDRequest &>(from));
}


void GetExecutionResultForBlockIDRequest::MergeFrom(const GetExecutionResultForBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetExecutionResultForBlockIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExecutionResultForBlockIDRequest::CopyFrom(const GetExecutionResultForBlockIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetExecutionResultForBlockIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExecutionResultForBlockIDRequest::IsInitialized() const {
  return true;
}

void GetExecutionResultForBlockIDRequest::InternalSwap(GetExecutionResultForBlockIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExecutionResultForBlockIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[34]);
}

// ===================================================================

class ExecutionResultForBlockIDResponse::_Internal {
 public:
  static const ::flow::entities::ExecutionResult& execution_result(const ExecutionResultForBlockIDResponse* msg);
};

const ::flow::entities::ExecutionResult&
ExecutionResultForBlockIDResponse::_Internal::execution_result(const ExecutionResultForBlockIDResponse* msg) {
  return *msg->execution_result_;
}
void ExecutionResultForBlockIDResponse::clear_execution_result() {
  if (GetArenaForAllocation() == nullptr && execution_result_ != nullptr) {
    delete execution_result_;
  }
  execution_result_ = nullptr;
}
ExecutionResultForBlockIDResponse::ExecutionResultForBlockIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecutionResultForBlockIDResponse)
}
ExecutionResultForBlockIDResponse::ExecutionResultForBlockIDResponse(const ExecutionResultForBlockIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_execution_result()) {
    execution_result_ = new ::flow::entities::ExecutionResult(*from.execution_result_);
  } else {
    execution_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecutionResultForBlockIDResponse)
}

void ExecutionResultForBlockIDResponse::SharedCtor() {
execution_result_ = nullptr;
}

ExecutionResultForBlockIDResponse::~ExecutionResultForBlockIDResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ExecutionResultForBlockIDResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionResultForBlockIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete execution_result_;
}

void ExecutionResultForBlockIDResponse::ArenaDtor(void* object) {
  ExecutionResultForBlockIDResponse* _this = reinterpret_cast< ExecutionResultForBlockIDResponse* >(object);
  (void)_this;
}
void ExecutionResultForBlockIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionResultForBlockIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionResultForBlockIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecutionResultForBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && execution_result_ != nullptr) {
    delete execution_result_;
  }
  execution_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionResultForBlockIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow.entities.ExecutionResult execution_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionResultForBlockIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecutionResultForBlockIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.entities.ExecutionResult execution_result = 1;
  if (this->_internal_has_execution_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::execution_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecutionResultForBlockIDResponse)
  return target;
}

size_t ExecutionResultForBlockIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecutionResultForBlockIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.entities.ExecutionResult execution_result = 1;
  if (this->_internal_has_execution_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *execution_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionResultForBlockIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecutionResultForBlockIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionResultForBlockIDResponse::GetClassData() const { return &_class_data_; }

void ExecutionResultForBlockIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecutionResultForBlockIDResponse *>(to)->MergeFrom(
      static_cast<const ExecutionResultForBlockIDResponse &>(from));
}


void ExecutionResultForBlockIDResponse::MergeFrom(const ExecutionResultForBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecutionResultForBlockIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_execution_result()) {
    _internal_mutable_execution_result()->::flow::entities::ExecutionResult::MergeFrom(from._internal_execution_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionResultForBlockIDResponse::CopyFrom(const ExecutionResultForBlockIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecutionResultForBlockIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResultForBlockIDResponse::IsInitialized() const {
  return true;
}

void ExecutionResultForBlockIDResponse::InternalSwap(ExecutionResultForBlockIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(execution_result_, other->execution_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionResultForBlockIDResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2faccess_2faccess_2eproto_getter, &descriptor_table_flow_2faccess_2faccess_2eproto_once,
      file_level_metadata_flow_2faccess_2faccess_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace access
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow::access::PingRequest* Arena::CreateMaybeMessage< ::flow::access::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::PingResponse* Arena::CreateMaybeMessage< ::flow::access::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestBlockHeaderRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestBlockHeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestBlockHeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockHeaderByIDRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockHeaderByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockHeaderByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockHeaderByHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockHeaderByHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockHeaderByHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockHeaderResponse* Arena::CreateMaybeMessage< ::flow::access::BlockHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockByIDRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockByHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockByHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockByHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockResponse* Arena::CreateMaybeMessage< ::flow::access::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetCollectionByIDRequest* Arena::CreateMaybeMessage< ::flow::access::GetCollectionByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetCollectionByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::CollectionResponse* Arena::CreateMaybeMessage< ::flow::access::CollectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::CollectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::SendTransactionRequest* Arena::CreateMaybeMessage< ::flow::access::SendTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::SendTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::SendTransactionResponse* Arena::CreateMaybeMessage< ::flow::access::SendTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::SendTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetTransactionRequest* Arena::CreateMaybeMessage< ::flow::access::GetTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionResponse* Arena::CreateMaybeMessage< ::flow::access::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionResultResponse* Arena::CreateMaybeMessage< ::flow::access::TransactionResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountRequest* Arena::CreateMaybeMessage< ::flow::access::GetAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountResponse* Arena::CreateMaybeMessage< ::flow::access::GetAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountAtLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::GetAccountAtLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountAtLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::AccountResponse* Arena::CreateMaybeMessage< ::flow::access::AccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::AccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountAtBlockHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetAccountAtBlockHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountAtBlockHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtBlockIDRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtBlockIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtBlockIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtBlockHeightRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtBlockHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtBlockHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptResponse* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetEventsForHeightRangeRequest* Arena::CreateMaybeMessage< ::flow::access::GetEventsForHeightRangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetEventsForHeightRangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetEventsForBlockIDsRequest* Arena::CreateMaybeMessage< ::flow::access::GetEventsForBlockIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetEventsForBlockIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::EventsResponse_Result* Arena::CreateMaybeMessage< ::flow::access::EventsResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::EventsResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::EventsResponse* Arena::CreateMaybeMessage< ::flow::access::EventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::EventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetNetworkParametersRequest* Arena::CreateMaybeMessage< ::flow::access::GetNetworkParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetNetworkParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetNetworkParametersResponse* Arena::CreateMaybeMessage< ::flow::access::GetNetworkParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetNetworkParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestProtocolStateSnapshotRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestProtocolStateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestProtocolStateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ProtocolStateSnapshotResponse* Arena::CreateMaybeMessage< ::flow::access::ProtocolStateSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ProtocolStateSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetExecutionResultForBlockIDRequest* Arena::CreateMaybeMessage< ::flow::access::GetExecutionResultForBlockIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetExecutionResultForBlockIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecutionResultForBlockIDResponse* Arena::CreateMaybeMessage< ::flow::access::ExecutionResultForBlockIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecutionResultForBlockIDResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
