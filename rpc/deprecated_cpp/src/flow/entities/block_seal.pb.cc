// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/block_seal.proto

#include "flow/entities/block_seal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow {
namespace entities {
constexpr BlockSeal::BlockSeal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_receipt_signatures_()
  , result_approval_signatures_()
  , aggregated_approval_sigs_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , execution_receipt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , final_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlockSealDefaultTypeInternal {
  constexpr BlockSealDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockSealDefaultTypeInternal() {}
  union {
    BlockSeal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockSealDefaultTypeInternal _BlockSeal_default_instance_;
constexpr AggregatedSignature::AggregatedSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signer_ids_()
  , verifier_signatures_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AggregatedSignatureDefaultTypeInternal {
  constexpr AggregatedSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregatedSignatureDefaultTypeInternal() {}
  union {
    AggregatedSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregatedSignatureDefaultTypeInternal _AggregatedSignature_default_instance_;
}  // namespace entities
}  // namespace flow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2fentities_2fblock_5fseal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_2fentities_2fblock_5fseal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2fentities_2fblock_5fseal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2fentities_2fblock_5fseal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, execution_receipt_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, execution_receipt_signatures_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, result_approval_signatures_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, final_state_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, result_id_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::BlockSeal, aggregated_approval_sigs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::entities::AggregatedSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow::entities::AggregatedSignature, verifier_signatures_),
  PROTOBUF_FIELD_OFFSET(::flow::entities::AggregatedSignature, signer_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flow::entities::BlockSeal)},
  { 13, -1, -1, sizeof(::flow::entities::AggregatedSignature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_BlockSeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::entities::_AggregatedSignature_default_instance_),
};

const char descriptor_table_protodef_flow_2fentities_2fblock_5fseal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036flow/entities/block_seal.proto\022\rflow.e"
  "ntities\"\363\001\n\tBlockSeal\022\020\n\010block_id\030\001 \001(\014\022"
  "\034\n\024execution_receipt_id\030\002 \001(\014\022$\n\034executi"
  "on_receipt_signatures\030\003 \003(\014\022\"\n\032result_ap"
  "proval_signatures\030\004 \003(\014\022\023\n\013final_state\030\005"
  " \001(\014\022\021\n\tresult_id\030\006 \001(\014\022D\n\030aggregated_ap"
  "proval_sigs\030\007 \003(\0132\".flow.entities.Aggreg"
  "atedSignature\"F\n\023AggregatedSignature\022\033\n\023"
  "verifier_signatures\030\001 \001(\014\022\022\n\nsigner_ids\030"
  "\002 \003(\014BP\n\034org.onflow.protobuf.entitiesZ0g"
  "ithub.com/onflow/flow/protobuf/go/flow/e"
  "ntitiesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fblock_5fseal_2eproto = {
  false, false, 455, descriptor_table_protodef_flow_2fentities_2fblock_5fseal_2eproto, "flow/entities/block_seal.proto", 
  &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_flow_2fentities_2fblock_5fseal_2eproto::offsets,
  file_level_metadata_flow_2fentities_2fblock_5fseal_2eproto, file_level_enum_descriptors_flow_2fentities_2fblock_5fseal_2eproto, file_level_service_descriptors_flow_2fentities_2fblock_5fseal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_getter() {
  return &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_2fentities_2fblock_5fseal_2eproto(&descriptor_table_flow_2fentities_2fblock_5fseal_2eproto);
namespace flow {
namespace entities {

// ===================================================================

class BlockSeal::_Internal {
 public:
};

BlockSeal::BlockSeal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  execution_receipt_signatures_(arena),
  result_approval_signatures_(arena),
  aggregated_approval_sigs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.BlockSeal)
}
BlockSeal::BlockSeal(const BlockSeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      execution_receipt_signatures_(from.execution_receipt_signatures_),
      result_approval_signatures_(from.result_approval_signatures_),
      aggregated_approval_sigs_(from.aggregated_approval_sigs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  execution_receipt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_execution_receipt_id().empty()) {
    execution_receipt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_execution_receipt_id(), 
      GetArenaForAllocation());
  }
  final_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_final_state().empty()) {
    final_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_final_state(), 
      GetArenaForAllocation());
  }
  result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_id().empty()) {
    result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.entities.BlockSeal)
}

void BlockSeal::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
execution_receipt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
final_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockSeal::~BlockSeal() {
  // @@protoc_insertion_point(destructor:flow.entities.BlockSeal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockSeal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execution_receipt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  final_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockSeal::ArenaDtor(void* object) {
  BlockSeal* _this = reinterpret_cast< BlockSeal* >(object);
  (void)_this;
}
void BlockSeal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockSeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockSeal::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.BlockSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execution_receipt_signatures_.Clear();
  result_approval_signatures_.Clear();
  aggregated_approval_sigs_.Clear();
  block_id_.ClearToEmpty();
  execution_receipt_id_.ClearToEmpty();
  final_state_.ClearToEmpty();
  result_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockSeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes execution_receipt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_execution_receipt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes execution_receipt_signatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_receipt_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes result_approval_signatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_result_approval_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes final_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_final_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes result_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_result_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flow.entities.AggregatedSignature aggregated_approval_sigs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregated_approval_sigs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockSeal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.BlockSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes execution_receipt_id = 2;
  if (!this->_internal_execution_receipt_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_execution_receipt_id(), target);
  }

  // repeated bytes execution_receipt_signatures = 3;
  for (int i = 0, n = this->_internal_execution_receipt_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_execution_receipt_signatures(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes result_approval_signatures = 4;
  for (int i = 0, n = this->_internal_result_approval_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_result_approval_signatures(i);
    target = stream->WriteBytes(4, s, target);
  }

  // bytes final_state = 5;
  if (!this->_internal_final_state().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_final_state(), target);
  }

  // bytes result_id = 6;
  if (!this->_internal_result_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_result_id(), target);
  }

  // repeated .flow.entities.AggregatedSignature aggregated_approval_sigs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregated_approval_sigs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_aggregated_approval_sigs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.BlockSeal)
  return target;
}

size_t BlockSeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.BlockSeal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes execution_receipt_signatures = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(execution_receipt_signatures_.size());
  for (int i = 0, n = execution_receipt_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      execution_receipt_signatures_.Get(i));
  }

  // repeated bytes result_approval_signatures = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(result_approval_signatures_.size());
  for (int i = 0, n = result_approval_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      result_approval_signatures_.Get(i));
  }

  // repeated .flow.entities.AggregatedSignature aggregated_approval_sigs = 7;
  total_size += 1UL * this->_internal_aggregated_approval_sigs_size();
  for (const auto& msg : this->aggregated_approval_sigs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_id = 1;
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes execution_receipt_id = 2;
  if (!this->_internal_execution_receipt_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_execution_receipt_id());
  }

  // bytes final_state = 5;
  if (!this->_internal_final_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_final_state());
  }

  // bytes result_id = 6;
  if (!this->_internal_result_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockSeal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockSeal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockSeal::GetClassData() const { return &_class_data_; }

void BlockSeal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockSeal *>(to)->MergeFrom(
      static_cast<const BlockSeal &>(from));
}


void BlockSeal::MergeFrom(const BlockSeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.BlockSeal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  execution_receipt_signatures_.MergeFrom(from.execution_receipt_signatures_);
  result_approval_signatures_.MergeFrom(from.result_approval_signatures_);
  aggregated_approval_sigs_.MergeFrom(from.aggregated_approval_sigs_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (!from._internal_execution_receipt_id().empty()) {
    _internal_set_execution_receipt_id(from._internal_execution_receipt_id());
  }
  if (!from._internal_final_state().empty()) {
    _internal_set_final_state(from._internal_final_state());
  }
  if (!from._internal_result_id().empty()) {
    _internal_set_result_id(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockSeal::CopyFrom(const BlockSeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.BlockSeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSeal::IsInitialized() const {
  return true;
}

void BlockSeal::InternalSwap(BlockSeal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  execution_receipt_signatures_.InternalSwap(&other->execution_receipt_signatures_);
  result_approval_signatures_.InternalSwap(&other->result_approval_signatures_);
  aggregated_approval_sigs_.InternalSwap(&other->aggregated_approval_sigs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, lhs_arena,
      &other->block_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &execution_receipt_id_, lhs_arena,
      &other->execution_receipt_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &final_state_, lhs_arena,
      &other->final_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_id_, lhs_arena,
      &other->result_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockSeal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_getter, &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_once,
      file_level_metadata_flow_2fentities_2fblock_5fseal_2eproto[0]);
}

// ===================================================================

class AggregatedSignature::_Internal {
 public:
};

AggregatedSignature::AggregatedSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signer_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow.entities.AggregatedSignature)
}
AggregatedSignature::AggregatedSignature(const AggregatedSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signer_ids_(from.signer_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  verifier_signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_verifier_signatures().empty()) {
    verifier_signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verifier_signatures(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow.entities.AggregatedSignature)
}

void AggregatedSignature::SharedCtor() {
verifier_signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AggregatedSignature::~AggregatedSignature() {
  // @@protoc_insertion_point(destructor:flow.entities.AggregatedSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggregatedSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  verifier_signatures_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggregatedSignature::ArenaDtor(void* object) {
  AggregatedSignature* _this = reinterpret_cast< AggregatedSignature* >(object);
  (void)_this;
}
void AggregatedSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregatedSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregatedSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.entities.AggregatedSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signer_ids_.Clear();
  verifier_signatures_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregatedSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes verifier_signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_verifier_signatures();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes signer_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signer_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregatedSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.entities.AggregatedSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes verifier_signatures = 1;
  if (!this->_internal_verifier_signatures().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_verifier_signatures(), target);
  }

  // repeated bytes signer_ids = 2;
  for (int i = 0, n = this->_internal_signer_ids_size(); i < n; i++) {
    const auto& s = this->_internal_signer_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.entities.AggregatedSignature)
  return target;
}

size_t AggregatedSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.entities.AggregatedSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signer_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signer_ids_.size());
  for (int i = 0, n = signer_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signer_ids_.Get(i));
  }

  // bytes verifier_signatures = 1;
  if (!this->_internal_verifier_signatures().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_verifier_signatures());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregatedSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggregatedSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregatedSignature::GetClassData() const { return &_class_data_; }

void AggregatedSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggregatedSignature *>(to)->MergeFrom(
      static_cast<const AggregatedSignature &>(from));
}


void AggregatedSignature::MergeFrom(const AggregatedSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.entities.AggregatedSignature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signer_ids_.MergeFrom(from.signer_ids_);
  if (!from._internal_verifier_signatures().empty()) {
    _internal_set_verifier_signatures(from._internal_verifier_signatures());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregatedSignature::CopyFrom(const AggregatedSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.entities.AggregatedSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedSignature::IsInitialized() const {
  return true;
}

void AggregatedSignature::InternalSwap(AggregatedSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signer_ids_.InternalSwap(&other->signer_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verifier_signatures_, lhs_arena,
      &other->verifier_signatures_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregatedSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_getter, &descriptor_table_flow_2fentities_2fblock_5fseal_2eproto_once,
      file_level_metadata_flow_2fentities_2fblock_5fseal_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow::entities::BlockSeal* Arena::CreateMaybeMessage< ::flow::entities::BlockSeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::BlockSeal >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::entities::AggregatedSignature* Arena::CreateMaybeMessage< ::flow::entities::AggregatedSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::entities::AggregatedSignature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
