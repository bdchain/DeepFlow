// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/execution_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fexecution_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fexecution_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2fexecution_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2fexecution_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fexecution_5fresult_2eproto;
namespace flow {
namespace entities {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ExecutionReceiptMeta;
struct ExecutionReceiptMetaDefaultTypeInternal;
extern ExecutionReceiptMetaDefaultTypeInternal _ExecutionReceiptMeta_default_instance_;
class ExecutionResult;
struct ExecutionResultDefaultTypeInternal;
extern ExecutionResultDefaultTypeInternal _ExecutionResult_default_instance_;
class ServiceEvent;
struct ServiceEventDefaultTypeInternal;
extern ServiceEventDefaultTypeInternal _ServiceEvent_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::Chunk* Arena::CreateMaybeMessage<::flow::entities::Chunk>(Arena*);
template<> ::flow::entities::ExecutionReceiptMeta* Arena::CreateMaybeMessage<::flow::entities::ExecutionReceiptMeta>(Arena*);
template<> ::flow::entities::ExecutionResult* Arena::CreateMaybeMessage<::flow::entities::ExecutionResult>(Arena*);
template<> ::flow::entities::ServiceEvent* Arena::CreateMaybeMessage<::flow::entities::ServiceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class ExecutionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.ExecutionResult) */ {
 public:
  inline ExecutionResult() : ExecutionResult(nullptr) {}
  ~ExecutionResult() override;
  explicit constexpr ExecutionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionResult(const ExecutionResult& from);
  ExecutionResult(ExecutionResult&& from) noexcept
    : ExecutionResult() {
    *this = ::std::move(from);
  }

  inline ExecutionResult& operator=(const ExecutionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionResult& operator=(ExecutionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionResult* internal_default_instance() {
    return reinterpret_cast<const ExecutionResult*>(
               &_ExecutionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutionResult& a, ExecutionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionResult* New() const final {
    return new ExecutionResult();
  }

  ExecutionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecutionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.ExecutionResult";
  }
  protected:
  explicit ExecutionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 3,
    kServiceEventsFieldNumber = 4,
    kPreviousResultIdFieldNumber = 1,
    kBlockIdFieldNumber = 2,
    kExecutionDataIdFieldNumber = 5,
  };
  // repeated .flow.entities.Chunk chunks = 3;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::flow::entities::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Chunk >*
      mutable_chunks();
  private:
  const ::flow::entities::Chunk& _internal_chunks(int index) const;
  ::flow::entities::Chunk* _internal_add_chunks();
  public:
  const ::flow::entities::Chunk& chunks(int index) const;
  ::flow::entities::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Chunk >&
      chunks() const;

  // repeated .flow.entities.ServiceEvent service_events = 4;
  int service_events_size() const;
  private:
  int _internal_service_events_size() const;
  public:
  void clear_service_events();
  ::flow::entities::ServiceEvent* mutable_service_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ServiceEvent >*
      mutable_service_events();
  private:
  const ::flow::entities::ServiceEvent& _internal_service_events(int index) const;
  ::flow::entities::ServiceEvent* _internal_add_service_events();
  public:
  const ::flow::entities::ServiceEvent& service_events(int index) const;
  ::flow::entities::ServiceEvent* add_service_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ServiceEvent >&
      service_events() const;

  // bytes previous_result_id = 1;
  void clear_previous_result_id();
  const std::string& previous_result_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_result_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_result_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_result_id();
  void set_allocated_previous_result_id(std::string* previous_result_id);
  private:
  const std::string& _internal_previous_result_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_result_id(const std::string& value);
  std::string* _internal_mutable_previous_result_id();
  public:

  // bytes block_id = 2;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // bytes execution_data_id = 5;
  void clear_execution_data_id();
  const std::string& execution_data_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execution_data_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execution_data_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_execution_data_id();
  void set_allocated_execution_data_id(std::string* execution_data_id);
  private:
  const std::string& _internal_execution_data_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execution_data_id(const std::string& value);
  std::string* _internal_mutable_execution_data_id();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.ExecutionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Chunk > chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ServiceEvent > service_events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_result_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execution_data_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fexecution_5fresult_2eproto;
};
// -------------------------------------------------------------------

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return new Chunk();
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartStateFieldNumber = 2,
    kEventCollectionFieldNumber = 3,
    kBlockIdFieldNumber = 4,
    kEndStateFieldNumber = 8,
    kCollectionIndexFieldNumber = 1,
    kNumberOfTransactionsFieldNumber = 6,
    kTotalComputationUsedFieldNumber = 5,
    kIndexFieldNumber = 7,
  };
  // bytes start_state = 2;
  void clear_start_state();
  const std::string& start_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_state();
  void set_allocated_start_state(std::string* start_state);
  private:
  const std::string& _internal_start_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_state(const std::string& value);
  std::string* _internal_mutable_start_state();
  public:

  // bytes event_collection = 3;
  void clear_event_collection();
  const std::string& event_collection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_collection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_collection();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_collection();
  void set_allocated_event_collection(std::string* event_collection);
  private:
  const std::string& _internal_event_collection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_collection(const std::string& value);
  std::string* _internal_mutable_event_collection();
  public:

  // bytes block_id = 4;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // bytes end_state = 8;
  void clear_end_state();
  const std::string& end_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_end_state();
  void set_allocated_end_state(std::string* end_state);
  private:
  const std::string& _internal_end_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_state(const std::string& value);
  std::string* _internal_mutable_end_state();
  public:

  // uint32 CollectionIndex = 1;
  void clear_collectionindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 collectionindex() const;
  void set_collectionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_collectionindex() const;
  void _internal_set_collectionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_of_transactions = 6;
  void clear_number_of_transactions();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_transactions() const;
  void set_number_of_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_transactions() const;
  void _internal_set_number_of_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 total_computation_used = 5;
  void clear_total_computation_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_computation_used() const;
  void set_total_computation_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_computation_used() const;
  void _internal_set_total_computation_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index = 7;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 collectionindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_transactions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_computation_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fexecution_5fresult_2eproto;
};
// -------------------------------------------------------------------

class ServiceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.ServiceEvent) */ {
 public:
  inline ServiceEvent() : ServiceEvent(nullptr) {}
  ~ServiceEvent() override;
  explicit constexpr ServiceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceEvent(const ServiceEvent& from);
  ServiceEvent(ServiceEvent&& from) noexcept
    : ServiceEvent() {
    *this = ::std::move(from);
  }

  inline ServiceEvent& operator=(const ServiceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceEvent& operator=(ServiceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceEvent* internal_default_instance() {
    return reinterpret_cast<const ServiceEvent*>(
               &_ServiceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceEvent& a, ServiceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceEvent* New() const final {
    return new ServiceEvent();
  }

  ServiceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.ServiceEvent";
  }
  protected:
  explicit ServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.ServiceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fexecution_5fresult_2eproto;
};
// -------------------------------------------------------------------

class ExecutionReceiptMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.ExecutionReceiptMeta) */ {
 public:
  inline ExecutionReceiptMeta() : ExecutionReceiptMeta(nullptr) {}
  ~ExecutionReceiptMeta() override;
  explicit constexpr ExecutionReceiptMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionReceiptMeta(const ExecutionReceiptMeta& from);
  ExecutionReceiptMeta(ExecutionReceiptMeta&& from) noexcept
    : ExecutionReceiptMeta() {
    *this = ::std::move(from);
  }

  inline ExecutionReceiptMeta& operator=(const ExecutionReceiptMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionReceiptMeta& operator=(ExecutionReceiptMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionReceiptMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionReceiptMeta* internal_default_instance() {
    return reinterpret_cast<const ExecutionReceiptMeta*>(
               &_ExecutionReceiptMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecutionReceiptMeta& a, ExecutionReceiptMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionReceiptMeta* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionReceiptMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionReceiptMeta* New() const final {
    return new ExecutionReceiptMeta();
  }

  ExecutionReceiptMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionReceiptMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionReceiptMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecutionReceiptMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionReceiptMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.ExecutionReceiptMeta";
  }
  protected:
  explicit ExecutionReceiptMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpocksFieldNumber = 3,
    kExecutorIdFieldNumber = 1,
    kResultIdFieldNumber = 2,
    kExecutorSignatureFieldNumber = 4,
  };
  // repeated bytes spocks = 3;
  int spocks_size() const;
  private:
  int _internal_spocks_size() const;
  public:
  void clear_spocks();
  const std::string& spocks(int index) const;
  std::string* mutable_spocks(int index);
  void set_spocks(int index, const std::string& value);
  void set_spocks(int index, std::string&& value);
  void set_spocks(int index, const char* value);
  void set_spocks(int index, const void* value, size_t size);
  std::string* add_spocks();
  void add_spocks(const std::string& value);
  void add_spocks(std::string&& value);
  void add_spocks(const char* value);
  void add_spocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& spocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_spocks();
  private:
  const std::string& _internal_spocks(int index) const;
  std::string* _internal_add_spocks();
  public:

  // bytes executor_id = 1;
  void clear_executor_id();
  const std::string& executor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_executor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_executor_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_executor_id();
  void set_allocated_executor_id(std::string* executor_id);
  private:
  const std::string& _internal_executor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor_id(const std::string& value);
  std::string* _internal_mutable_executor_id();
  public:

  // bytes result_id = 2;
  void clear_result_id();
  const std::string& result_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_id();
  void set_allocated_result_id(std::string* result_id);
  private:
  const std::string& _internal_result_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_id(const std::string& value);
  std::string* _internal_mutable_result_id();
  public:

  // bytes executor_signature = 4;
  void clear_executor_signature();
  const std::string& executor_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_executor_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_executor_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_executor_signature();
  void set_allocated_executor_signature(std::string* executor_signature);
  private:
  const std::string& _internal_executor_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor_signature(const std::string& value);
  std::string* _internal_mutable_executor_signature();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.ExecutionReceiptMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> spocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executor_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fexecution_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionResult

// bytes previous_result_id = 1;
inline void ExecutionResult::clear_previous_result_id() {
  previous_result_id_.ClearToEmpty();
}
inline const std::string& ExecutionResult::previous_result_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionResult.previous_result_id)
  return _internal_previous_result_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionResult::set_previous_result_id(ArgT0&& arg0, ArgT... args) {
 
 previous_result_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionResult.previous_result_id)
}
inline std::string* ExecutionResult::mutable_previous_result_id() {
  std::string* _s = _internal_mutable_previous_result_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionResult.previous_result_id)
  return _s;
}
inline const std::string& ExecutionResult::_internal_previous_result_id() const {
  return previous_result_id_.Get();
}
inline void ExecutionResult::_internal_set_previous_result_id(const std::string& value) {
  
  previous_result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionResult::_internal_mutable_previous_result_id() {
  
  return previous_result_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionResult::release_previous_result_id() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionResult.previous_result_id)
  return previous_result_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionResult::set_allocated_previous_result_id(std::string* previous_result_id) {
  if (previous_result_id != nullptr) {
    
  } else {
    
  }
  previous_result_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_result_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionResult.previous_result_id)
}

// bytes block_id = 2;
inline void ExecutionResult::clear_block_id() {
  block_id_.ClearToEmpty();
}
inline const std::string& ExecutionResult::block_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionResult.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionResult::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionResult.block_id)
}
inline std::string* ExecutionResult::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionResult.block_id)
  return _s;
}
inline const std::string& ExecutionResult::_internal_block_id() const {
  return block_id_.Get();
}
inline void ExecutionResult::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionResult::_internal_mutable_block_id() {
  
  return block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionResult::release_block_id() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionResult.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionResult::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionResult.block_id)
}

// repeated .flow.entities.Chunk chunks = 3;
inline int ExecutionResult::_internal_chunks_size() const {
  return chunks_.size();
}
inline int ExecutionResult::chunks_size() const {
  return _internal_chunks_size();
}
inline void ExecutionResult::clear_chunks() {
  chunks_.Clear();
}
inline ::flow::entities::Chunk* ExecutionResult::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionResult.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Chunk >*
ExecutionResult::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.ExecutionResult.chunks)
  return &chunks_;
}
inline const ::flow::entities::Chunk& ExecutionResult::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::flow::entities::Chunk& ExecutionResult::chunks(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionResult.chunks)
  return _internal_chunks(index);
}
inline ::flow::entities::Chunk* ExecutionResult::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::flow::entities::Chunk* ExecutionResult::add_chunks() {
  ::flow::entities::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:flow.entities.ExecutionResult.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::Chunk >&
ExecutionResult::chunks() const {
  // @@protoc_insertion_point(field_list:flow.entities.ExecutionResult.chunks)
  return chunks_;
}

// repeated .flow.entities.ServiceEvent service_events = 4;
inline int ExecutionResult::_internal_service_events_size() const {
  return service_events_.size();
}
inline int ExecutionResult::service_events_size() const {
  return _internal_service_events_size();
}
inline void ExecutionResult::clear_service_events() {
  service_events_.Clear();
}
inline ::flow::entities::ServiceEvent* ExecutionResult::mutable_service_events(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionResult.service_events)
  return service_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ServiceEvent >*
ExecutionResult::mutable_service_events() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.ExecutionResult.service_events)
  return &service_events_;
}
inline const ::flow::entities::ServiceEvent& ExecutionResult::_internal_service_events(int index) const {
  return service_events_.Get(index);
}
inline const ::flow::entities::ServiceEvent& ExecutionResult::service_events(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionResult.service_events)
  return _internal_service_events(index);
}
inline ::flow::entities::ServiceEvent* ExecutionResult::_internal_add_service_events() {
  return service_events_.Add();
}
inline ::flow::entities::ServiceEvent* ExecutionResult::add_service_events() {
  ::flow::entities::ServiceEvent* _add = _internal_add_service_events();
  // @@protoc_insertion_point(field_add:flow.entities.ExecutionResult.service_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ServiceEvent >&
ExecutionResult::service_events() const {
  // @@protoc_insertion_point(field_list:flow.entities.ExecutionResult.service_events)
  return service_events_;
}

// bytes execution_data_id = 5;
inline void ExecutionResult::clear_execution_data_id() {
  execution_data_id_.ClearToEmpty();
}
inline const std::string& ExecutionResult::execution_data_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionResult.execution_data_id)
  return _internal_execution_data_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionResult::set_execution_data_id(ArgT0&& arg0, ArgT... args) {
 
 execution_data_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionResult.execution_data_id)
}
inline std::string* ExecutionResult::mutable_execution_data_id() {
  std::string* _s = _internal_mutable_execution_data_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionResult.execution_data_id)
  return _s;
}
inline const std::string& ExecutionResult::_internal_execution_data_id() const {
  return execution_data_id_.Get();
}
inline void ExecutionResult::_internal_set_execution_data_id(const std::string& value) {
  
  execution_data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionResult::_internal_mutable_execution_data_id() {
  
  return execution_data_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionResult::release_execution_data_id() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionResult.execution_data_id)
  return execution_data_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionResult::set_allocated_execution_data_id(std::string* execution_data_id) {
  if (execution_data_id != nullptr) {
    
  } else {
    
  }
  execution_data_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execution_data_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionResult.execution_data_id)
}

// -------------------------------------------------------------------

// Chunk

// uint32 CollectionIndex = 1;
inline void Chunk::clear_collectionindex() {
  collectionindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::_internal_collectionindex() const {
  return collectionindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::collectionindex() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.CollectionIndex)
  return _internal_collectionindex();
}
inline void Chunk::_internal_set_collectionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  collectionindex_ = value;
}
inline void Chunk::set_collectionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_collectionindex(value);
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.CollectionIndex)
}

// bytes start_state = 2;
inline void Chunk::clear_start_state() {
  start_state_.ClearToEmpty();
}
inline const std::string& Chunk::start_state() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.start_state)
  return _internal_start_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunk::set_start_state(ArgT0&& arg0, ArgT... args) {
 
 start_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.start_state)
}
inline std::string* Chunk::mutable_start_state() {
  std::string* _s = _internal_mutable_start_state();
  // @@protoc_insertion_point(field_mutable:flow.entities.Chunk.start_state)
  return _s;
}
inline const std::string& Chunk::_internal_start_state() const {
  return start_state_.Get();
}
inline void Chunk::_internal_set_start_state(const std::string& value) {
  
  start_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunk::_internal_mutable_start_state() {
  
  return start_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunk::release_start_state() {
  // @@protoc_insertion_point(field_release:flow.entities.Chunk.start_state)
  return start_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunk::set_allocated_start_state(std::string* start_state) {
  if (start_state != nullptr) {
    
  } else {
    
  }
  start_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Chunk.start_state)
}

// bytes event_collection = 3;
inline void Chunk::clear_event_collection() {
  event_collection_.ClearToEmpty();
}
inline const std::string& Chunk::event_collection() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.event_collection)
  return _internal_event_collection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunk::set_event_collection(ArgT0&& arg0, ArgT... args) {
 
 event_collection_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.event_collection)
}
inline std::string* Chunk::mutable_event_collection() {
  std::string* _s = _internal_mutable_event_collection();
  // @@protoc_insertion_point(field_mutable:flow.entities.Chunk.event_collection)
  return _s;
}
inline const std::string& Chunk::_internal_event_collection() const {
  return event_collection_.Get();
}
inline void Chunk::_internal_set_event_collection(const std::string& value) {
  
  event_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunk::_internal_mutable_event_collection() {
  
  return event_collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunk::release_event_collection() {
  // @@protoc_insertion_point(field_release:flow.entities.Chunk.event_collection)
  return event_collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunk::set_allocated_event_collection(std::string* event_collection) {
  if (event_collection != nullptr) {
    
  } else {
    
  }
  event_collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_collection,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Chunk.event_collection)
}

// bytes block_id = 4;
inline void Chunk::clear_block_id() {
  block_id_.ClearToEmpty();
}
inline const std::string& Chunk::block_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunk::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.block_id)
}
inline std::string* Chunk::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.Chunk.block_id)
  return _s;
}
inline const std::string& Chunk::_internal_block_id() const {
  return block_id_.Get();
}
inline void Chunk::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunk::_internal_mutable_block_id() {
  
  return block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunk::release_block_id() {
  // @@protoc_insertion_point(field_release:flow.entities.Chunk.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunk::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Chunk.block_id)
}

// uint64 total_computation_used = 5;
inline void Chunk::clear_total_computation_used() {
  total_computation_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chunk::_internal_total_computation_used() const {
  return total_computation_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chunk::total_computation_used() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.total_computation_used)
  return _internal_total_computation_used();
}
inline void Chunk::_internal_set_total_computation_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_computation_used_ = value;
}
inline void Chunk::set_total_computation_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_computation_used(value);
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.total_computation_used)
}

// uint32 number_of_transactions = 6;
inline void Chunk::clear_number_of_transactions() {
  number_of_transactions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::_internal_number_of_transactions() const {
  return number_of_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::number_of_transactions() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.number_of_transactions)
  return _internal_number_of_transactions();
}
inline void Chunk::_internal_set_number_of_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_transactions_ = value;
}
inline void Chunk::set_number_of_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_transactions(value);
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.number_of_transactions)
}

// uint64 index = 7;
inline void Chunk::clear_index() {
  index_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chunk::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Chunk::index() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.index)
  return _internal_index();
}
inline void Chunk::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void Chunk::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.index)
}

// bytes end_state = 8;
inline void Chunk::clear_end_state() {
  end_state_.ClearToEmpty();
}
inline const std::string& Chunk::end_state() const {
  // @@protoc_insertion_point(field_get:flow.entities.Chunk.end_state)
  return _internal_end_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunk::set_end_state(ArgT0&& arg0, ArgT... args) {
 
 end_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Chunk.end_state)
}
inline std::string* Chunk::mutable_end_state() {
  std::string* _s = _internal_mutable_end_state();
  // @@protoc_insertion_point(field_mutable:flow.entities.Chunk.end_state)
  return _s;
}
inline const std::string& Chunk::_internal_end_state() const {
  return end_state_.Get();
}
inline void Chunk::_internal_set_end_state(const std::string& value) {
  
  end_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunk::_internal_mutable_end_state() {
  
  return end_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunk::release_end_state() {
  // @@protoc_insertion_point(field_release:flow.entities.Chunk.end_state)
  return end_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunk::set_allocated_end_state(std::string* end_state) {
  if (end_state != nullptr) {
    
  } else {
    
  }
  end_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Chunk.end_state)
}

// -------------------------------------------------------------------

// ServiceEvent

// string type = 1;
inline void ServiceEvent::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ServiceEvent::type() const {
  // @@protoc_insertion_point(field_get:flow.entities.ServiceEvent.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEvent::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ServiceEvent.type)
}
inline std::string* ServiceEvent::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:flow.entities.ServiceEvent.type)
  return _s;
}
inline const std::string& ServiceEvent::_internal_type() const {
  return type_.Get();
}
inline void ServiceEvent::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceEvent::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceEvent::release_type() {
  // @@protoc_insertion_point(field_release:flow.entities.ServiceEvent.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceEvent::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ServiceEvent.type)
}

// bytes payload = 2;
inline void ServiceEvent::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ServiceEvent::payload() const {
  // @@protoc_insertion_point(field_get:flow.entities.ServiceEvent.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEvent::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ServiceEvent.payload)
}
inline std::string* ServiceEvent::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:flow.entities.ServiceEvent.payload)
  return _s;
}
inline const std::string& ServiceEvent::_internal_payload() const {
  return payload_.Get();
}
inline void ServiceEvent::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceEvent::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceEvent::release_payload() {
  // @@protoc_insertion_point(field_release:flow.entities.ServiceEvent.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceEvent::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ServiceEvent.payload)
}

// -------------------------------------------------------------------

// ExecutionReceiptMeta

// bytes executor_id = 1;
inline void ExecutionReceiptMeta::clear_executor_id() {
  executor_id_.ClearToEmpty();
}
inline const std::string& ExecutionReceiptMeta::executor_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionReceiptMeta.executor_id)
  return _internal_executor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionReceiptMeta::set_executor_id(ArgT0&& arg0, ArgT... args) {
 
 executor_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionReceiptMeta.executor_id)
}
inline std::string* ExecutionReceiptMeta::mutable_executor_id() {
  std::string* _s = _internal_mutable_executor_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionReceiptMeta.executor_id)
  return _s;
}
inline const std::string& ExecutionReceiptMeta::_internal_executor_id() const {
  return executor_id_.Get();
}
inline void ExecutionReceiptMeta::_internal_set_executor_id(const std::string& value) {
  
  executor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::_internal_mutable_executor_id() {
  
  return executor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::release_executor_id() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionReceiptMeta.executor_id)
  return executor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionReceiptMeta::set_allocated_executor_id(std::string* executor_id) {
  if (executor_id != nullptr) {
    
  } else {
    
  }
  executor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executor_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionReceiptMeta.executor_id)
}

// bytes result_id = 2;
inline void ExecutionReceiptMeta::clear_result_id() {
  result_id_.ClearToEmpty();
}
inline const std::string& ExecutionReceiptMeta::result_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionReceiptMeta.result_id)
  return _internal_result_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionReceiptMeta::set_result_id(ArgT0&& arg0, ArgT... args) {
 
 result_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionReceiptMeta.result_id)
}
inline std::string* ExecutionReceiptMeta::mutable_result_id() {
  std::string* _s = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionReceiptMeta.result_id)
  return _s;
}
inline const std::string& ExecutionReceiptMeta::_internal_result_id() const {
  return result_id_.Get();
}
inline void ExecutionReceiptMeta::_internal_set_result_id(const std::string& value) {
  
  result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::_internal_mutable_result_id() {
  
  return result_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::release_result_id() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionReceiptMeta.result_id)
  return result_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionReceiptMeta::set_allocated_result_id(std::string* result_id) {
  if (result_id != nullptr) {
    
  } else {
    
  }
  result_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionReceiptMeta.result_id)
}

// repeated bytes spocks = 3;
inline int ExecutionReceiptMeta::_internal_spocks_size() const {
  return spocks_.size();
}
inline int ExecutionReceiptMeta::spocks_size() const {
  return _internal_spocks_size();
}
inline void ExecutionReceiptMeta::clear_spocks() {
  spocks_.Clear();
}
inline std::string* ExecutionReceiptMeta::add_spocks() {
  std::string* _s = _internal_add_spocks();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.ExecutionReceiptMeta.spocks)
  return _s;
}
inline const std::string& ExecutionReceiptMeta::_internal_spocks(int index) const {
  return spocks_.Get(index);
}
inline const std::string& ExecutionReceiptMeta::spocks(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionReceiptMeta.spocks)
  return _internal_spocks(index);
}
inline std::string* ExecutionReceiptMeta::mutable_spocks(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionReceiptMeta.spocks)
  return spocks_.Mutable(index);
}
inline void ExecutionReceiptMeta::set_spocks(int index, const std::string& value) {
  spocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::set_spocks(int index, std::string&& value) {
  spocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::set_spocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::set_spocks(int index, const void* value, size_t size) {
  spocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.ExecutionReceiptMeta.spocks)
}
inline std::string* ExecutionReceiptMeta::_internal_add_spocks() {
  return spocks_.Add();
}
inline void ExecutionReceiptMeta::add_spocks(const std::string& value) {
  spocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::add_spocks(std::string&& value) {
  spocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::add_spocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.ExecutionReceiptMeta.spocks)
}
inline void ExecutionReceiptMeta::add_spocks(const void* value, size_t size) {
  spocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.ExecutionReceiptMeta.spocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecutionReceiptMeta::spocks() const {
  // @@protoc_insertion_point(field_list:flow.entities.ExecutionReceiptMeta.spocks)
  return spocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecutionReceiptMeta::mutable_spocks() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.ExecutionReceiptMeta.spocks)
  return &spocks_;
}

// bytes executor_signature = 4;
inline void ExecutionReceiptMeta::clear_executor_signature() {
  executor_signature_.ClearToEmpty();
}
inline const std::string& ExecutionReceiptMeta::executor_signature() const {
  // @@protoc_insertion_point(field_get:flow.entities.ExecutionReceiptMeta.executor_signature)
  return _internal_executor_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionReceiptMeta::set_executor_signature(ArgT0&& arg0, ArgT... args) {
 
 executor_signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.ExecutionReceiptMeta.executor_signature)
}
inline std::string* ExecutionReceiptMeta::mutable_executor_signature() {
  std::string* _s = _internal_mutable_executor_signature();
  // @@protoc_insertion_point(field_mutable:flow.entities.ExecutionReceiptMeta.executor_signature)
  return _s;
}
inline const std::string& ExecutionReceiptMeta::_internal_executor_signature() const {
  return executor_signature_.Get();
}
inline void ExecutionReceiptMeta::_internal_set_executor_signature(const std::string& value) {
  
  executor_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::_internal_mutable_executor_signature() {
  
  return executor_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionReceiptMeta::release_executor_signature() {
  // @@protoc_insertion_point(field_release:flow.entities.ExecutionReceiptMeta.executor_signature)
  return executor_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionReceiptMeta::set_allocated_executor_signature(std::string* executor_signature) {
  if (executor_signature != nullptr) {
    
  } else {
    
  }
  executor_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executor_signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.ExecutionReceiptMeta.executor_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fexecution_5fresult_2eproto
