// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/block_seal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fseal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fseal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2fblock_5fseal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2fblock_5fseal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fblock_5fseal_2eproto;
namespace flow {
namespace entities {
class AggregatedSignature;
struct AggregatedSignatureDefaultTypeInternal;
extern AggregatedSignatureDefaultTypeInternal _AggregatedSignature_default_instance_;
class BlockSeal;
struct BlockSealDefaultTypeInternal;
extern BlockSealDefaultTypeInternal _BlockSeal_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::AggregatedSignature* Arena::CreateMaybeMessage<::flow::entities::AggregatedSignature>(Arena*);
template<> ::flow::entities::BlockSeal* Arena::CreateMaybeMessage<::flow::entities::BlockSeal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class BlockSeal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.BlockSeal) */ {
 public:
  inline BlockSeal() : BlockSeal(nullptr) {}
  ~BlockSeal() override;
  explicit constexpr BlockSeal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockSeal(const BlockSeal& from);
  BlockSeal(BlockSeal&& from) noexcept
    : BlockSeal() {
    *this = ::std::move(from);
  }

  inline BlockSeal& operator=(const BlockSeal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockSeal& operator=(BlockSeal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockSeal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockSeal* internal_default_instance() {
    return reinterpret_cast<const BlockSeal*>(
               &_BlockSeal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockSeal& a, BlockSeal& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockSeal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockSeal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockSeal* New() const final {
    return new BlockSeal();
  }

  BlockSeal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockSeal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockSeal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockSeal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockSeal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.BlockSeal";
  }
  protected:
  explicit BlockSeal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutionReceiptSignaturesFieldNumber = 3,
    kResultApprovalSignaturesFieldNumber = 4,
    kAggregatedApprovalSigsFieldNumber = 7,
    kBlockIdFieldNumber = 1,
    kExecutionReceiptIdFieldNumber = 2,
    kFinalStateFieldNumber = 5,
    kResultIdFieldNumber = 6,
  };
  // repeated bytes execution_receipt_signatures = 3;
  int execution_receipt_signatures_size() const;
  private:
  int _internal_execution_receipt_signatures_size() const;
  public:
  void clear_execution_receipt_signatures();
  const std::string& execution_receipt_signatures(int index) const;
  std::string* mutable_execution_receipt_signatures(int index);
  void set_execution_receipt_signatures(int index, const std::string& value);
  void set_execution_receipt_signatures(int index, std::string&& value);
  void set_execution_receipt_signatures(int index, const char* value);
  void set_execution_receipt_signatures(int index, const void* value, size_t size);
  std::string* add_execution_receipt_signatures();
  void add_execution_receipt_signatures(const std::string& value);
  void add_execution_receipt_signatures(std::string&& value);
  void add_execution_receipt_signatures(const char* value);
  void add_execution_receipt_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& execution_receipt_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_execution_receipt_signatures();
  private:
  const std::string& _internal_execution_receipt_signatures(int index) const;
  std::string* _internal_add_execution_receipt_signatures();
  public:

  // repeated bytes result_approval_signatures = 4;
  int result_approval_signatures_size() const;
  private:
  int _internal_result_approval_signatures_size() const;
  public:
  void clear_result_approval_signatures();
  const std::string& result_approval_signatures(int index) const;
  std::string* mutable_result_approval_signatures(int index);
  void set_result_approval_signatures(int index, const std::string& value);
  void set_result_approval_signatures(int index, std::string&& value);
  void set_result_approval_signatures(int index, const char* value);
  void set_result_approval_signatures(int index, const void* value, size_t size);
  std::string* add_result_approval_signatures();
  void add_result_approval_signatures(const std::string& value);
  void add_result_approval_signatures(std::string&& value);
  void add_result_approval_signatures(const char* value);
  void add_result_approval_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& result_approval_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_result_approval_signatures();
  private:
  const std::string& _internal_result_approval_signatures(int index) const;
  std::string* _internal_add_result_approval_signatures();
  public:

  // repeated .flow.entities.AggregatedSignature aggregated_approval_sigs = 7;
  int aggregated_approval_sigs_size() const;
  private:
  int _internal_aggregated_approval_sigs_size() const;
  public:
  void clear_aggregated_approval_sigs();
  ::flow::entities::AggregatedSignature* mutable_aggregated_approval_sigs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AggregatedSignature >*
      mutable_aggregated_approval_sigs();
  private:
  const ::flow::entities::AggregatedSignature& _internal_aggregated_approval_sigs(int index) const;
  ::flow::entities::AggregatedSignature* _internal_add_aggregated_approval_sigs();
  public:
  const ::flow::entities::AggregatedSignature& aggregated_approval_sigs(int index) const;
  ::flow::entities::AggregatedSignature* add_aggregated_approval_sigs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AggregatedSignature >&
      aggregated_approval_sigs() const;

  // bytes block_id = 1;
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // bytes execution_receipt_id = 2;
  void clear_execution_receipt_id();
  const std::string& execution_receipt_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_execution_receipt_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_execution_receipt_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_execution_receipt_id();
  void set_allocated_execution_receipt_id(std::string* execution_receipt_id);
  private:
  const std::string& _internal_execution_receipt_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execution_receipt_id(const std::string& value);
  std::string* _internal_mutable_execution_receipt_id();
  public:

  // bytes final_state = 5;
  void clear_final_state();
  const std::string& final_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_final_state();
  void set_allocated_final_state(std::string* final_state);
  private:
  const std::string& _internal_final_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_state(const std::string& value);
  std::string* _internal_mutable_final_state();
  public:

  // bytes result_id = 6;
  void clear_result_id();
  const std::string& result_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_id();
  void set_allocated_result_id(std::string* result_id);
  private:
  const std::string& _internal_result_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_id(const std::string& value);
  std::string* _internal_mutable_result_id();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.BlockSeal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> execution_receipt_signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> result_approval_signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AggregatedSignature > aggregated_approval_sigs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execution_receipt_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fblock_5fseal_2eproto;
};
// -------------------------------------------------------------------

class AggregatedSignature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.AggregatedSignature) */ {
 public:
  inline AggregatedSignature() : AggregatedSignature(nullptr) {}
  ~AggregatedSignature() override;
  explicit constexpr AggregatedSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregatedSignature(const AggregatedSignature& from);
  AggregatedSignature(AggregatedSignature&& from) noexcept
    : AggregatedSignature() {
    *this = ::std::move(from);
  }

  inline AggregatedSignature& operator=(const AggregatedSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedSignature& operator=(AggregatedSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregatedSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregatedSignature* internal_default_instance() {
    return reinterpret_cast<const AggregatedSignature*>(
               &_AggregatedSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AggregatedSignature& a, AggregatedSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedSignature* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregatedSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedSignature* New() const final {
    return new AggregatedSignature();
  }

  AggregatedSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedSignature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregatedSignature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggregatedSignature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatedSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.AggregatedSignature";
  }
  protected:
  explicit AggregatedSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignerIdsFieldNumber = 2,
    kVerifierSignaturesFieldNumber = 1,
  };
  // repeated bytes signer_ids = 2;
  int signer_ids_size() const;
  private:
  int _internal_signer_ids_size() const;
  public:
  void clear_signer_ids();
  const std::string& signer_ids(int index) const;
  std::string* mutable_signer_ids(int index);
  void set_signer_ids(int index, const std::string& value);
  void set_signer_ids(int index, std::string&& value);
  void set_signer_ids(int index, const char* value);
  void set_signer_ids(int index, const void* value, size_t size);
  std::string* add_signer_ids();
  void add_signer_ids(const std::string& value);
  void add_signer_ids(std::string&& value);
  void add_signer_ids(const char* value);
  void add_signer_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signer_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signer_ids();
  private:
  const std::string& _internal_signer_ids(int index) const;
  std::string* _internal_add_signer_ids();
  public:

  // bytes verifier_signatures = 1;
  void clear_verifier_signatures();
  const std::string& verifier_signatures() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verifier_signatures(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verifier_signatures();
  PROTOBUF_MUST_USE_RESULT std::string* release_verifier_signatures();
  void set_allocated_verifier_signatures(std::string* verifier_signatures);
  private:
  const std::string& _internal_verifier_signatures() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verifier_signatures(const std::string& value);
  std::string* _internal_mutable_verifier_signatures();
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.AggregatedSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signer_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verifier_signatures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fblock_5fseal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockSeal

// bytes block_id = 1;
inline void BlockSeal::clear_block_id() {
  block_id_.ClearToEmpty();
}
inline const std::string& BlockSeal::block_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockSeal::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.block_id)
}
inline std::string* BlockSeal::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.block_id)
  return _s;
}
inline const std::string& BlockSeal::_internal_block_id() const {
  return block_id_.Get();
}
inline void BlockSeal::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockSeal::_internal_mutable_block_id() {
  
  return block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockSeal::release_block_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockSeal.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockSeal::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockSeal.block_id)
}

// bytes execution_receipt_id = 2;
inline void BlockSeal::clear_execution_receipt_id() {
  execution_receipt_id_.ClearToEmpty();
}
inline const std::string& BlockSeal::execution_receipt_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.execution_receipt_id)
  return _internal_execution_receipt_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockSeal::set_execution_receipt_id(ArgT0&& arg0, ArgT... args) {
 
 execution_receipt_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.execution_receipt_id)
}
inline std::string* BlockSeal::mutable_execution_receipt_id() {
  std::string* _s = _internal_mutable_execution_receipt_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.execution_receipt_id)
  return _s;
}
inline const std::string& BlockSeal::_internal_execution_receipt_id() const {
  return execution_receipt_id_.Get();
}
inline void BlockSeal::_internal_set_execution_receipt_id(const std::string& value) {
  
  execution_receipt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockSeal::_internal_mutable_execution_receipt_id() {
  
  return execution_receipt_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockSeal::release_execution_receipt_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockSeal.execution_receipt_id)
  return execution_receipt_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockSeal::set_allocated_execution_receipt_id(std::string* execution_receipt_id) {
  if (execution_receipt_id != nullptr) {
    
  } else {
    
  }
  execution_receipt_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execution_receipt_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockSeal.execution_receipt_id)
}

// repeated bytes execution_receipt_signatures = 3;
inline int BlockSeal::_internal_execution_receipt_signatures_size() const {
  return execution_receipt_signatures_.size();
}
inline int BlockSeal::execution_receipt_signatures_size() const {
  return _internal_execution_receipt_signatures_size();
}
inline void BlockSeal::clear_execution_receipt_signatures() {
  execution_receipt_signatures_.Clear();
}
inline std::string* BlockSeal::add_execution_receipt_signatures() {
  std::string* _s = _internal_add_execution_receipt_signatures();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.BlockSeal.execution_receipt_signatures)
  return _s;
}
inline const std::string& BlockSeal::_internal_execution_receipt_signatures(int index) const {
  return execution_receipt_signatures_.Get(index);
}
inline const std::string& BlockSeal::execution_receipt_signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.execution_receipt_signatures)
  return _internal_execution_receipt_signatures(index);
}
inline std::string* BlockSeal::mutable_execution_receipt_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.execution_receipt_signatures)
  return execution_receipt_signatures_.Mutable(index);
}
inline void BlockSeal::set_execution_receipt_signatures(int index, const std::string& value) {
  execution_receipt_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::set_execution_receipt_signatures(int index, std::string&& value) {
  execution_receipt_signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::set_execution_receipt_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  execution_receipt_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::set_execution_receipt_signatures(int index, const void* value, size_t size) {
  execution_receipt_signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline std::string* BlockSeal::_internal_add_execution_receipt_signatures() {
  return execution_receipt_signatures_.Add();
}
inline void BlockSeal::add_execution_receipt_signatures(const std::string& value) {
  execution_receipt_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::add_execution_receipt_signatures(std::string&& value) {
  execution_receipt_signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::add_execution_receipt_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  execution_receipt_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline void BlockSeal::add_execution_receipt_signatures(const void* value, size_t size) {
  execution_receipt_signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.BlockSeal.execution_receipt_signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockSeal::execution_receipt_signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.BlockSeal.execution_receipt_signatures)
  return execution_receipt_signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockSeal::mutable_execution_receipt_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.BlockSeal.execution_receipt_signatures)
  return &execution_receipt_signatures_;
}

// repeated bytes result_approval_signatures = 4;
inline int BlockSeal::_internal_result_approval_signatures_size() const {
  return result_approval_signatures_.size();
}
inline int BlockSeal::result_approval_signatures_size() const {
  return _internal_result_approval_signatures_size();
}
inline void BlockSeal::clear_result_approval_signatures() {
  result_approval_signatures_.Clear();
}
inline std::string* BlockSeal::add_result_approval_signatures() {
  std::string* _s = _internal_add_result_approval_signatures();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.BlockSeal.result_approval_signatures)
  return _s;
}
inline const std::string& BlockSeal::_internal_result_approval_signatures(int index) const {
  return result_approval_signatures_.Get(index);
}
inline const std::string& BlockSeal::result_approval_signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.result_approval_signatures)
  return _internal_result_approval_signatures(index);
}
inline std::string* BlockSeal::mutable_result_approval_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.result_approval_signatures)
  return result_approval_signatures_.Mutable(index);
}
inline void BlockSeal::set_result_approval_signatures(int index, const std::string& value) {
  result_approval_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::set_result_approval_signatures(int index, std::string&& value) {
  result_approval_signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::set_result_approval_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  result_approval_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::set_result_approval_signatures(int index, const void* value, size_t size) {
  result_approval_signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.BlockSeal.result_approval_signatures)
}
inline std::string* BlockSeal::_internal_add_result_approval_signatures() {
  return result_approval_signatures_.Add();
}
inline void BlockSeal::add_result_approval_signatures(const std::string& value) {
  result_approval_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::add_result_approval_signatures(std::string&& value) {
  result_approval_signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::add_result_approval_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  result_approval_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.BlockSeal.result_approval_signatures)
}
inline void BlockSeal::add_result_approval_signatures(const void* value, size_t size) {
  result_approval_signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.BlockSeal.result_approval_signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockSeal::result_approval_signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.BlockSeal.result_approval_signatures)
  return result_approval_signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockSeal::mutable_result_approval_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.BlockSeal.result_approval_signatures)
  return &result_approval_signatures_;
}

// bytes final_state = 5;
inline void BlockSeal::clear_final_state() {
  final_state_.ClearToEmpty();
}
inline const std::string& BlockSeal::final_state() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.final_state)
  return _internal_final_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockSeal::set_final_state(ArgT0&& arg0, ArgT... args) {
 
 final_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.final_state)
}
inline std::string* BlockSeal::mutable_final_state() {
  std::string* _s = _internal_mutable_final_state();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.final_state)
  return _s;
}
inline const std::string& BlockSeal::_internal_final_state() const {
  return final_state_.Get();
}
inline void BlockSeal::_internal_set_final_state(const std::string& value) {
  
  final_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockSeal::_internal_mutable_final_state() {
  
  return final_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockSeal::release_final_state() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockSeal.final_state)
  return final_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockSeal::set_allocated_final_state(std::string* final_state) {
  if (final_state != nullptr) {
    
  } else {
    
  }
  final_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), final_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockSeal.final_state)
}

// bytes result_id = 6;
inline void BlockSeal::clear_result_id() {
  result_id_.ClearToEmpty();
}
inline const std::string& BlockSeal::result_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.result_id)
  return _internal_result_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockSeal::set_result_id(ArgT0&& arg0, ArgT... args) {
 
 result_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.BlockSeal.result_id)
}
inline std::string* BlockSeal::mutable_result_id() {
  std::string* _s = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.result_id)
  return _s;
}
inline const std::string& BlockSeal::_internal_result_id() const {
  return result_id_.Get();
}
inline void BlockSeal::_internal_set_result_id(const std::string& value) {
  
  result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockSeal::_internal_mutable_result_id() {
  
  return result_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockSeal::release_result_id() {
  // @@protoc_insertion_point(field_release:flow.entities.BlockSeal.result_id)
  return result_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockSeal::set_allocated_result_id(std::string* result_id) {
  if (result_id != nullptr) {
    
  } else {
    
  }
  result_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.BlockSeal.result_id)
}

// repeated .flow.entities.AggregatedSignature aggregated_approval_sigs = 7;
inline int BlockSeal::_internal_aggregated_approval_sigs_size() const {
  return aggregated_approval_sigs_.size();
}
inline int BlockSeal::aggregated_approval_sigs_size() const {
  return _internal_aggregated_approval_sigs_size();
}
inline void BlockSeal::clear_aggregated_approval_sigs() {
  aggregated_approval_sigs_.Clear();
}
inline ::flow::entities::AggregatedSignature* BlockSeal::mutable_aggregated_approval_sigs(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.BlockSeal.aggregated_approval_sigs)
  return aggregated_approval_sigs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AggregatedSignature >*
BlockSeal::mutable_aggregated_approval_sigs() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.BlockSeal.aggregated_approval_sigs)
  return &aggregated_approval_sigs_;
}
inline const ::flow::entities::AggregatedSignature& BlockSeal::_internal_aggregated_approval_sigs(int index) const {
  return aggregated_approval_sigs_.Get(index);
}
inline const ::flow::entities::AggregatedSignature& BlockSeal::aggregated_approval_sigs(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.BlockSeal.aggregated_approval_sigs)
  return _internal_aggregated_approval_sigs(index);
}
inline ::flow::entities::AggregatedSignature* BlockSeal::_internal_add_aggregated_approval_sigs() {
  return aggregated_approval_sigs_.Add();
}
inline ::flow::entities::AggregatedSignature* BlockSeal::add_aggregated_approval_sigs() {
  ::flow::entities::AggregatedSignature* _add = _internal_add_aggregated_approval_sigs();
  // @@protoc_insertion_point(field_add:flow.entities.BlockSeal.aggregated_approval_sigs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::AggregatedSignature >&
BlockSeal::aggregated_approval_sigs() const {
  // @@protoc_insertion_point(field_list:flow.entities.BlockSeal.aggregated_approval_sigs)
  return aggregated_approval_sigs_;
}

// -------------------------------------------------------------------

// AggregatedSignature

// bytes verifier_signatures = 1;
inline void AggregatedSignature::clear_verifier_signatures() {
  verifier_signatures_.ClearToEmpty();
}
inline const std::string& AggregatedSignature::verifier_signatures() const {
  // @@protoc_insertion_point(field_get:flow.entities.AggregatedSignature.verifier_signatures)
  return _internal_verifier_signatures();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregatedSignature::set_verifier_signatures(ArgT0&& arg0, ArgT... args) {
 
 verifier_signatures_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.AggregatedSignature.verifier_signatures)
}
inline std::string* AggregatedSignature::mutable_verifier_signatures() {
  std::string* _s = _internal_mutable_verifier_signatures();
  // @@protoc_insertion_point(field_mutable:flow.entities.AggregatedSignature.verifier_signatures)
  return _s;
}
inline const std::string& AggregatedSignature::_internal_verifier_signatures() const {
  return verifier_signatures_.Get();
}
inline void AggregatedSignature::_internal_set_verifier_signatures(const std::string& value) {
  
  verifier_signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregatedSignature::_internal_mutable_verifier_signatures() {
  
  return verifier_signatures_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregatedSignature::release_verifier_signatures() {
  // @@protoc_insertion_point(field_release:flow.entities.AggregatedSignature.verifier_signatures)
  return verifier_signatures_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregatedSignature::set_allocated_verifier_signatures(std::string* verifier_signatures) {
  if (verifier_signatures != nullptr) {
    
  } else {
    
  }
  verifier_signatures_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verifier_signatures,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.AggregatedSignature.verifier_signatures)
}

// repeated bytes signer_ids = 2;
inline int AggregatedSignature::_internal_signer_ids_size() const {
  return signer_ids_.size();
}
inline int AggregatedSignature::signer_ids_size() const {
  return _internal_signer_ids_size();
}
inline void AggregatedSignature::clear_signer_ids() {
  signer_ids_.Clear();
}
inline std::string* AggregatedSignature::add_signer_ids() {
  std::string* _s = _internal_add_signer_ids();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.AggregatedSignature.signer_ids)
  return _s;
}
inline const std::string& AggregatedSignature::_internal_signer_ids(int index) const {
  return signer_ids_.Get(index);
}
inline const std::string& AggregatedSignature::signer_ids(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.AggregatedSignature.signer_ids)
  return _internal_signer_ids(index);
}
inline std::string* AggregatedSignature::mutable_signer_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.AggregatedSignature.signer_ids)
  return signer_ids_.Mutable(index);
}
inline void AggregatedSignature::set_signer_ids(int index, const std::string& value) {
  signer_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::set_signer_ids(int index, std::string&& value) {
  signer_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::set_signer_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::set_signer_ids(int index, const void* value, size_t size) {
  signer_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.AggregatedSignature.signer_ids)
}
inline std::string* AggregatedSignature::_internal_add_signer_ids() {
  return signer_ids_.Add();
}
inline void AggregatedSignature::add_signer_ids(const std::string& value) {
  signer_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::add_signer_ids(std::string&& value) {
  signer_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::add_signer_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.AggregatedSignature.signer_ids)
}
inline void AggregatedSignature::add_signer_ids(const void* value, size_t size) {
  signer_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.AggregatedSignature.signer_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AggregatedSignature::signer_ids() const {
  // @@protoc_insertion_point(field_list:flow.entities.AggregatedSignature.signer_ids)
  return signer_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AggregatedSignature::mutable_signer_ids() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.AggregatedSignature.signer_ids)
  return &signer_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_5fseal_2eproto
