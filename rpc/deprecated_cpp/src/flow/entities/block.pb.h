// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow/entities/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "flow/entities/collection.pb.h"
#include "flow/entities/block_seal.pb.h"
#include "flow/entities/execution_result.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2fentities_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2fentities_2fblock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2fentities_2fblock_2eproto;
namespace flow {
namespace entities {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace entities
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> ::flow::entities::Block* Arena::CreateMaybeMessage<::flow::entities::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flow {
namespace entities {

// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flow.entities.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit constexpr Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return new Block();
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flow.entities.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionGuaranteesFieldNumber = 5,
    kBlockSealsFieldNumber = 6,
    kSignaturesFieldNumber = 7,
    kExecutionReceiptMetaListFieldNumber = 8,
    kExecutionResultListFieldNumber = 9,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kHeightFieldNumber = 3,
  };
  // repeated .flow.entities.CollectionGuarantee collection_guarantees = 5;
  int collection_guarantees_size() const;
  private:
  int _internal_collection_guarantees_size() const;
  public:
  void clear_collection_guarantees();
  ::flow::entities::CollectionGuarantee* mutable_collection_guarantees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::CollectionGuarantee >*
      mutable_collection_guarantees();
  private:
  const ::flow::entities::CollectionGuarantee& _internal_collection_guarantees(int index) const;
  ::flow::entities::CollectionGuarantee* _internal_add_collection_guarantees();
  public:
  const ::flow::entities::CollectionGuarantee& collection_guarantees(int index) const;
  ::flow::entities::CollectionGuarantee* add_collection_guarantees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::CollectionGuarantee >&
      collection_guarantees() const;

  // repeated .flow.entities.BlockSeal block_seals = 6;
  int block_seals_size() const;
  private:
  int _internal_block_seals_size() const;
  public:
  void clear_block_seals();
  ::flow::entities::BlockSeal* mutable_block_seals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::BlockSeal >*
      mutable_block_seals();
  private:
  const ::flow::entities::BlockSeal& _internal_block_seals(int index) const;
  ::flow::entities::BlockSeal* _internal_add_block_seals();
  public:
  const ::flow::entities::BlockSeal& block_seals(int index) const;
  ::flow::entities::BlockSeal* add_block_seals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::BlockSeal >&
      block_seals() const;

  // repeated bytes signatures = 7;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // repeated .flow.entities.ExecutionReceiptMeta execution_receipt_metaList = 8;
  int execution_receipt_metalist_size() const;
  private:
  int _internal_execution_receipt_metalist_size() const;
  public:
  void clear_execution_receipt_metalist();
  ::flow::entities::ExecutionReceiptMeta* mutable_execution_receipt_metalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionReceiptMeta >*
      mutable_execution_receipt_metalist();
  private:
  const ::flow::entities::ExecutionReceiptMeta& _internal_execution_receipt_metalist(int index) const;
  ::flow::entities::ExecutionReceiptMeta* _internal_add_execution_receipt_metalist();
  public:
  const ::flow::entities::ExecutionReceiptMeta& execution_receipt_metalist(int index) const;
  ::flow::entities::ExecutionReceiptMeta* add_execution_receipt_metalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionReceiptMeta >&
      execution_receipt_metalist() const;

  // repeated .flow.entities.ExecutionResult execution_result_list = 9;
  int execution_result_list_size() const;
  private:
  int _internal_execution_result_list_size() const;
  public:
  void clear_execution_result_list();
  ::flow::entities::ExecutionResult* mutable_execution_result_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionResult >*
      mutable_execution_result_list();
  private:
  const ::flow::entities::ExecutionResult& _internal_execution_result_list(int index) const;
  ::flow::entities::ExecutionResult* _internal_add_execution_result_list();
  public:
  const ::flow::entities::ExecutionResult& execution_result_list(int index) const;
  ::flow::entities::ExecutionResult* add_execution_result_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionResult >&
      execution_result_list() const;

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes parent_id = 2;
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flow.entities.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::CollectionGuarantee > collection_guarantees_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::BlockSeal > block_seals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionReceiptMeta > execution_receipt_metalist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionResult > execution_result_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2fentities_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// bytes id = 1;
inline void Block::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Block::id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Block.id)
}
inline std::string* Block::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.id)
  return _s;
}
inline const std::string& Block::_internal_id() const {
  return id_.Get();
}
inline void Block::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_id() {
  // @@protoc_insertion_point(field_release:flow.entities.Block.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Block.id)
}

// bytes parent_id = 2;
inline void Block::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& Block::parent_id() const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_parent_id(ArgT0&& arg0, ArgT... args) {
 
 parent_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flow.entities.Block.parent_id)
}
inline std::string* Block::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.parent_id)
  return _s;
}
inline const std::string& Block::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void Block::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_parent_id() {
  // @@protoc_insertion_point(field_release:flow.entities.Block.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Block.parent_id)
}

// uint64 height = 3;
inline void Block::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Block::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.height)
  return _internal_height();
}
inline void Block::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void Block::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:flow.entities.Block.height)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool Block::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Block::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Block::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Block::timestamp() const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.timestamp)
  return _internal_timestamp();
}
inline void Block::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flow.entities.Block.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:flow.entities.Block.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.timestamp)
  return _msg;
}
inline void Block::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:flow.entities.Block.timestamp)
}

// repeated .flow.entities.CollectionGuarantee collection_guarantees = 5;
inline int Block::_internal_collection_guarantees_size() const {
  return collection_guarantees_.size();
}
inline int Block::collection_guarantees_size() const {
  return _internal_collection_guarantees_size();
}
inline ::flow::entities::CollectionGuarantee* Block::mutable_collection_guarantees(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.collection_guarantees)
  return collection_guarantees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::CollectionGuarantee >*
Block::mutable_collection_guarantees() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Block.collection_guarantees)
  return &collection_guarantees_;
}
inline const ::flow::entities::CollectionGuarantee& Block::_internal_collection_guarantees(int index) const {
  return collection_guarantees_.Get(index);
}
inline const ::flow::entities::CollectionGuarantee& Block::collection_guarantees(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.collection_guarantees)
  return _internal_collection_guarantees(index);
}
inline ::flow::entities::CollectionGuarantee* Block::_internal_add_collection_guarantees() {
  return collection_guarantees_.Add();
}
inline ::flow::entities::CollectionGuarantee* Block::add_collection_guarantees() {
  ::flow::entities::CollectionGuarantee* _add = _internal_add_collection_guarantees();
  // @@protoc_insertion_point(field_add:flow.entities.Block.collection_guarantees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::CollectionGuarantee >&
Block::collection_guarantees() const {
  // @@protoc_insertion_point(field_list:flow.entities.Block.collection_guarantees)
  return collection_guarantees_;
}

// repeated .flow.entities.BlockSeal block_seals = 6;
inline int Block::_internal_block_seals_size() const {
  return block_seals_.size();
}
inline int Block::block_seals_size() const {
  return _internal_block_seals_size();
}
inline ::flow::entities::BlockSeal* Block::mutable_block_seals(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.block_seals)
  return block_seals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::BlockSeal >*
Block::mutable_block_seals() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Block.block_seals)
  return &block_seals_;
}
inline const ::flow::entities::BlockSeal& Block::_internal_block_seals(int index) const {
  return block_seals_.Get(index);
}
inline const ::flow::entities::BlockSeal& Block::block_seals(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.block_seals)
  return _internal_block_seals(index);
}
inline ::flow::entities::BlockSeal* Block::_internal_add_block_seals() {
  return block_seals_.Add();
}
inline ::flow::entities::BlockSeal* Block::add_block_seals() {
  ::flow::entities::BlockSeal* _add = _internal_add_block_seals();
  // @@protoc_insertion_point(field_add:flow.entities.Block.block_seals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::BlockSeal >&
Block::block_seals() const {
  // @@protoc_insertion_point(field_list:flow.entities.Block.block_seals)
  return block_seals_;
}

// repeated bytes signatures = 7;
inline int Block::_internal_signatures_size() const {
  return signatures_.size();
}
inline int Block::signatures_size() const {
  return _internal_signatures_size();
}
inline void Block::clear_signatures() {
  signatures_.Clear();
}
inline std::string* Block::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:flow.entities.Block.signatures)
  return _s;
}
inline const std::string& Block::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& Block::signatures(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.signatures)
  return _internal_signatures(index);
}
inline std::string* Block::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.signatures)
  return signatures_.Mutable(index);
}
inline void Block::set_signatures(int index, const std::string& value) {
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flow.entities.Block.signatures)
}
inline void Block::set_signatures(int index, std::string&& value) {
  signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flow.entities.Block.signatures)
}
inline void Block::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flow.entities.Block.signatures)
}
inline void Block::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flow.entities.Block.signatures)
}
inline std::string* Block::_internal_add_signatures() {
  return signatures_.Add();
}
inline void Block::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flow.entities.Block.signatures)
}
inline void Block::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flow.entities.Block.signatures)
}
inline void Block::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flow.entities.Block.signatures)
}
inline void Block::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flow.entities.Block.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::signatures() const {
  // @@protoc_insertion_point(field_list:flow.entities.Block.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Block.signatures)
  return &signatures_;
}

// repeated .flow.entities.ExecutionReceiptMeta execution_receipt_metaList = 8;
inline int Block::_internal_execution_receipt_metalist_size() const {
  return execution_receipt_metalist_.size();
}
inline int Block::execution_receipt_metalist_size() const {
  return _internal_execution_receipt_metalist_size();
}
inline ::flow::entities::ExecutionReceiptMeta* Block::mutable_execution_receipt_metalist(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.execution_receipt_metaList)
  return execution_receipt_metalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionReceiptMeta >*
Block::mutable_execution_receipt_metalist() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Block.execution_receipt_metaList)
  return &execution_receipt_metalist_;
}
inline const ::flow::entities::ExecutionReceiptMeta& Block::_internal_execution_receipt_metalist(int index) const {
  return execution_receipt_metalist_.Get(index);
}
inline const ::flow::entities::ExecutionReceiptMeta& Block::execution_receipt_metalist(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.execution_receipt_metaList)
  return _internal_execution_receipt_metalist(index);
}
inline ::flow::entities::ExecutionReceiptMeta* Block::_internal_add_execution_receipt_metalist() {
  return execution_receipt_metalist_.Add();
}
inline ::flow::entities::ExecutionReceiptMeta* Block::add_execution_receipt_metalist() {
  ::flow::entities::ExecutionReceiptMeta* _add = _internal_add_execution_receipt_metalist();
  // @@protoc_insertion_point(field_add:flow.entities.Block.execution_receipt_metaList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionReceiptMeta >&
Block::execution_receipt_metalist() const {
  // @@protoc_insertion_point(field_list:flow.entities.Block.execution_receipt_metaList)
  return execution_receipt_metalist_;
}

// repeated .flow.entities.ExecutionResult execution_result_list = 9;
inline int Block::_internal_execution_result_list_size() const {
  return execution_result_list_.size();
}
inline int Block::execution_result_list_size() const {
  return _internal_execution_result_list_size();
}
inline ::flow::entities::ExecutionResult* Block::mutable_execution_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:flow.entities.Block.execution_result_list)
  return execution_result_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionResult >*
Block::mutable_execution_result_list() {
  // @@protoc_insertion_point(field_mutable_list:flow.entities.Block.execution_result_list)
  return &execution_result_list_;
}
inline const ::flow::entities::ExecutionResult& Block::_internal_execution_result_list(int index) const {
  return execution_result_list_.Get(index);
}
inline const ::flow::entities::ExecutionResult& Block::execution_result_list(int index) const {
  // @@protoc_insertion_point(field_get:flow.entities.Block.execution_result_list)
  return _internal_execution_result_list(index);
}
inline ::flow::entities::ExecutionResult* Block::_internal_add_execution_result_list() {
  return execution_result_list_.Add();
}
inline ::flow::entities::ExecutionResult* Block::add_execution_result_list() {
  ::flow::entities::ExecutionResult* _add = _internal_add_execution_result_list();
  // @@protoc_insertion_point(field_add:flow.entities.Block.execution_result_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flow::entities::ExecutionResult >&
Block::execution_result_list() const {
  // @@protoc_insertion_point(field_list:flow.entities.Block.execution_result_list)
  return execution_result_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace entities
}  // namespace flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2fentities_2fblock_2eproto
