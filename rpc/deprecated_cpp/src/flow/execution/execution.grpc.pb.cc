// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flow/execution/execution.proto

#include "flow/execution/execution.pb.h"
#include "flow/execution/execution.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flow {
namespace execution {

static const char* ExecutionAPI_method_names[] = {
  "/flow.execution.ExecutionAPI/Ping",
  "/flow.execution.ExecutionAPI/GetAccountAtBlockID",
  "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID",
  "/flow.execution.ExecutionAPI/GetEventsForBlockIDs",
  "/flow.execution.ExecutionAPI/GetTransactionResult",
  "/flow.execution.ExecutionAPI/GetRegisterAtBlockID",
  "/flow.execution.ExecutionAPI/GetLatestBlockHeader",
  "/flow.execution.ExecutionAPI/GetBlockHeaderByID",
};

std::unique_ptr< ExecutionAPI::Stub> ExecutionAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ExecutionAPI::Stub> stub(new ExecutionAPI::Stub(channel, options));
  return stub;
}

ExecutionAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(ExecutionAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountAtBlockID_(ExecutionAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteScriptAtBlockID_(ExecutionAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsForBlockIDs_(ExecutionAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionResult_(ExecutionAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRegisterAtBlockID_(ExecutionAPI_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestBlockHeader_(ExecutionAPI_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeaderByID_(ExecutionAPI_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ExecutionAPI::Stub::Ping(::grpc::ClientContext* context, const ::flow::execution::PingRequest& request, ::flow::execution::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::PingRequest, ::flow::execution::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ExecutionAPI::Stub::async::Ping(::grpc::ClientContext* context, const ::flow::execution::PingRequest* request, ::flow::execution::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::PingRequest, ::flow::execution::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::Ping(::grpc::ClientContext* context, const ::flow::execution::PingRequest* request, ::flow::execution::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::PingResponse>* ExecutionAPI::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::flow::execution::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::PingResponse, ::flow::execution::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::PingResponse>* ExecutionAPI::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::flow::execution::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetAccountAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetAccountAtBlockIDRequest& request, ::flow::execution::GetAccountAtBlockIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetAccountAtBlockIDRequest, ::flow::execution::GetAccountAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountAtBlockID_, context, request, response);
}

void ExecutionAPI::Stub::async::GetAccountAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetAccountAtBlockIDRequest* request, ::flow::execution::GetAccountAtBlockIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetAccountAtBlockIDRequest, ::flow::execution::GetAccountAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtBlockID_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetAccountAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetAccountAtBlockIDRequest* request, ::flow::execution::GetAccountAtBlockIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountAtBlockID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetAccountAtBlockIDResponse>* ExecutionAPI::Stub::PrepareAsyncGetAccountAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetAccountAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::GetAccountAtBlockIDResponse, ::flow::execution::GetAccountAtBlockIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountAtBlockID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetAccountAtBlockIDResponse>* ExecutionAPI::Stub::AsyncGetAccountAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetAccountAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountAtBlockIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest& request, ::flow::execution::ExecuteScriptAtBlockIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::ExecuteScriptAtBlockIDRequest, ::flow::execution::ExecuteScriptAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteScriptAtBlockID_, context, request, response);
}

void ExecutionAPI::Stub::async::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest* request, ::flow::execution::ExecuteScriptAtBlockIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::ExecuteScriptAtBlockIDRequest, ::flow::execution::ExecuteScriptAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockID_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::ExecuteScriptAtBlockID(::grpc::ClientContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest* request, ::flow::execution::ExecuteScriptAtBlockIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteScriptAtBlockID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::ExecuteScriptAtBlockIDResponse>* ExecutionAPI::Stub::PrepareAsyncExecuteScriptAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::ExecuteScriptAtBlockIDResponse, ::flow::execution::ExecuteScriptAtBlockIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteScriptAtBlockID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::ExecuteScriptAtBlockIDResponse>* ExecutionAPI::Stub::AsyncExecuteScriptAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteScriptAtBlockIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::execution::GetEventsForBlockIDsRequest& request, ::flow::execution::GetEventsForBlockIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetEventsForBlockIDsRequest, ::flow::execution::GetEventsForBlockIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventsForBlockIDs_, context, request, response);
}

void ExecutionAPI::Stub::async::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::execution::GetEventsForBlockIDsRequest* request, ::flow::execution::GetEventsForBlockIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetEventsForBlockIDsRequest, ::flow::execution::GetEventsForBlockIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForBlockIDs_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetEventsForBlockIDs(::grpc::ClientContext* context, const ::flow::execution::GetEventsForBlockIDsRequest* request, ::flow::execution::GetEventsForBlockIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsForBlockIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetEventsForBlockIDsResponse>* ExecutionAPI::Stub::PrepareAsyncGetEventsForBlockIDsRaw(::grpc::ClientContext* context, const ::flow::execution::GetEventsForBlockIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::GetEventsForBlockIDsResponse, ::flow::execution::GetEventsForBlockIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventsForBlockIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetEventsForBlockIDsResponse>* ExecutionAPI::Stub::AsyncGetEventsForBlockIDsRaw(::grpc::ClientContext* context, const ::flow::execution::GetEventsForBlockIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsForBlockIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetTransactionResult(::grpc::ClientContext* context, const ::flow::execution::GetTransactionResultRequest& request, ::flow::execution::GetTransactionResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetTransactionResultRequest, ::flow::execution::GetTransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionResult_, context, request, response);
}

void ExecutionAPI::Stub::async::GetTransactionResult(::grpc::ClientContext* context, const ::flow::execution::GetTransactionResultRequest* request, ::flow::execution::GetTransactionResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetTransactionResultRequest, ::flow::execution::GetTransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionResult_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetTransactionResult(::grpc::ClientContext* context, const ::flow::execution::GetTransactionResultRequest* request, ::flow::execution::GetTransactionResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetTransactionResultResponse>* ExecutionAPI::Stub::PrepareAsyncGetTransactionResultRaw(::grpc::ClientContext* context, const ::flow::execution::GetTransactionResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::GetTransactionResultResponse, ::flow::execution::GetTransactionResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetTransactionResultResponse>* ExecutionAPI::Stub::AsyncGetTransactionResultRaw(::grpc::ClientContext* context, const ::flow::execution::GetTransactionResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetRegisterAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest& request, ::flow::execution::GetRegisterAtBlockIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetRegisterAtBlockIDRequest, ::flow::execution::GetRegisterAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRegisterAtBlockID_, context, request, response);
}

void ExecutionAPI::Stub::async::GetRegisterAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest* request, ::flow::execution::GetRegisterAtBlockIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetRegisterAtBlockIDRequest, ::flow::execution::GetRegisterAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRegisterAtBlockID_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetRegisterAtBlockID(::grpc::ClientContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest* request, ::flow::execution::GetRegisterAtBlockIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRegisterAtBlockID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetRegisterAtBlockIDResponse>* ExecutionAPI::Stub::PrepareAsyncGetRegisterAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::GetRegisterAtBlockIDResponse, ::flow::execution::GetRegisterAtBlockIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRegisterAtBlockID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::GetRegisterAtBlockIDResponse>* ExecutionAPI::Stub::AsyncGetRegisterAtBlockIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRegisterAtBlockIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::execution::GetLatestBlockHeaderRequest& request, ::flow::execution::BlockHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetLatestBlockHeaderRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestBlockHeader_, context, request, response);
}

void ExecutionAPI::Stub::async::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::execution::GetLatestBlockHeaderRequest* request, ::flow::execution::BlockHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetLatestBlockHeaderRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockHeader_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetLatestBlockHeader(::grpc::ClientContext* context, const ::flow::execution::GetLatestBlockHeaderRequest* request, ::flow::execution::BlockHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlockHeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::BlockHeaderResponse>* ExecutionAPI::Stub::PrepareAsyncGetLatestBlockHeaderRaw(::grpc::ClientContext* context, const ::flow::execution::GetLatestBlockHeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::BlockHeaderResponse, ::flow::execution::GetLatestBlockHeaderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestBlockHeader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::BlockHeaderResponse>* ExecutionAPI::Stub::AsyncGetLatestBlockHeaderRaw(::grpc::ClientContext* context, const ::flow::execution::GetLatestBlockHeaderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestBlockHeaderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutionAPI::Stub::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::execution::GetBlockHeaderByIDRequest& request, ::flow::execution::BlockHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow::execution::GetBlockHeaderByIDRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockHeaderByID_, context, request, response);
}

void ExecutionAPI::Stub::async::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::execution::GetBlockHeaderByIDRequest* request, ::flow::execution::BlockHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow::execution::GetBlockHeaderByIDRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByID_, context, request, response, std::move(f));
}

void ExecutionAPI::Stub::async::GetBlockHeaderByID(::grpc::ClientContext* context, const ::flow::execution::GetBlockHeaderByIDRequest* request, ::flow::execution::BlockHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::BlockHeaderResponse>* ExecutionAPI::Stub::PrepareAsyncGetBlockHeaderByIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetBlockHeaderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow::execution::BlockHeaderResponse, ::flow::execution::GetBlockHeaderByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockHeaderByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow::execution::BlockHeaderResponse>* ExecutionAPI::Stub::AsyncGetBlockHeaderByIDRaw(::grpc::ClientContext* context, const ::flow::execution::GetBlockHeaderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockHeaderByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

ExecutionAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::PingRequest, ::flow::execution::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::PingRequest* req,
             ::flow::execution::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetAccountAtBlockIDRequest, ::flow::execution::GetAccountAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetAccountAtBlockIDRequest* req,
             ::flow::execution::GetAccountAtBlockIDResponse* resp) {
               return service->GetAccountAtBlockID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::ExecuteScriptAtBlockIDRequest, ::flow::execution::ExecuteScriptAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::ExecuteScriptAtBlockIDRequest* req,
             ::flow::execution::ExecuteScriptAtBlockIDResponse* resp) {
               return service->ExecuteScriptAtBlockID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetEventsForBlockIDsRequest, ::flow::execution::GetEventsForBlockIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetEventsForBlockIDsRequest* req,
             ::flow::execution::GetEventsForBlockIDsResponse* resp) {
               return service->GetEventsForBlockIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetTransactionResultRequest, ::flow::execution::GetTransactionResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetTransactionResultRequest* req,
             ::flow::execution::GetTransactionResultResponse* resp) {
               return service->GetTransactionResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetRegisterAtBlockIDRequest, ::flow::execution::GetRegisterAtBlockIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetRegisterAtBlockIDRequest* req,
             ::flow::execution::GetRegisterAtBlockIDResponse* resp) {
               return service->GetRegisterAtBlockID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetLatestBlockHeaderRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetLatestBlockHeaderRequest* req,
             ::flow::execution::BlockHeaderResponse* resp) {
               return service->GetLatestBlockHeader(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutionAPI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutionAPI::Service, ::flow::execution::GetBlockHeaderByIDRequest, ::flow::execution::BlockHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutionAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow::execution::GetBlockHeaderByIDRequest* req,
             ::flow::execution::BlockHeaderResponse* resp) {
               return service->GetBlockHeaderByID(ctx, req, resp);
             }, this)));
}

ExecutionAPI::Service::~Service() {
}

::grpc::Status ExecutionAPI::Service::Ping(::grpc::ServerContext* context, const ::flow::execution::PingRequest* request, ::flow::execution::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetAccountAtBlockID(::grpc::ServerContext* context, const ::flow::execution::GetAccountAtBlockIDRequest* request, ::flow::execution::GetAccountAtBlockIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::ExecuteScriptAtBlockID(::grpc::ServerContext* context, const ::flow::execution::ExecuteScriptAtBlockIDRequest* request, ::flow::execution::ExecuteScriptAtBlockIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetEventsForBlockIDs(::grpc::ServerContext* context, const ::flow::execution::GetEventsForBlockIDsRequest* request, ::flow::execution::GetEventsForBlockIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetTransactionResult(::grpc::ServerContext* context, const ::flow::execution::GetTransactionResultRequest* request, ::flow::execution::GetTransactionResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetRegisterAtBlockID(::grpc::ServerContext* context, const ::flow::execution::GetRegisterAtBlockIDRequest* request, ::flow::execution::GetRegisterAtBlockIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetLatestBlockHeader(::grpc::ServerContext* context, const ::flow::execution::GetLatestBlockHeaderRequest* request, ::flow::execution::BlockHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutionAPI::Service::GetBlockHeaderByID(::grpc::ServerContext* context, const ::flow::execution::GetBlockHeaderByIDRequest* request, ::flow::execution::BlockHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flow
}  // namespace execution

